{"_id":"botteorbi001","name":"ü•ä Botte da Orbi","type":"script","author":"Brancalonia","img":"icons/skills/melee/weapons-crossed-swords-black.webp","scope":"global","command":"// BOTTE DA ORBI - Sistema Combattimento di Massa\n// Seleziona i token che partecipano al combattimento\n\nconst tokens = canvas.tokens.controlled;\nif(tokens.length === 0) {\n  ui.notifications.warn(\"Seleziona almeno un token per la Botte da Orbi!\");\n  return;\n}\n\n// Calcola modificatori squadra\nlet modSquadra = 0;\nmodSquadra += Math.floor(tokens.length / 2); // +1 ogni 2 membri\n\n// Controlla se c'√® un leader\nconst hasLeader = tokens.some(t => t.actor.items.find(i => i.name.includes(\"Capitano\") || i.name.includes(\"Leader\")));\nif(hasLeader) modSquadra += 2;\n\n// Controlla personaggi di alto livello\nconst highLevel = tokens.filter(t => t.actor.system.details.level >= 5).length;\nmodSquadra += highLevel;\n\n// Tiro di squadra\nconst roll = await new Roll(`1d20 + ${modSquadra}`).evaluate({async: true});\nawait roll.toMessage({\n  speaker: ChatMessage.getSpeaker(),\n  flavor: `<h2>ü•ä Botte da Orbi!</h2>\n  <p><strong>Squadra:</strong> ${tokens.length} combattenti</p>\n  <p><strong>Modificatore:</strong> +${modSquadra}</p>\n  <p><strong>Leader:</strong> ${hasLeader ? \"S√¨\" : \"No\"}</p>\n  <hr>\n  <p>Confronta il risultato con la squadra avversaria!</p>\n  <p><em>Chi perde subisce 1d6 danni (non letali) e TS Saggezza CD 12 o si ritira.</em></p>`\n});\n\n// Applica danni se richiesto\nif(roll.total < 10) { // Sconfitta automatica se sotto 10\n  const damage = await new Roll(\"1d6\").evaluate({async: true});\n  for(let token of tokens) {\n    await token.actor.applyDamage(damage.total, 1);\n  }\n  ChatMessage.create({\n    content: `<p style=\"color:red;\">La squadra √® stata sconfitta! Tutti subiscono ${damage.total} danni non letali.</p>`\n  });\n}","ownership":{"default":0},"flags":{"core":{"sourceId":"Macro.botteorbi001"}},"_stats":{"systemId":"dnd5e","systemVersion":"3.3.1","coreVersion":"13.347"}}
{"_id":"banda001","name":"‚öîÔ∏è Gestione Compagnia di Ventura","type":"script","author":"Brancalonia","img":"icons/environment/people/group.webp","scope":"global","command":"// GESTIONE COMPAGNIA DI VENTURA\\n// Sistema completo per gestire la propria banda\\n\\nconst actor = game.user.character || canvas.tokens.controlled[0]?.actor;\\nif (!actor) {\\n  ui.notifications.warn(\\\"Seleziona un personaggio!\\\");\\n  return;\\n}\\n\\n// Recupera dati banda\\nlet banda = actor.getFlag(\\\"world\\\", \\\"banda\\\") || {\\n  nome: \\\"Nuova Compagnia\\\",\\n  membri: 5,\\n  morale: 10,\\n  tesoro: 0,\\n  specialisti: []\\n};\\n\\n// Tipi di specialisti\\nconst specialisti = {\\n  \\\"Medico\\\": { costo: 50, effetto: \\\"Cura 1d4 PF dopo ogni battaglia\\\" },\\n  \\\"Esploratore\\\": { costo: 30, effetto: \\\"Vantaggio su Percezione in viaggio\\\" },\\n  \\\"Cuoco\\\": { costo: 20, effetto: \\\"+1 Morale al giorno\\\" },\\n  \\\"Fabbro\\\": { costo: 40, effetto: \\\"Ripara equipaggiamento scadente\\\" },\\n  \\\"Musico\\\": { costo: 25, effetto: \\\"Vantaggio su Intrattenere\\\" },\\n  \\\"Spia\\\": { costo: 60, effetto: \\\"Informazioni sui nemici\\\" }\\n};\\n\\n// Funzione per calcolare mantenimento\\nfunction getMantenimento() {\\n  const base = banda.membri * 2;\\n  const spec = banda.specialisti.length * 10;\\n  return base + spec;\\n}\\n\\n// Dialog principale\\nnew Dialog({\\n  title: \\\"Gestione Compagnia di Ventura\\\",\\n  content: `\\n    <h2>‚öîÔ∏è ${banda.nome}</h2>\\n    <div style=\\\"display: grid; grid-template-columns: 1fr 1fr; gap: 10px;\\\">\\n      <div>\\n        <p><strong>Membri:</strong> ${banda.membri}</p>\\n        <p><strong>Morale:</strong> ${banda.morale}/20</p>\\n      </div>\\n      <div>\\n        <p><strong>Tesoro:</strong> ${banda.tesoro} ducati</p>\\n        <p><strong>Mantenimento:</strong> ${getMantenimento()} ducati/settimana</p>\\n      </div>\\n    </div>\\n    <hr>\\n    <h3>Specialisti</h3>\\n    <ul>\\n      ${banda.specialisti.length > 0 ? \\n        banda.specialisti.map(s => `<li>${s}</li>`).join(\\\"\\\\n\\\") :\\n        \\\"<li><em>Nessuno</em></li>\\\"\\n      }\\n    </ul>\\n    <hr>\\n    <h3>Azioni</h3>\\n  `,\\n  buttons: {\\n    recluta: {\\n      label: \\\"Recluta Membri\\\",\\n      callback: async () => {\\n        const roll = await new Roll(\\\"1d6\\\").evaluate({async: true});\\n        banda.membri += roll.total;\\n        await actor.setFlag(\\\"world\\\", \\\"banda\\\", banda);\\n        \\n        ChatMessage.create({\\n          speaker: ChatMessage.getSpeaker({actor}),\\n          content: `<h3>‚öîÔ∏è Reclutamento</h3>\\n          <p>Hai reclutato [[${roll.total}]] nuovi membri!</p>\\n          <p>Totale membri: ${banda.membri}</p>`\\n        });\\n      }\\n    },\\n    specialista: {\\n      label: \\\"Assumi Specialista\\\",\\n      callback: () => {\\n        const buttons2 = {};\\n        for (let [tipo, info] of Object.entries(specialisti)) {\\n          if (!banda.specialisti.includes(tipo)) {\\n            buttons2[tipo] = {\\n              label: `${tipo} (${info.costo} ducati)`,\\n              callback: async () => {\\n                if (banda.tesoro >= info.costo) {\\n                  banda.tesoro -= info.costo;\\n                  banda.specialisti.push(tipo);\\n                  await actor.setFlag(\\\"world\\\", \\\"banda\\\", banda);\\n                  \\n                  ChatMessage.create({\\n                    speaker: ChatMessage.getSpeaker({actor}),\\n                    content: `<h3>ü§ù Nuovo Specialista!</h3>\\n                    <p>Hai assunto un <strong>${tipo}</strong></p>\\n                    <p><em>${info.effetto}</em></p>\\n                    <p>Costo: ${info.costo} ducati</p>`\\n                  });\\n                } else {\\n                  ui.notifications.warn(\\\"Fondi insufficienti!\\\");\\n                }\\n              }\\n            };\\n          }\\n        }\\n        \\n        new Dialog({\\n          title: \\\"Assumi Specialista\\\",\\n          buttons: buttons2\\n        }).render(true);\\n      }\\n    },\\n    paga: {\\n      label: \\\"Paga Stipendi\\\",\\n      callback: async () => {\\n        const costo = getMantenimento();\\n        if (banda.tesoro >= costo) {\\n          banda.tesoro -= costo;\\n          banda.morale = Math.min(20, banda.morale + 1);\\n          await actor.setFlag(\\\"world\\\", \\\"banda\\\", banda);\\n          \\n          ChatMessage.create({\\n            speaker: ChatMessage.getSpeaker({actor}),\\n            content: `<h3>üí∞ Pagamento Stipendi</h3>\\n            <p>Hai pagato ${costo} ducati di stipendi.</p>\\n            <p>Il morale sale a ${banda.morale}!</p>`\\n          });\\n        } else {\\n          banda.morale = Math.max(0, banda.morale - 2);\\n          await actor.setFlag(\\\"world\\\", \\\"banda\\\", banda);\\n          \\n          ChatMessage.create({\\n            speaker: ChatMessage.getSpeaker({actor}),\\n            content: `<h3>‚ö†Ô∏è Mancato Pagamento!</h3>\\n            <p style=\\\"color:red;\\\">Non puoi pagare gli stipendi!</p>\\n            <p>Il morale scende a ${banda.morale}!</p>\\n            ${banda.morale <= 5 ? \\\"<p><strong>Attenzione: rischio diserzione!</strong></p>\\\" : \\\"\\\"}`\\n          });\\n        }\\n      }\\n    },\\n    battaglia: {\\n      label: \\\"Risolvi Battaglia\\\",\\n      callback: async () => {\\n        const roll = await new Roll(\\\"1d20\\\").evaluate({async: true});\\n        const modificatore = Math.floor(banda.membri / 5) + Math.floor(banda.morale / 5);\\n        const totale = roll.total + modificatore;\\n        \\n        let risultato = \\\"\\\";\\n        let perdite = 0;\\n        let bottino = 0;\\n        \\n        if (totale >= 15) {\\n          risultato = \\\"Vittoria Totale!\\\";\\n          bottino = new Roll(\\\"3d20\\\").evaluate({async: false}).total;\\n          banda.morale = Math.min(20, banda.morale + 2);\\n        } else if (totale >= 10) {\\n          risultato = \\\"Vittoria Minore\\\";\\n          bottino = new Roll(\\\"2d20\\\").evaluate({async: false}).total;\\n          perdite = new Roll(\\\"1d4\\\").evaluate({async: false}).total;\\n          banda.morale = Math.min(20, banda.morale + 1);\\n        } else if (totale >= 5) {\\n          risultato = \\\"Pareggio\\\";\\n          bottino = new Roll(\\\"1d20\\\").evaluate({async: false}).total;\\n          perdite = new Roll(\\\"1d6\\\").evaluate({async: false}).total;\\n          banda.morale = Math.max(0, banda.morale - 1);\\n        } else {\\n          risultato = \\\"Sconfitta!\\\";\\n          perdite = new Roll(\\\"2d6\\\").evaluate({async: false}).total;\\n          banda.morale = Math.max(0, banda.morale - 3);\\n        }\\n        \\n        banda.membri = Math.max(0, banda.membri - perdite);\\n        banda.tesoro += bottino;\\n        await actor.setFlag(\\\"world\\\", \\\"banda\\\", banda);\\n        \\n        ChatMessage.create({\\n          speaker: ChatMessage.getSpeaker({actor}),\\n          content: `<h3>‚öîÔ∏è Risultato Battaglia</h3>\\n          <p>Tiro: [[${roll.total}]] + ${modificatore} = <strong>${totale}</strong></p>\\n          <p><strong>${risultato}</strong></p>\\n          <hr>\\n          <p>Perdite: ${perdite} membri</p>\\n          <p>Bottino: ${bottino} ducati</p>\\n          <p>Morale: ${banda.morale}/20</p>\\n          <p>Membri rimasti: ${banda.membri}</p>`\\n        });\\n      }\\n    },\\n    close: {\\n      label: \\\"Chiudi\\\",\\n      icon: \\\"<i class='fas fa-times'></i>\\\"\\n    }\\n  },\\n  default: \\\"close\\\"\\n}).render(true);","ownership":{"default":0},"flags":{"core":{"sourceId":"Macro.banda001"}},"_stats":{"systemId":"dnd5e","systemVersion":"3.3.1","coreVersion":"13.347"}}
{"_id":"santi001","name":"üôè Invocazione ai Santi","type":"script","author":"Brancalonia","img":"icons/magic/holy/prayer-hands-glowing-yellow.webp","scope":"global","command":"// INVOCAZIONE AI SANTI\\n// Sistema per invocare l'aiuto dei santi protettori\\n\\nconst actor = game.user.character || canvas.tokens.controlled[0]?.actor;\\nif (!actor) {\\n  ui.notifications.warn(\\\"Seleziona un personaggio!\\\");\\n  return;\\n}\\n\\n// Lista dei santi di Brancalonia\\nconst santi = {\\n  \\\"Sant'Orderico\\\": {\\n    dominio: \\\"Guerra e Battaglia\\\",\\n    bonus: \\\"Vantaggio su attacchi per 1 round\\\",\\n    cd: 12\\n  },\\n  \\\"Santa Coletta\\\": {\\n    dominio: \\\"Fortuna e Denaro\\\",\\n    bonus: \\\"Ritira 1 dado per la prossima ora\\\",\\n    cd: 10\\n  },\\n  \\\"San Pancrazio\\\": {\\n    dominio: \\\"Guarigione\\\",\\n    bonus: \\\"Cura 1d6 PF\\\",\\n    cd: 11\\n  },\\n  \\\"Sant'Arnaldo\\\": {\\n    dominio: \\\"Ladri e Furfanti\\\",\\n    bonus: \\\"Vantaggio su Furtivit√† per 10 minuti\\\",\\n    cd: 10\\n  },\\n  \\\"Santa Genoveffa\\\": {\\n    dominio: \\\"Protezione\\\",\\n    bonus: \\\"+2 CA per 1 minuto\\\",\\n    cd: 12\\n  },\\n  \\\"San Mamerto\\\": {\\n    dominio: \\\"Vino e Osterie\\\",\\n    bonus: \\\"Immune a veleni per 1 ora\\\",\\n    cd: 9\\n  }\\n};\\n\\n// Dialog per scegliere il santo\\nconst buttons = {};\\nfor (let [nome, info] of Object.entries(santi)) {\\n  buttons[nome] = {\\n    label: `${nome} (${info.dominio})`,\\n    callback: async () => {\\n      // Tiro Religione\\n      const roll = await actor.rollSkill(\\\"rel\\\", {\\n        flavor: `Invocazione a ${nome}`,\\n        targetValue: info.cd\\n      });\\n      \\n      const success = roll.total >= info.cd;\\n      \\n      // Messaggio risultato\\n      ChatMessage.create({\\n        speaker: ChatMessage.getSpeaker({actor}),\\n        content: `<h3>üôè Invocazione a ${nome}</h3>\\n        <p><strong>Santo del ${info.dominio}</strong></p>\\n        <p>Tiro Religione: [[${roll.total}]] vs CD ${info.cd}</p>\\n        <hr>\\n        ${success ? \\n          `<p style=\\\"color:green;\\\">‚ú® <strong>Il Santo risponde!</strong></p>\\n          <p><em>${info.bonus}</em></p>` :\\n          `<p style=\\\"color:red;\\\">üòî Il Santo ignora la tua preghiera...</p>\\n          <p><em>Riprova dopo il prossimo riposo.</em></p>`\\n        }`\\n      });\\n      \\n      // Applica effetti se successo\\n      if (success) {\\n        if (nome === \\\"San Pancrazio\\\") {\\n          const healing = await new Roll(\\\"1d6\\\").evaluate({async: true});\\n          await actor.applyDamage(-healing.total);\\n          ui.notifications.info(`Curati ${healing.total} PF!`);\\n        } else if (nome === \\\"Santa Genoveffa\\\") {\\n          const effect = {\\n            label: \\\"Benedizione di Santa Genoveffa\\\",\\n            icon: \\\"icons/magic/defensive/shield-barrier-glowing.webp\\\",\\n            duration: {rounds: 10},\\n            changes: [{\\n              key: \\\"system.attributes.ac.bonus\\\",\\n              mode: 2,\\n              value: 2\\n            }]\\n          };\\n          await actor.createEmbeddedDocuments(\\\"ActiveEffect\\\", [effect]);\\n        }\\n        // Segna uso giornaliero\\n        await actor.setFlag(\\\"world\\\", `santo_${nome}`, Date.now());\\n      }\\n    }\\n  };\\n}\\n\\nnew Dialog({\\n  title: \\\"Invoca un Santo Protettore\\\",\\n  content: `\\n    <h2>üôè Scegli il Santo da Invocare</h2>\\n    <p><em>Puoi invocare ogni santo una volta per riposo lungo.</em></p>\\n  `,\\n  buttons: buttons,\\n  default: Object.keys(buttons)[0]\\n}).render(true);","ownership":{"default":0},"flags":{"core":{"sourceId":"Macro.santi001"}},"_stats":{"systemId":"dnd5e","systemVersion":"3.3.1","coreVersion":"13.347"}}
{"_id":"scadente001","name":"üó°Ô∏è Oggetto Scadente - Rottura","type":"script","author":"Brancalonia","img":"icons/weapons/swords/sword-rusted-broken.webp","scope":"global","command":"// OGGETTO SCADENTE - Sistema Rottura\n// Macro da usare quando ottieni 1 naturale con un'arma scadente\n\nconst actor = game.user.character || canvas.tokens.controlled[0]?.actor;\nif (!actor) {\n  ui.notifications.warn(\"Seleziona un personaggio!\");\n  return;\n}\n\n// Dialog per scegliere l'oggetto\nconst weapons = actor.items.filter(i => \n  i.type === \"weapon\" && \n  (i.name.toLowerCase().includes(\"scadent\") || i.name.toLowerCase().includes(\"arrugginit\"))\n);\n\nif (weapons.length === 0) {\n  ui.notifications.info(\"Nessun oggetto scadente equipaggiato!\");\n  return;\n}\n\nconst buttons = {};\nweapons.forEach(w => {\n  buttons[w.id] = {\n    label: w.name,\n    callback: async () => {\n      // Tira per la rottura\n      const roll = await new Roll(\"1d6\").evaluate({async: true});\n      \n      let result = \"\";\n      let broken = false;\n      \n      switch(roll.total) {\n        case 1:\n          result = \"üí• L'arma ESPLODE! Subisci 1d4 danni!\";\n          const dmg = await new Roll(\"1d4\").evaluate({async: true});\n          await actor.applyDamage(dmg.total);\n          broken = true;\n          break;\n        case 2:\n        case 3:\n          result = \"üíî L'arma si ROMPE definitivamente!\";\n          broken = true;\n          break;\n        case 4:\n        case 5:\n          result = \"üî® L'arma si danneggia (-1 colpire/danni fino a riparazione)\";\n          await w.update({\"system.attackBonus\": \"-1\", \"system.damage.parts\": [[w.system.damage.parts[0][0] + \" - 1\", w.system.damage.parts[0][1]]]});\n          break;\n        case 6:\n          result = \"‚öîÔ∏è Ultimo colpo eroico! Danno massimo poi si rompe!\";\n          broken = true;\n          ui.notifications.info(\"Applica danno massimo per questo attacco!\");\n          break;\n      }\n      \n      // Messaggio in chat\n      ChatMessage.create({\n        speaker: ChatMessage.getSpeaker({actor}),\n        content: `<h3>üó°Ô∏è Rottura Oggetto Scadente!</h3>\n        <p><strong>${w.name}</strong></p>\n        <p>Tiro rottura: [[${roll.total}]]</p>\n        <p><strong>${result}</strong></p>\n        ${broken ? `<p style=\"color:red;\">‚ö†Ô∏è Rimuovi l'oggetto dall'inventario!</p>` : \"\"}`\n      });\n      \n      // Rimuovi se rotto\n      if (broken && roll.total !== 6) {\n        await w.delete();\n      }\n    }\n  };\n});\n\nnew Dialog({\n  title: \"Quale oggetto si √® rotto?\",\n  buttons: buttons,\n  default: Object.keys(buttons)[0]\n}).render(true);","ownership":{"default":0},"flags":{"core":{"sourceId":"Macro.scadente001"}},"_stats":{"systemId":"dnd5e","systemVersion":"3.3.1","coreVersion":"13.347"}}
{"_id":"infamia001","name":"üòà Tracker Infamia","type":"script","author":"Brancalonia","img":"icons/skills/social/intimidation-impressing.webp","scope":"global","command":"// TRACKER INFAMIA/NOTORIET√Ä\n// Gestisce il livello di infamia del personaggio (0-20)\n\nconst actor = game.user.character || canvas.tokens.controlled[0]?.actor;\nif (!actor) {\n  ui.notifications.warn(\"Seleziona un personaggio!\");\n  return;\n}\n\n// Recupera infamia attuale\nlet infamia = actor.getFlag(\"world\", \"infamia\") || 0;\n\n// Funzione per ottenere il titolo\nfunction getTitolo(level) {\n  if (level <= 3) return \"Nessuno\";\n  if (level <= 7) return \"Canaglia Locale\";\n  if (level <= 11) return \"Farabutto Noto\";\n  if (level <= 15) return \"Brigante Famoso\";\n  if (level <= 19) return \"Leggenda Vivente\";\n  return \"Re dei Briganti\";\n}\n\n// Funzione per ottenere i benefici\nfunction getBenefici(level) {\n  if (level <= 3) return \"Sconosciuto, ignorato\";\n  if (level <= 7) return \"-1 ducato sui prezzi nelle taverne\";\n  if (level <= 11) return \"Vantaggio Intimidire, svantaggio con autorit√†\";\n  if (level <= 15) return \"Seguaci minori, bersaglio di cacciatori di taglie\";\n  if (level <= 19) return \"Canzoni su di te, vantaggio con criminali\";\n  return \"Controlli una regione, propria banda, nemico pubblico n.1\";\n}\n\n// Dialog per modificare\nnew Dialog({\n  title: \"Tracker Infamia/Notoriet√†\",\n  content: `\n    <h2>${actor.name}</h2>\n    <p><strong>Infamia Attuale:</strong> ${infamia}/20</p>\n    <p><strong>Titolo:</strong> ${getTitolo(infamia)}</p>\n    <p><strong>Effetti:</strong> ${getBenefici(infamia)}</p>\n    <hr>\n    <p>Modifica Infamia:</p>\n    <div style=\"display: flex; gap: 10px; justify-content: center;\">\n      <input type=\"number\" id=\"infamia-change\" value=\"1\" min=\"-20\" max=\"20\" style=\"width: 60px;\"/>\n    </div>\n  `,\n  buttons: {\n    add: {\n      icon: \"<i class='fas fa-plus'></i>\",\n      label: \"Aggiungi\",\n      callback: async (html) => {\n        const change = parseInt(html.find(\"#infamia-change\").val());\n        infamia = Math.max(0, Math.min(20, infamia + change));\n        await actor.setFlag(\"world\", \"infamia\", infamia);\n        \n        ChatMessage.create({\n          speaker: ChatMessage.getSpeaker({actor}),\n          content: `<h3>üòà Infamia ${change > 0 ? \"Aumentata\" : \"Diminuita\"}!</h3>\n          <p><strong>${actor.name}</strong></p>\n          <p>Infamia: ${infamia - change} ‚Üí <strong>${infamia}</strong></p>\n          <p>Nuovo Titolo: <strong>${getTitolo(infamia)}</strong></p>\n          <p><em>${getBenefici(infamia)}</em></p>`\n        });\n      }\n    },\n    subtract: {\n      icon: \"<i class='fas fa-minus'></i>\",\n      label: \"Sottrai\",\n      callback: async (html) => {\n        const change = parseInt(html.find(\"#infamia-change\").val());\n        infamia = Math.max(0, Math.min(20, infamia - change));\n        await actor.setFlag(\"world\", \"infamia\", infamia);\n        \n        ChatMessage.create({\n          speaker: ChatMessage.getSpeaker({actor}),\n          content: `<h3>üòà Infamia Diminuita!</h3>\n          <p><strong>${actor.name}</strong></p>\n          <p>Infamia: ${infamia + change} ‚Üí <strong>${infamia}</strong></p>\n          <p>Nuovo Titolo: <strong>${getTitolo(infamia)}</strong></p>\n          <p><em>${getBenefici(infamia)}</em></p>`\n        });\n      }\n    },\n    close: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: \"Chiudi\"\n    }\n  },\n  default: \"close\"\n}).render(true);","ownership":{"default":0},"flags":{"core":{"sourceId":"Macro.infamia001"}},"_stats":{"systemId":"dnd5e","systemVersion":"3.3.1","coreVersion":"13.347"}}