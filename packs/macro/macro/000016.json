{
  "_id": "brancalonia016",
  "name": "üõèÔ∏è Sistema Riposo",
  "type": "script",
  "author": "brancalonia",
  "img": "icons/environment/settlement/inn-bed.webp",
  "scope": "global",
  "command": "// Macro per Sistema Riposo di Brancalonia\nif (!game.modules.get('brancalonia-bigat')?.active) {\n  ui.notifications.error('Modulo Brancalonia non attivo!');\n  return;\n}\n\nconst restSystem = game.brancalonia?.RestSystem;\nif (!restSystem) {\n  ui.notifications.error('Sistema Riposo non disponibile!');\n  return;\n}\n\nconst tokens = canvas.tokens.controlled;\nif (tokens.length === 0) {\n  ui.notifications.warn('Seleziona almeno un token!');\n  return;\n}\n\nnew Dialog({\n  title: 'üõèÔ∏è Sistema Riposo',\n  content: `\n    <div style=\"padding: 10px;\">\n      <h3>Riposo della Compagnia</h3>\n      <p><strong>Personaggi selezionati:</strong> ${tokens.length}</p>\n      <hr>\n      <div style=\"margin: 15px 0;\">\n        <label for=\"rest-type\" style=\"font-weight: bold;\">Tipo di Riposo:</label>\n        <select id=\"rest-type\" style=\"width: 100%; margin-top: 5px;\">\n          <option value=\"short\">Riposo Breve (1 ora)</option>\n          <option value=\"long\">Riposo Lungo (8 ore)</option>\n          <option value=\"haven\">Riposo nel Haven (6 ore)</option>\n        </select>\n      </div>\n      <div style=\"margin: 15px 0;\">\n        <label for=\"rest-location\" style=\"font-weight: bold;\">Luogo:</label>\n        <select id=\"rest-location\" style=\"width: 100%; margin-top: 5px;\">\n          <option value=\"wilderness\">All'aperto</option>\n          <option value=\"camp\">Accampamento</option>\n          <option value=\"inn\">Locanda</option>\n          <option value=\"haven\">Haven della Compagnia</option>\n          <option value=\"noble\">Alloggio Nobile</option>\n        </select>\n      </div>\n      <div style=\"margin: 15px 0;\">\n        <label for=\"rest-quality\" style=\"font-weight: bold;\">Qualit√†:</label>\n        <select id=\"rest-quality\" style=\"width: 100%; margin-top: 5px;\">\n          <option value=\"poor\">Scarsa (nessun bonus)</option>\n          <option value=\"common\" selected>Comune (recupero normale)</option>\n          <option value=\"comfortable\">Confortevole (+1 dado vita)</option>\n          <option value=\"luxury\">Lussuosa (+2 dadi vita)</option>\n        </select>\n      </div>\n      <div style=\"margin: 15px 0;\">\n        <input type=\"checkbox\" id=\"rest-guard\" checked/>\n        <label for=\"rest-guard\">Turni di guardia organizzati</label>\n      </div>\n      <hr>\n      <p style=\"text-align: center; font-style: italic;\">\"Un buon riposo vale quanto una buona armatura\"</p>\n    </div>\n  `,\n  buttons: {\n    rest: {\n      icon: '<i class=\"fas fa-bed\"></i>',\n      label: 'Inizia Riposo',\n      callback: async (html) => {\n        const type = html.find('#rest-type').val();\n        const location = html.find('#rest-location').val();\n        const quality = html.find('#rest-quality').val();\n        const hasGuard = html.find('#rest-guard').prop('checked');\n        \n        // Calcola modificatori\n        let healingBonus = 0;\n        if (quality === 'comfortable') healingBonus = 1;\n        if (quality === 'luxury') healingBonus = 2;\n        if (location === 'haven') healingBonus += 1;\n        \n        // Possibilit√† di interruzione\n        let interruptChance = 0;\n        if (location === 'wilderness' && !hasGuard) interruptChance = 0.4;\n        else if (location === 'wilderness' && hasGuard) interruptChance = 0.2;\n        else if (location === 'camp') interruptChance = 0.15;\n        else if (location === 'inn') interruptChance = 0.05;\n        \n        // Controlla interruzione\n        if (Math.random() < interruptChance) {\n          ChatMessage.create({\n            content: `<div class=\"brancalonia-event\">\n              <h3>‚ö†Ô∏è Riposo Interrotto!</h3>\n              <p>Il vostro riposo √® stato interrotto da un evento inaspettato!</p>\n              <p><em>Tirate su tabella eventi casuali per determinare cosa succede...</em></p>\n            </div>`\n          });\n          return;\n        }\n        \n        // Applica riposo\n        for (let token of tokens) {\n          const actor = token.actor;\n          if (type === 'short') {\n            await actor.shortRest({dialog: false});\n          } else if (type === 'long') {\n            await actor.longRest({dialog: false});\n          } else if (type === 'haven') {\n            // Riposo speciale Haven\n            await actor.longRest({dialog: false});\n            // Bonus Haven: recupera tutti i punti ferita\n            await actor.update({'system.attributes.hp.value': actor.system.attributes.hp.max});\n          }\n          \n          // Applica bonus qualit√†\n          if (healingBonus > 0 && type !== 'short') {\n            const currentHp = actor.system.attributes.hp.value;\n            const maxHp = actor.system.attributes.hp.max;\n            const healing = Math.min(healingBonus * 4, maxHp - currentHp);\n            await actor.update({'system.attributes.hp.value': currentHp + healing});\n          }\n        }\n        \n        // Messaggio risultato\n        const restType = {short: 'Breve', long: 'Lungo', haven: 'nel Haven'}[type];\n        const locationName = {\n          wilderness: \"all'aperto\",\n          camp: \"nell'accampamento\",\n          inn: \"nella locanda\",\n          haven: \"nel Haven\",\n          noble: \"in alloggi nobili\"\n        }[location];\n        \n        ChatMessage.create({\n          content: `<div class=\"brancalonia-rest\">\n            <h3>üõèÔ∏è Riposo ${restType} Completato</h3>\n            <p>La compagnia ha riposato ${locationName}.</p>\n            <p><strong>Qualit√†:</strong> ${quality}</p>\n            ${healingBonus > 0 ? `<p><strong>Bonus Guarigione:</strong> +${healingBonus} dadi vita equivalenti</p>` : ''}\n            <p><em>\"Pronti per nuove avventure!\"</em></p>\n          </div>`\n        });\n      }\n    },\n    watch: {\n      icon: '<i class=\"fas fa-eye\"></i>',\n      label: 'Organizza Turni',\n      callback: () => {\n        restSystem.organizeWatchShifts(tokens.map(t => t.actor));\n      }\n    },\n    interrupt: {\n      icon: '<i class=\"fas fa-exclamation-triangle\"></i>',\n      label: 'Evento Casuale',\n      callback: () => {\n        restSystem.rollRestEvent();\n      }\n    },\n    cancel: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: 'Chiudi'\n    }\n  },\n  default: 'rest'\n}).render(true);",
  "folder": null,
  "sort": 100015,
  "ownership": {
    "default": 0
  },
  "flags": {
    "brancalonia-bigat": {
      "category": "utility"
    }
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.3.1",
    "coreVersion": "13.0.0",
    "createdTime": 1700000015000,
    "modifiedTime": 1700000015000,
    "lastModifiedBy": "brancalonia"
  }
}