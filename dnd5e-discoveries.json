{
  "timestamp": "2025-09-27T01:33:54.949652",
  "repository_info": {
    "name": "dnd5e",
    "description": "An implementation of the 5th Edition game system for Foundry Virtual Tabletop (http://foundryvtt.com).",
    "default_branch": "5.2.x",
    "updated_at": "2025-09-23T21:49:17Z",
    "size": 304507,
    "system.json": {
      "id": "dnd5e",
      "title": "Dungeons & Dragons Fifth Edition",
      "description": "A system for playing the fifth edition of the world's most popular role-playing game in the Foundry Virtual Tabletop environment.",
      "version": "5.1.9",
      "compatibility": {
        "minimum": "13.347",
        "verified": "13"
      },
      "url": "https://github.com/foundryvtt/dnd5e/",
      "manifest": "https://raw.githubusercontent.com/foundryvtt/dnd5e/master/system.json",
      "download": "https://github.com/foundryvtt/dnd5e/releases/download/release-5.1.9/dnd5e-release-5.1.9.zip",
      "authors": [
        {
          "name": "Atropos",
          "url": "https://foundryvtt.com",
          "flags": {}
        }
      ],
      "esmodules": [
        "dnd5e.mjs"
      ],
      "styles": [
        "dnd5e.css"
      ],
      "documentTypes": {
        "ActiveEffect": {
          "enchantment": {}
        },
        "Actor": {
          "character": {
            "htmlFields": [
              "details.biography.value",
              "details.biography.public",
              "bastion.description"
            ]
          },
          "encounter": {
            "htmlFields": [
              "description.full",
              "description.summary"
            ]
          },
          "group": {
            "htmlFields": [
              "description.full",
              "description.summary"
            ]
          },
          "npc": {
            "htmlFields": [
              "details.biography.value",
              "details.biography.public"
            ]
          },
          "vehicle": {
            "htmlFields": [
              "details.biography.value",
              "details.biography.public"
            ]
          }
        },
        "ChatMessage": {
          "request": {},
          "rest": {},
          "turn": {}
        },
        "Item": {
          "weapon": {
            "filePathFields": {
              "activities.*.img": [
                "IMAGE"
              ]
            },
            "htmlFields": [
              "description.value",
              "description.chat",
              "unidentified.description"
            ]
          },
          "equipment": {
            "filePathFields": {
              "activities.*.img": [
                "IMAGE"
              ]
            },
            "htmlFields": [
              "description.value",
              "description.chat",
              "unidentified.description"
            ]
          },
          "consumable": {
            "filePathFields": {
              "activities.*.img": [
                "IMAGE"
              ]
            },
            "htmlFields": [
              "description.value",
              "description.chat",
              "unidentified.description"
            ]
          },
          "tool": {
            "filePathFields": {
              "activities.*.img": [
                "IMAGE"
              ]
            },
            "htmlFields": [
              "description.value",
              "description.chat",
              "unidentified.description"
            ]
          },
          "loot": {
            "htmlFields": [
              "description.value",
              "description.chat",
              "unidentified.description"
            ]
          },
          "race": {
            "filePathFields": {
              "advancement.*.icon": [
                "IMAGE"
              ]
            },
            "htmlFields": [
              "description.value",
              "description.chat"
            ]
          },
          "background": {
            "filePathFields": {
              "advancement.*.icon": [
                "IMAGE"
              ]
            },
            "htmlFields": [
              "description.value",
              "description.chat"
            ]
          },
          "class": {
            "filePathFields": {
              "advancement.*.icon": [
                "IMAGE"
              ]
            },
            "htmlFields": [
              "description.value",
              "description.chat"
            ]
          },
          "subclass": {
            "filePathFields": {
              "advancement.*.icon": [
                "IMAGE"
              ]
            },
            "htmlFields": [
              "description.value",
              "description.chat"
            ]
          },
          "spell": {
            "filePathFields": {
              "activities.*.img": [
                "IMAGE"
              ]
            },
            "htmlFields": [
              "description.value",
              "description.chat"
            ]
          },
          "feat": {
            "filePathFields": {
              "activities.*.img": [
                "IMAGE"
              ],
              "advancement.*.icon": [
                "IMAGE"
              ]
            },
            "htmlFields": [
              "description.value",
              "description.chat"
            ]
          },
          "container": {
            "htmlFields": [
              "description.value",
              "description.chat",
              "unidentified.description"
            ]
          },
          "backpack": {
            "htmlFields": [
              "description.value",
              "description.chat",
              "unidentified.description"
            ]
          },
          "facility": {
            "filePathFields": {
              "activities.*.img": [
                "IMAGE"
              ]
            },
            "htmlFields": [
              "description.value",
              "description.chat"
            ]
          }
        },
        "JournalEntryPage": {
          "class": {
            "htmlFields": [
              "details.value",
              "details.additionalHitPoints",
              "description.additionalTraits",
              "description.additionalEquipment",
              "description.subclass"
            ]
          },
          "map": {},
          "rule": {
            "htmlFields": [
              "tooltip"
            ]
          },
          "spells": {},
          "subclass": {
            "htmlFields": [
              "details.value"
            ]
          }
        },
        "RegionBehavior": {
          "dnd5e.difficultTerrain": {},
          "dnd5e.rotateArea": {}
        }
      },
      "packs": [
        {
          "name": "heroes",
          "label": "Starter Heroes",
          "system": "dnd5e",
          "path": "packs/heroes",
          "type": "Actor",
          "private": false,
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.1",
              "types": [
                "character"
              ]
            }
          }
        },
        {
          "name": "monsters",
          "label": "Monsters (SRD)",
          "system": "dnd5e",
          "path": "packs/monsters",
          "type": "Actor",
          "private": false,
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.1",
              "types": [
                "npc"
              ]
            }
          }
        },
        {
          "name": "items",
          "label": "Items (SRD)",
          "system": "dnd5e",
          "path": "packs/items",
          "type": "Item",
          "private": false,
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.1",
              "types": [
                "weapon",
                "equipment",
                "consumable",
                "tool",
                "loot",
                "feat",
                "container"
              ]
            }
          }
        },
        {
          "name": "tradegoods",
          "label": "Trade Goods (SRD)",
          "system": "dnd5e",
          "path": "packs/tradegoods",
          "type": "Item",
          "private": false,
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.1",
              "types": [
                "loot"
              ]
            }
          }
        },
        {
          "name": "spells",
          "label": "Spells (SRD)",
          "system": "dnd5e",
          "path": "packs/spells",
          "type": "Item",
          "private": false,
          "flags": {
            "dnd5e": {
              "sorting": "m",
              "sourceBook": "SRD 5.1",
              "types": [
                "spell"
              ]
            }
          }
        },
        {
          "name": "backgrounds",
          "label": "Backgrounds (SRD)",
          "system": "dnd5e",
          "path": "packs/backgrounds",
          "type": "Item",
          "private": false,
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.1",
              "types": [
                "background",
                "feat"
              ]
            }
          }
        },
        {
          "name": "classes",
          "label": "Classes (SRD)",
          "system": "dnd5e",
          "path": "packs/classes",
          "type": "Item",
          "private": false,
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.1",
              "types": [
                "class"
              ]
            }
          }
        },
        {
          "name": "subclasses",
          "label": "Subclasses (SRD)",
          "system": "dnd5e",
          "path": "packs/subclasses",
          "type": "Item",
          "private": false,
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.1",
              "types": [
                "subclass"
              ]
            }
          }
        },
        {
          "name": "classfeatures",
          "label": "Class & Subclass Features (SRD)",
          "system": "dnd5e",
          "path": "packs/classfeatures",
          "type": "Item",
          "private": false,
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.1",
              "types": [
                "feat",
                "weapon"
              ]
            }
          }
        },
        {
          "name": "races",
          "label": "Races (SRD)",
          "system": "dnd5e",
          "path": "packs/races",
          "type": "Item",
          "private": false,
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.1",
              "types": [
                "race",
                "feat"
              ]
            }
          }
        },
        {
          "name": "monsterfeatures",
          "label": "Monster Features (SRD)",
          "system": "dnd5e",
          "path": "packs/monsterfeatures",
          "type": "Item",
          "private": false,
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.1",
              "types": [
                "feat",
                "weapon"
              ]
            }
          }
        },
        {
          "name": "rules",
          "label": "Rules (SRD)",
          "system": "dnd5e",
          "path": "packs/rules",
          "type": "JournalEntry",
          "private": false,
          "flags": {
            "dnd5e": {
              "display": "table-of-contents"
            }
          }
        },
        {
          "name": "tables",
          "label": "Tables (SRD)",
          "system": "dnd5e",
          "path": "packs/tables",
          "type": "RollTable",
          "private": false,
          "flags": {}
        },
        {
          "name": "content24",
          "label": "Rules",
          "path": "packs/content24",
          "type": "JournalEntry",
          "ownership": {
            "PLAYER": "OBSERVER",
            "ASSISTANT": "OWNER"
          },
          "system": "dnd5e",
          "flags": {
            "display": "table-of-contents"
          }
        },
        {
          "name": "classes24",
          "label": "Character Classes",
          "path": "packs/classes24",
          "type": "Item",
          "ownership": {
            "PLAYER": "OBSERVER",
            "ASSISTANT": "OWNER"
          },
          "system": "dnd5e",
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.2",
              "types": [
                "class",
                "subclass",
                "feat"
              ]
            }
          }
        },
        {
          "name": "origins24",
          "label": "Character Origins",
          "path": "packs/origins24",
          "type": "Item",
          "ownership": {
            "PLAYER": "OBSERVER",
            "ASSISTANT": "OWNER"
          },
          "system": "dnd5e",
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.2",
              "types": [
                "race",
                "background",
                "feat"
              ]
            }
          }
        },
        {
          "name": "feats24",
          "label": "Feats",
          "path": "packs/feats24",
          "type": "Item",
          "ownership": {
            "PLAYER": "OBSERVER",
            "ASSISTANT": "OWNER"
          },
          "system": "dnd5e",
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.2",
              "types": [
                "feat"
              ]
            }
          }
        },
        {
          "name": "spells24",
          "label": "Spells",
          "path": "packs/spells24",
          "type": "Item",
          "ownership": {
            "PLAYER": "OBSERVER",
            "ASSISTANT": "OWNER"
          },
          "system": "dnd5e",
          "flags": {
            "dnd5e": {
              "sorting": "m",
              "sourceBook": "SRD 5.2",
              "types": [
                "spell"
              ]
            }
          }
        },
        {
          "name": "equipment24",
          "label": "Equipment",
          "path": "packs/equipment24",
          "type": "Item",
          "ownership": {
            "PLAYER": "OBSERVER",
            "ASSISTANT": "OWNER"
          },
          "system": "dnd5e",
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.2",
              "types": [
                "weapon",
                "equipment",
                "consumable",
                "tool",
                "loot",
                "feat",
                "container"
              ]
            }
          }
        },
        {
          "name": "tables24",
          "label": "Roll Tables",
          "path": "packs/tables24",
          "type": "RollTable",
          "ownership": {
            "PLAYER": "OBSERVER",
            "ASSISTANT": "OWNER"
          },
          "system": "dnd5e"
        },
        {
          "name": "actors24",
          "label": "Actors",
          "path": "packs/actors24",
          "type": "Actor",
          "ownership": {
            "PLAYER": "OBSERVER",
            "ASSISTANT": "OWNER"
          },
          "system": "dnd5e",
          "flags": {
            "dnd5e": {
              "sorting": "m",
              "sourceBook": "SRD 5.2"
            }
          }
        },
        {
          "name": "monsterfeatures24",
          "label": "Monster Features",
          "path": "packs/monsterfeatures24",
          "type": "Item",
          "ownership": {
            "ASSISTANT": "OWNER"
          },
          "system": "dnd5e",
          "flags": {
            "dnd5e": {
              "sourceBook": "SRD 5.2",
              "types": [
                "feat",
                "weapon"
              ]
            }
          }
        }
      ],
      "packFolders": [
        {
          "name": "D&D Modern Content",
          "color": "#cd2c1e",
          "sorting": "m",
          "packs": [
            "content24",
            "classes24",
            "origins24",
            "feats24",
            "spells24",
            "tables24",
            "actors24",
            "equipment24",
            "monsterfeatures24"
          ]
        },
        {
          "name": "D&D Legacy Content",
          "sorting": "m",
          "color": "#cd2c1e",
          "packs": [
            "rules",
            "tables",
            "heroes"
          ],
          "folders": [
            {
              "name": "Character Features",
              "sorting": "m",
              "color": "#b72c1f",
              "packs": [
                "classes",
                "subclasses",
                "classfeatures",
                "backgrounds",
                "races"
              ]
            },
            {
              "name": "Items & Spells",
              "sorting": "m",
              "color": "#941919 ",
              "packs": [
                "items",
                "spells",
                "tradegoods"
              ]
            },
            {
              "name": "Monsters",
              "sorting": "m",
              "color": "#7d160c",
              "packs": [
                "monsters",
                "monsterfeatures"
              ]
            }
          ]
        }
      ],
      "languages": [
        {
          "lang": "en",
          "name": "English",
          "path": "lang/en.json",
          "flags": {}
        }
      ],
      "media": [
        {
          "type": "cover",
          "loop": false,
          "flags": {}
        },
        {
          "type": "setup",
          "url": "systems/dnd5e/ui/official/dnd5e-repo.jpg",
          "thumbnail": "systems/dnd5e/ui/official/dnd5e-thumbnail.jpg"
        }
      ],
      "socket": true,
      "grid": {
        "distance": 5,
        "units": "ft"
      },
      "primaryTokenAttribute": "attributes.hp",
      "background": "systems/dnd5e/ui/official/dnd5e-background.webp",
      "flags": {
        "compendiumArtMappings": {
          "dnd5e": {
            "mapping": "systems/dnd5e/json/fa-token-mapping.json",
            "credit": "<em>Token artwork by <a href=\"https://www.forgotten-adventures.net/\" target=\"_blank\" rel=\"noopener\">Forgotten Adventures</a>.</em>"
          }
        },
        "dnd5e": {
          "sourceBooks": {
            "SRD 5.1": "SOURCE.BOOK.SRD51",
            "SRD 5.2": "SOURCE.BOOK.SRD52"
          }
        },
        "needsMigrationVersion": "5.1.0",
        "compatibleMigrationVersion": "0.8",
        "hotReload": {
          "extensions": [
            "css",
            "hbs",
            "json"
          ],
          "paths": [
            "dnd5e.css",
            "templates",
            "lang"
          ]
        }
      }
    }
  },
  "advancement_structures": {
    "template_module/data/advancement/_module.mjs": {
      "raw_content": "export {default as BaseAdvancement} from \"./base-advancement.mjs\";\nexport {default as SpellConfigurationData} from \"./spell-config.mjs\";\n\nexport * from \"./ability-score-improvement.mjs\";\nexport * from \"./item-choice.mjs\";\nexport {default as ItemGrantConfigurationData} from \"./item-grant.mjs\";\nexport * as scaleValue from \"./scale-value.mjs\";\nexport * from \"./size.mjs\";\nexport * from \"./trait.mjs\";\nexport * from \"./subclass.mjs\";\n"
    },
    "template_module/documents/_module.mjs": {
      "raw_content": "// Document Classes\nexport {default as ActiveEffect5e} from \"./active-effect.mjs\";\nexport {default as Actor5e} from \"./actor/actor.mjs\";\nexport * as activity from \"./activity/_module.mjs\";\nexport * as advancement from \"./advancement/_module.mjs\";\nexport {default as Adventure5e} from \"./adventure.mjs\";\nexport {default as ChatMessage5e} from \"./chat-message.mjs\";\nexport {default as Combat5e} from \"./combat.mjs\";\nexport {default as Combatant5e} from \"./combatant.mjs\";\nexport {default as CombatantGroup5e} from \"./combatant-group.mjs\";\nexport {default as Item5e} from \"./item.mjs\";\nexport {default as JournalEntryPage5e} from \"./journal-entry-page.mjs\";\nexport {default as TokenDocument5e} from \"./token.mjs\";\nexport {default as User5e} from \"./user.mjs\";\n\n// Helper Methods\nexport {default as Bastion} from \"./actor/bastion.mjs\";\nexport {default as HitDice} from \"./actor/hit-dice.mjs\";\nexport {default as Proficiency} from \"./actor/proficiency.mjs\";\nexport {default as SelectChoices} from \"./actor/select-choices.mjs\";\nexport * as Trait from \"./actor/trait.mjs\";\nexport * as mixins from \"./mixins/_module.mjs\";\nexport * as macro from \"./macro.mjs\";\nexport {default as Scaling} from \"./scaling.mjs\";\n"
    },
    "module_module/data/advancement/item-grant.mjs": {
      "raw_content": "import SpellConfigurationData from \"./spell-config.mjs\";\n\nconst { ArrayField, BooleanField, EmbeddedDataField, SchemaField, StringField } = foundry.data.fields;\n\n/**\n * Configuration data for an individual item provided by item grant.\n *\n * @typedef {object} ItemGrantItemConfiguration\n * @property {string} uuid       UUID of the item to grant.\n * @property {boolean} optional  Is this item optional? Has no effect if whole advancement is optional.\n */\n\n/**\n * Configuration data for the Item Grant advancement.\n *\n * @property {ItemGrantItemConfiguration[]} items  Data for the items to be granted.\n * @property {boolean} optional                    Should user be able to de-select any individual option?\n * @property {SpellConfigurationData} spell        Data used to modify any granted spells.\n */\nexport default class ItemGrantConfigurationData extends foundry.abstract.DataModel {\n\n  /* -------------------------------------------- */\n  /*  Model Configuration                         */\n  /* -------------------------------------------- */\n\n  /** @override */\n  static LOCALIZATION_PREFIXES = [\"DND5E.ADVANCEMENT.ItemGrant\", \"DND5E.ADVANCEMENT.SPELLCONFIG\"];\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static defineSchema() {\n    return {\n      items: new ArrayField(new SchemaField({\n        uuid: new StringField(),\n        optional: new BooleanField()\n      }), { required: true }),\n      optional: new BooleanField({ required: true }),\n      spell: new EmbeddedDataField(SpellConfigurationData, { required: true, nullable: true, initial: null })\n    };\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Migrations                             */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static migrateData(source) {\n    if ( \"items\" in source ) {\n      source.items = source.items.map(i => foundry.utils.getType(i) === \"string\" ? { uuid: i } : i);\n    }\n    if ( source.spell ) SpellConfigurationData.migrateData(source.spell);\n    return source;\n  }\n}\n"
    },
    "module_module/data/advancement/scale-value.mjs": {
      "raw_content": "import { formatLength } from \"../../utils.mjs\";\nimport IdentifierField from \"../fields/identifier-field.mjs\";\nimport MappingField from \"../fields/mapping-field.mjs\";\nimport { createCheckboxInput } from \"../../applications/fields.mjs\";\n\nconst { BooleanField, NumberField, SchemaField, SetField, StringField } = foundry.data.fields;\n\n/**\n * Data model for the Scale Value advancement type.\n *\n * @property {string} identifier        Identifier used to select this scale value in roll formulas.\n * @property {string} type              Type of data represented by this scale value.\n * @property {object} [distance]\n * @property {string} [distance.units]  If distance type is selected, the units each value uses.\n * @property {Object<string, *>} scale  Scale values for each level. Value format is determined by type.\n */\nexport class ScaleValueConfigurationData extends foundry.abstract.DataModel {\n\n  /* -------------------------------------------- */\n  /*  Model Configuration                         */\n  /* -------------------------------------------- */\n\n  /** @override */\n  static LOCALIZATION_PREFIXES = [\"DND5E.ADVANCEMENT.ScaleValue\"];\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static defineSchema() {\n    return {\n      identifier: new IdentifierField({ required: true }),\n      type: new StringField({ required: true, initial: \"string\", choices: TYPES }),\n      distance: new SchemaField({ units: new StringField({ required: true }) }),\n      scale: new MappingField(new ScaleValueEntryField(), { required: true })\n    };\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Migrations                             */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static migrateData(source) {\n    super.migrateData(source);\n    if ( source.type === \"numeric\" ) source.type = \"number\";\n    Object.values(source.scale ?? {}).forEach(v => TYPES[source.type].migrateData(v));\n  }\n}\n\n\n/**\n * Data field that automatically selects the appropriate ScaleValueType based on the selected type.\n */\nexport class ScaleValueEntryField extends foundry.data.fields.ObjectField {\n  /** @override */\n  _cleanType(value, options) {\n    if ( !(typeof value === \"object\") ) value = {};\n\n    // Use a defined DataModel\n    const cls = TYPES[options.source?.type];\n    if ( cls ) return cls.cleanData(value, options);\n\n    return value;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  initialize(value, model, options={}) {\n    const cls = TYPES[model.type];\n    if ( !value || !cls ) return value;\n    return new cls(value, {parent: model, ...options});\n  }\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  toObject(value) {\n    return value.toObject(false);\n  }\n}\n\n\n/**\n * Base scale value data type that stores generic string values.\n *\n * @property {string} value  String value.\n */\nexport class ScaleValueType extends foundry.abstract.DataModel {\n\n  /* -------------------------------------------- */\n  /*  Model Configuration                         */\n  /* -------------------------------------------- */\n\n  /** @override */\n  static LOCALIZATION_PREFIXES = [\"DND5E.ADVANCEMENT.ScaleValue.Type.String\"];\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static defineSchema() {\n    return {\n      value: new StringField({ required: true })\n    };\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Information on how a scale value of this type is configured.\n   *\n   * @typedef {object} ScaleValueTypeMetadata\n   * @property {string} label       Name of this type.\n   * @property {string} hint        Hint for this type shown in the scale value configuration.\n   * @property {string} identifier  Hint for the identifier for this type.\n   * @property {boolean} isNumeric  When using the default editing interface, should numeric inputs be used?\n   */\n\n  /**\n   * Configuration information for this scale value type.\n   * @type {ScaleValueTypeMetadata}\n   */\n  static get metadata() {\n    return {\n      label: \"DND5E.ADVANCEMENT.ScaleValue.Type.String.Label\",\n      hint: \"DND5E.ADVANCEMENT.ScaleValue.Type.String.Hint\",\n      identifier: \"DND5E.ADVANCEMENT.ScaleValue.Type.String.Identifier\",\n      isNumeric: false\n    };\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Attempt to convert another scale value type to this one.\n   * @param {ScaleValueType} original  Original type to attempt to convert.\n   * @param {object} [options]         Options which affect DataModel construction.\n   * @returns {ScaleValueType|null}\n   */\n  static convertFrom(original, options) {\n    return new this({ value: original.formula }, options);\n  }\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * This scale value prepared to be used in roll formulas.\n   * @type {string|null}\n   */\n  get formula() { return this.value; }\n\n  /* -------------------------------------------- */\n\n  /**\n   * This scale value formatted for display.\n   * @type {string|null}\n   */\n  get display() { return this.formula; }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Shortcut to the prepared value when used in roll formulas.\n   * @returns {string}\n   */\n  toString() {\n    return this.formula;\n  }\n\n  /* -------------------------------------------- */\n  /*  Helpers                                     */\n  /* -------------------------------------------- */\n\n  /**\n   * Retrieve field data with associated values.\n   * @param {number} level                Level for which this data is being prepared.\n   * @param {ScaleValueType} [value]      Value for the field at this level.\n   * @param {ScaleValueType} [lastValue]  Previous value used to generate placeholders.\n   * @returns {Record<string, object>}\n   */\n  static getFields(level, value, lastValue) {\n    const fields = {};\n    for ( const [name, field] of Object.entries(this.schema.fields) ) {\n      if ( field.options.hidden ) continue;\n      fields[name] = {\n        field,\n        input: field instanceof BooleanField ? createCheckboxInput : null,\n        name: `configuration.scale.${level}.${name}`,\n        placeholder: this.getPlaceholder(name, lastValue),\n        value: value?.[name]\n      };\n    }\n    return fields;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a placeholder value for the provided field.\n   * @param {string} name                 Name of the field.\n   * @param {ScaleValueType} [lastValue]  Scale value from a lower level.\n   * @returns {string}\n   */\n  static getPlaceholder(name, lastValue) {\n    return lastValue?.[name] ?? \"\";\n  }\n}\n\n\n/**\n * Scale value data type that stores numeric values.\n *\n * @property {number} value  Numeric value.\n */\nexport class ScaleValueTypeNumber extends ScaleValueType {\n\n  /* -------------------------------------------- */\n  /*  Model Configuration                         */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static defineSchema() {\n    return {\n      value: new NumberField({ required: true })\n    };\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static get metadata() {\n    return foundry.utils.mergeObject(super.metadata, {\n      label: \"DND5E.ADVANCEMENT.ScaleValue.Type.Number.Label\",\n      hint: \"DND5E.ADVANCEMENT.ScaleValue.Type.Number.Hint\",\n      isNumeric: true\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static convertFrom(original, options) {\n    const value = Number(original.formula);\n    if ( Number.isNaN(value) ) return null;\n    return new this({value}, options);\n  }\n}\n\n\n/**\n * Scale value data type that stores challenge ratings.\n *\n * @property {number} value  CR value.\n */\nexport class ScaleValueTypeCR extends ScaleValueTypeNumber {\n\n  /* -------------------------------------------- */\n  /*  Model Configuration                         */\n  /* -------------------------------------------- */\n\n  /** @override */\n  static LOCALIZATION_PREFIXES = [\"DND5E.ADVANCEMENT.ScaleValue.Type.CR\"];\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static defineSchema() {\n    return {\n      value: new NumberField({ required: true, min: 0 })\n      // TODO: Add CR validator\n    };\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static get metadata() {\n    return foundry.utils.mergeObject(super.metadata, {\n      label: \"DND5E.ADVANCEMENT.ScaleValue.Type.CR.Label\",\n      hint: \"DND5E.ADVANCEMENT.ScaleValue.Type.CR.Hint\"\n    });\n  }\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  get display() {\n    switch ( this.value ) {\n      case 0.125: return \"&frac18;\";\n      case 0.25: return \"&frac14;\";\n      case 0.5: return \"&frac12;\";\n      default: return super.display;\n    }\n  }\n}\n\n\n/**\n * Scale value data type that stores dice values.\n *\n * @property {number} number  Number of dice.\n * @property {number} faces   Die faces.\n */\nexport class ScaleValueTypeDice extends ScaleValueType {\n\n  /* -------------------------------------------- */\n  /*  Model Configuration                         */\n  /* -------------------------------------------- */\n\n  /** @override */\n  static LOCALIZATION_PREFIXES = [\"DND5E.ADVANCEMENT.ScaleValue.Type.Dice\"];\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static defineSchema() {\n    return {\n      number: new NumberField({ nullable: true, integer: true }),\n      faces: new NumberField({ required: true, integer: true }),\n      modifiers: new SetField(new StringField({ required: true }), { hidden: true })\n    };\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static get metadata() {\n    return foundry.utils.mergeObject(super.metadata, {\n      label: \"DND5E.ADVANCEMENT.ScaleValue.Type.Dice.Label\",\n      hint: \"DND5E.ADVANCEMENT.ScaleValue.Type.Dice.Hint\",\n      identifier: \"DND5E.ADVANCEMENT.ScaleValue.Type.Dice.Identifier\"\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * List of die faces that can be chosen.\n   * @type {number[]}\n   */\n  static FACES = [2, 3, 4, 6, 8, 10, 12, 20, 100];\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static convertFrom(original, options) {\n    const [number, faces] = (original.formula ?? \"\").split(\"d\");\n    if ( !faces || !Number.isNumeric(number) || !Number.isNumeric(faces) ) return null;\n    return new this({number: Number(number) || null, faces: Number(faces)}, options);\n  }\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  get formula() {\n    if ( !this.faces ) return null;\n    return `${this.number ?? \"\"}${this.die}`;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * The entire die, with leading \"d\" and any modifiers, e.g., \"d4\" or \"d4r1\".\n   * @type {string}\n   */\n  get die() {\n    if ( !this.faces ) return \"\";\n    return `d${this.faces}${this.mods}`;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * The die modifiers.\n   * @type {string}\n   */\n  get mods() {\n    if ( !this.modifiers ) return \"\";\n    return this.modifiers.reduce((acc, mod) => {\n      return acc + (dnd5e.utils.isValidDieModifier(mod) ? mod : \"\");\n    }, \"\");\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * The die value to be rolled with the leading \"d\" (e.g. \"d4\").\n   * @type {string}\n   */\n  get denom() {\n    if ( !this.faces ) return \"\";\n    return `d${this.faces}`;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static migrateData(source) {\n    if ( source.n ) source.number = source.n;\n    if ( source.die ) source.faces = source.die;\n  }\n\n  /* -------------------------------------------- */\n  /*  Helpers                                     */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static getFields(level, value, lastValue) {\n    const fields = super.getFields(level, value, lastValue);\n    fields.faces.options = [\n      { value: \"\", label: fields.faces.placeholder },\n      { rule: true },\n      ...this.FACES.map(value => ({ value, label: `d${value}` }))\n    ];\n    return fields;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static getPlaceholder(name, lastValue) {\n    if ( (name === \"faces\") && lastValue?.faces ) return `d${lastValue.faces}`;\n    return super.getPlaceholder(name, lastValue);\n  }\n}\n\n\n/**\n * Scale value data type that stores distance values.\n *\n * @property {number} value  Numeric value.\n */\nexport class ScaleValueTypeDistance extends ScaleValueTypeNumber {\n\n  /* -------------------------------------------- */\n  /*  Model Configuration                         */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static get metadata() {\n    return foundry.utils.mergeObject(super.metadata, {\n      label: \"DND5E.ADVANCEMENT.ScaleValue.Type.Distance.Label\",\n      hint: \"DND5E.ADVANCEMENT.ScaleValue.Type.Distance.Hint\"\n    });\n  }\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  get display() {\n    return formatLength(this.value, this.parent.configuration.distance?.units || \"ft\");\n  }\n}\n\n\n/**\n * The available types of scaling value.\n * @enum {ScaleValueType}\n */\nexport const TYPES = {\n  string: ScaleValueType,\n  number: ScaleValueTypeNumber,\n  cr: ScaleValueTypeCR,\n  dice: ScaleValueTypeDice,\n  distance: ScaleValueTypeDistance\n};\n"
    },
    "module_module/data/advancement/ability-score-improvement.mjs": {
      "raw_content": "import SparseDataModel from \"../abstract/sparse-data-model.mjs\";\nimport MappingField from \"../fields/mapping-field.mjs\";\n\nconst { DocumentUUIDField, NumberField, SetField, StringField } = foundry.data.fields;\n\n/**\n * Data model for the Ability Score Improvement advancement configuration.\n *\n * @property {number} cap                    Maximum number of points that can be assigned to a single score.\n * @property {Object<string, number>} fixed  Number of points automatically assigned to a certain score.\n * @property {Set<string>} locked            Abilities that cannot be changed by this advancement.\n * @property {number} max                    Override for the maximum ability score.\n * @property {number} points                 Number of points that can be assigned to any score.\n * @property {string} recommendation         Epic Boon feat recommended by this class.\n */\nexport class AbilityScoreImprovementConfigurationData extends foundry.abstract.DataModel {\n\n  /** @override */\n  static LOCALIZATION_PREFIXES = [\"DND5E.ADVANCEMENT.AbilityScoreImprovement\"];\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static defineSchema() {\n    return {\n      cap: new NumberField({ integer: true, min: 1, initial: 2 }),\n      fixed: new MappingField(new NumberField({ nullable: false, integer: true, initial: 0 })),\n      locked: new SetField(new StringField()),\n      max: new NumberField({ integer: true, min: 1 }),\n      points: new NumberField({ integer: true, min: 0, initial: 0 }),\n      recommendation: new DocumentUUIDField({ type: \"Item\" })\n    };\n  }\n}\n\n/**\n * Data model for the Ability Score Improvement advancement value.\n *\n * @property {string} type             When on a class, whether the player chose ASI or a Feat.\n * @property {Object<string, number>}  Points assigned to individual scores.\n * @property {Object<string, string>}  Feat that was selected.\n */\nexport class AbilityScoreImprovementValueData extends SparseDataModel {\n  /** @inheritDoc */\n  static defineSchema() {\n    return {\n      type: new StringField({ required: true, initial: \"asi\", choices: [\"asi\", \"feat\"] }),\n      assignments: new MappingField(new NumberField({\n        nullable: false, integer: true\n      }), { required: false, initial: undefined }),\n      feat: new MappingField(new StringField(), { required: false, initial: undefined, label: \"DND5E.Feature.Feat\" })\n    };\n  }\n}\n"
    },
    "module_module/documents/item.mjs": {
      "raw_content": "import ActivityChoiceDialog from \"../applications/activity/activity-choice-dialog.mjs\";\nimport AdvancementManager from \"../applications/advancement/advancement-manager.mjs\";\nimport AdvancementConfirmationDialog from \"../applications/advancement/advancement-confirmation-dialog.mjs\";\nimport ContextMenu5e from \"../applications/context-menu.mjs\";\nimport CreateScrollDialog from \"../applications/item/create-scroll-dialog.mjs\";\nimport ClassData from \"../data/item/class.mjs\";\nimport ContainerData from \"../data/item/container.mjs\";\nimport EquipmentData from \"../data/item/equipment.mjs\";\nimport SpellData from \"../data/item/spell.mjs\";\nimport ActivitiesTemplate from \"../data/item/templates/activities.mjs\";\nimport PhysicalItemTemplate from \"../data/item/templates/physical-item.mjs\";\nimport { staticID } from \"../utils.mjs\";\nimport Scaling from \"./scaling.mjs\";\nimport Proficiency from \"./actor/proficiency.mjs\";\nimport SelectChoices from \"./actor/select-choices.mjs\";\nimport Advancement from \"./advancement/advancement.mjs\";\nimport SystemDocumentMixin from \"./mixins/document.mjs\";\n\nconst TextEditor = foundry.applications.ux.TextEditor.implementation;\n\n/**\n * Override and extend the basic Item implementation.\n */\nexport default class Item5e extends SystemDocumentMixin(Item) {\n\n  /**\n   * Caches an item linked to this one, such as a subclass associated with a class.\n   * @type {Item5e}\n   * @private\n   */\n  _classLink;\n\n  /* -------------------------------------------- */\n\n  /**\n   * An object that tracks which tracks the changes to the data model which were applied by active effects\n   * @type {object}\n   */\n  overrides = this.overrides ?? {};\n\n  /* -------------------------------------------- */\n\n  /**\n   * Types that can be selected within the compendium browser.\n   * @param {object} [options={}]\n   * @param {Set<string>} [options.chosen]  Types that have been selected.\n   * @returns {SelectChoices}\n   */\n  static compendiumBrowserTypes({ chosen=new Set() }={}) {\n    const [generalTypes, physicalTypes] = Item.TYPES.reduce(([g, p], t) => {\n      if ( ![CONST.BASE_DOCUMENT_TYPE, \"backpack\"].includes(t) ) {\n        if ( \"inventorySection\" in (CONFIG.Item.dataModels[t] ?? {}) ) p.push(t);\n        else g.push(t);\n      }\n      return [g, p];\n    }, [[], []]);\n\n    const makeChoices = (types, categoryChosen) => types.reduce((obj, type) => {\n      obj[type] = {\n        label: CONFIG.Item.typeLabels[type],\n        chosen: chosen.has(type) || categoryChosen\n      };\n      return obj;\n    }, {});\n    const choices = makeChoices(generalTypes);\n    choices.physical = {\n      label: game.i18n.localize(\"DND5E.ITEM.Category.Physical\"),\n      children: makeChoices(physicalTypes, chosen.has(\"physical\"))\n    };\n    return new SelectChoices(choices);\n  }\n\n  /* -------------------------------------------- */\n  /*  Migrations                                  */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  _initializeSource(data, options={}) {\n    if ( data instanceof foundry.abstract.DataModel ) data = data.toObject();\n\n    // Migrate backpack -> container.\n    if ( data.type === \"backpack\" ) {\n      data.type = \"container\";\n      foundry.utils.setProperty(data, \"flags.dnd5e.persistSourceMigration\", true);\n    }\n\n    /**\n     * A hook event that fires before source data is initialized for an Item in a compendium.\n     * @function dnd5e.initializeItemSource\n     * @memberof hookEvents\n     * @param {Item5e} item     Item for which the data is being initialized.\n     * @param {object} data     Source data being initialized.\n     * @param {object} options  Additional data initialization options.\n     */\n    if ( options.pack || options.parent?.pack ) Hooks.callAll(\"dnd5e.initializeItemSource\", this, data, options);\n\n    if ( data.type === \"spell\" ) {\n      return super._initializeSource(new Proxy(data, {\n        set(target, prop, value, receiver) {\n          if ( prop === \"preparation\" ) console.trace(value);\n          return Reflect.set(target, prop, value, receiver);\n        },\n\n        defineProperty(target, prop, attributes) {\n          if ( prop === \"preparation\" ) console.trace(attributes);\n          return Reflect.defineProperty(target, prop, attributes);\n        }\n      }), options);\n    }\n\n    return super._initializeSource(data, options);\n  }\n\n  /* -------------------------------------------- */\n  /*  Item Properties                             */\n  /* -------------------------------------------- */\n\n  /**\n   * Which ability score modifier is used by this item?\n   * @type {string|null}\n   * @see {@link ActionTemplate#abilityMod}\n   */\n  get abilityMod() {\n    return this.system.abilityMod ?? null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should deletion of this item be allowed? Doesn't prevent programatic deletion, but affects UI controls.\n   * @type {boolean}\n   */\n  get canDelete() {\n    return !this.flags.dnd5e?.cachedFor;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should duplication of this item be allowed? Doesn't prevent programatic duplication, but affects UI controls.\n   * @type {boolean}\n   */\n  get canDuplicate() {\n    return !this.system.metadata?.singleton && ![\"class\", \"subclass\"].includes(this.type)\n      && !this.flags.dnd5e?.cachedFor;\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * The item that contains this item, if it is in a container. Returns a promise if the item is located\n   * in a compendium pack.\n   * @type {Item5e|Promise<Item5e>|void}\n   */\n  get container() {\n    if ( !this.system.container ) return;\n    if ( this.isEmbedded ) return this.actor.items.get(this.system.container);\n    if ( this.pack ) return game.packs.get(this.pack).getDocument(this.system.container);\n    return game.items.get(this.system.container);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * What is the critical hit threshold for this item, if applicable?\n   * @type {number|null}\n   * @see {@link ActionTemplate#criticalThreshold}\n   */\n  get criticalThreshold() {\n    return this.system.criticalThreshold ?? null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does this item support advancement and have advancements defined?\n   * @type {boolean}\n   */\n  get hasAdvancement() {\n    return !!this.system.advancement?.length;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement an attack roll as part of its usage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#hasAttack}\n   */\n  get hasAttack() {\n    return this.system.hasAttack ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this Item limited in its ability to be used by charges or by recharge?\n   * @type {boolean}\n   * @see {@link ActivatedEffectTemplate#hasLimitedUses}\n   * @see {@link FeatData#hasLimitedUses}\n   */\n  get hasLimitedUses() {\n    return this.system.hasLimitedUses ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement a saving throw as part of its usage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#hasSave}\n   */\n  get hasSave() {\n    return this.system.hasSave ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Return an item's identifier.\n   * @type {string}\n   */\n  get identifier() {\n    if ( this.system.identifier ) return this.system.identifier;\n    const identifier = this.name.replaceAll(/(\\w+)([\\\\|/])(\\w+)/g, \"$1-$3\");\n    return identifier.slugify({ strict: true });\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * Is this Item an activatable item?\n   * @type {boolean}\n   */\n  get isActive() {\n    return this.system.isActive ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this item any of the armor subtypes?\n   * @type {boolean}\n   * @see {@link EquipmentTemplate#isArmor}\n   */\n  get isArmor() {\n    return this.system.isArmor ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the item provide an amount of healing instead of conventional damage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#isHealing}\n   */\n  get isHealing() {\n    return this.system.isHealing ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this item a separate large object like a siege engine or vehicle component that is\n   * usually mounted on fixtures rather than equipped, and has its own AC and HP?\n   * @type {boolean}\n   * @see {@link EquipmentData#isMountable}\n   * @see {@link WeaponData#isMountable}\n   */\n  get isMountable() {\n    return this.system.isMountable ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this class item the original class for the containing actor? If the item is not a class or it is not\n   * embedded in an actor then this will return `null`.\n   * @type {boolean|null}\n   */\n  get isOriginalClass() {\n    if ( this.type !== \"class\" || !this.isEmbedded || !this.parent.system.details?.originalClass ) return null;\n    return this.id === this.parent.system.details.originalClass;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement a versatile damage roll as part of its usage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#isVersatile}\n   */\n  get isVersatile() {\n    return this.system.isVersatile ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is the item rechargeable?\n   * @type {boolean}\n   */\n  get hasRecharge() {\n    return this.hasLimitedUses && (this.system.uses?.recovery[0]?.period === \"recharge\");\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * Is the item on recharge cooldown?\n   * @type {boolean}\n   */\n  get isOnCooldown() {\n    return this.hasRecharge && (this.system.uses.value < 1);\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * Does this item require concentration?\n   * @type {boolean}\n   */\n  get requiresConcentration() {\n    if ( this.system.validProperties.has(\"concentration\") && this.system.properties.has(\"concentration\") ) return true;\n    return this.system.activities?.contents[0]?.duration.concentration ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Class associated with this subclass. Always returns null on non-subclass or non-embedded items.\n   * @type {Item5e|null}\n   */\n  get class() {\n    if ( !this.isEmbedded || (this.type !== \"subclass\") ) return null;\n    const cid = this.system.classIdentifier;\n    return this._classLink ??= this.parent.items.find(i => (i.type === \"class\") && (i.identifier === cid));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Subclass associated with this class. Always returns null on non-class or non-embedded items.\n   * @type {Item5e|null}\n   */\n  get subclass() {\n    if ( !this.isEmbedded || (this.type !== \"class\") ) return null;\n    const items = this.parent.items;\n    const cid = this.identifier;\n    return this._classLink ??= items.find(i => (i.type === \"subclass\") && (i.system.classIdentifier === cid));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Retrieve scale values for current level from advancement data.\n   * @type {Record<string, ScaleValueType>}\n   */\n  get scaleValues() {\n    if ( !this.advancement.byType.ScaleValue ) return {};\n    const item = [\"class\", \"subclass\"].includes(this.advancementRootItem?.type) ? this.advancementRootItem : this;\n    const level = item.type === \"class\" ? item.system.levels : item.type === \"subclass\" ? item.class?.system.levels\n      : this.parent?.system.details.level ?? 0;\n    return this.advancement.byType.ScaleValue.reduce((obj, advancement) => {\n      obj[advancement.identifier] = advancement.valueForLevel(level);\n      return obj;\n    }, {});\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Scaling increase for this item based on flag or item-type specific details.\n   * @type {number}\n   */\n  get scalingIncrease() {\n    return this.system?.scalingIncrease ?? this.getFlag(\"dnd5e\", \"scaling\") ?? 0;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Spellcasting details for a class or subclass.\n   *\n   * @typedef {object} SpellcastingDescription\n   * @property {string} type              Spellcasting method as defined in `CONFIG.DND5E.spellcasting`.\n   * @property {string|null} progression  Progression within the specified spellcasting type if supported.\n   * @property {string} ability           Ability used when casting spells from this class or subclass.\n   * @property {number|null} levels       Number of levels of this class or subclass's class if embedded.\n   */\n\n  /**\n   * Retrieve the spellcasting for a class or subclass. For classes, this will return the spellcasting\n   * of the subclass if it overrides the class. For subclasses, this will return the class's spellcasting\n   * if no spellcasting is defined on the subclass.\n   * @type {SpellcastingDescription|null}  Spellcasting object containing progression & ability.\n   */\n  get spellcasting() {\n    const spellcasting = this.system.spellcasting;\n    if ( !spellcasting ) return null;\n    const isSubclass = this.type === \"subclass\";\n    const classSC = isSubclass ? this.class?.system.spellcasting : spellcasting;\n    const subclassSC = isSubclass ? spellcasting : this.subclass?.system.spellcasting;\n    const finalSC = foundry.utils.deepClone(\n      ( subclassSC && (subclassSC.progression !== \"none\") ) ? subclassSC : classSC\n    );\n    return finalSC ?? null;\n  }\n\n  /* -------------------------------------------- */\n  /*  Active Effects                              */\n  /* -------------------------------------------- */\n\n  /**\n   * Get all ActiveEffects that may apply to this Item.\n   * @yields {ActiveEffect5e}\n   * @returns {Generator<ActiveEffect5e, void, void>}\n   */\n  *allApplicableEffects() {\n    for ( const effect of this.effects ) {\n      if ( effect.isAppliedEnchantment ) yield effect;\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Apply any transformation to the Item data which are caused by enchantment Effects.\n   */\n  applyActiveEffects() {\n    const overrides = {};\n\n    // Organize non-disabled effects by their application priority\n    const changes = [];\n    for ( const effect of this.allApplicableEffects() ) {\n      if ( !effect.active ) continue;\n      changes.push(...effect.changes.map(change => {\n        const c = foundry.utils.deepClone(change);\n        c.effect = effect;\n        c.priority ??= c.mode * 10;\n        return c;\n      }));\n    }\n    changes.sort((a, b) => a.priority - b.priority);\n\n    // Apply all changes\n    for ( const change of changes ) {\n      if ( !change.key ) continue;\n      const changes = change.effect.apply(this, change);\n      Object.assign(overrides, changes);\n    }\n\n    // Expand the set of final overrides\n    this.overrides = foundry.utils.expandObject(overrides);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should this item's active effects be suppressed.\n   * @type {boolean}\n   */\n  get areEffectsSuppressed() {\n    const requireEquipped = (this.type !== \"consumable\")\n      || [\"rod\", \"trinket\", \"wand\"].includes(this.system.type.value);\n    if ( requireEquipped && (this.system.equipped === false) ) return true;\n    return !this.system.attuned && (this.system.attunement === \"required\");\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Initialization                         */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  clone(data={}, options={}) {\n    if ( options.save ) return super.clone(data, options);\n    if ( this.parent ) this.parent._embeddedPreparation = true;\n    const item = super.clone(data, options);\n    if ( item.parent ) {\n      delete item.parent._embeddedPreparation;\n      item.prepareFinalAttributes();\n    }\n    return item;\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Preparation                            */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareBaseData() {\n    this.labels = {};\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareEmbeddedDocuments() {\n    super.prepareEmbeddedDocuments();\n    for ( const activity of this.system.activities ?? [] ) activity.prepareData();\n    for ( const advancement of this.system.advancement ?? [] ) {\n      if ( !(advancement instanceof Advancement) ) continue;\n      advancement.prepareData();\n    }\n    if ( !this.actor || this.actor._embeddedPreparation ) this.applyActiveEffects();\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareDerivedData() {\n    this.labels ??= {};\n    super.prepareDerivedData();\n\n    // Clear out linked item cache\n    this._classLink = undefined;\n\n    // Advancement\n    this._prepareAdvancement();\n\n    // Item Properties\n    if ( this.system.properties ) {\n      this.labels.properties = this.system.properties.reduce((acc, prop) => {\n        if ( (prop === \"concentration\") && !this.requiresConcentration ) return acc;\n        acc.push({\n          abbr: prop,\n          label: CONFIG.DND5E.itemProperties[prop]?.label,\n          icon: CONFIG.DND5E.itemProperties[prop]?.icon\n        });\n        return acc;\n      }, []);\n    }\n\n    // Un-owned items can have their final preparation done here, otherwise this needs to happen in the owning Actor\n    if ( !this.isOwned ) this.prepareFinalAttributes();\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare advancement objects from stored advancement data.\n   * @protected\n   */\n  _prepareAdvancement() {\n    const minAdvancementLevel = [\"class\", \"subclass\"].includes(this.type) ? 1 : 0;\n    this.advancement = {\n      byId: {},\n      byLevel: Object.fromEntries(\n        Array.fromRange(CONFIG.DND5E.maxLevel + 1).slice(minAdvancementLevel).map(l => [l, []])\n      ),\n      byType: {},\n      needingConfiguration: []\n    };\n    for ( const advancement of this.system.advancement ?? [] ) {\n      if ( !(advancement instanceof Advancement) ) continue;\n      this.advancement.byId[advancement.id] = advancement;\n      this.advancement.byType[advancement.type] ??= [];\n      this.advancement.byType[advancement.type].push(advancement);\n      advancement.levels.forEach(l => this.advancement.byLevel[l]?.push(advancement));\n      if ( !advancement.levels.length\n        || ((advancement.levels.length === 1) && (advancement.levels[0] < minAdvancementLevel)) ) {\n        this.advancement.needingConfiguration.push(advancement);\n      }\n    }\n    Object.entries(this.advancement.byLevel).forEach(([lvl, data]) => data.sort((a, b) => {\n      return a.sortingValueForLevel(lvl).localeCompare(b.sortingValueForLevel(lvl), game.i18n.lang);\n    }));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Determine an item's proficiency level based on its parent actor's proficiencies.\n   * @protected\n   */\n  _prepareProficiency() {\n    if ( ![\"spell\", \"weapon\", \"equipment\", \"tool\", \"feat\", \"consumable\"].includes(this.type) ) return;\n    if ( !this.actor?.system.attributes?.prof ) {\n      this.system.prof = new Proficiency(0, 0);\n      return;\n    }\n\n    this.system.prof = new Proficiency(this.actor.system.attributes.prof, this.system.proficiencyMultiplier ?? 0);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Compute item attributes which might depend on prepared actor data. If this item is embedded this method will\n   * be called after the actor's data is prepared.\n   * Otherwise, it will be called at the end of `Item5e#prepareDerivedData`.\n   */\n  prepareFinalAttributes() {\n    this._prepareProficiency();\n    this.system.prepareFinalData?.();\n    this._prepareLabels();\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare top-level summary labels based on configured activities.\n   * @protected\n   */\n  _prepareLabels() {\n    const activations = this.labels.activations = [];\n    const attacks = this.labels.attacks = [];\n    const damages = this.labels.damages = [];\n    if ( !this.system.activities?.size ) return;\n    for ( const activity of this.system.activities ) {\n      if ( !(\"activation\" in activity) ) continue;\n      const activationLabels = activity.activationLabels;\n      if ( activationLabels ) activations.push({\n        ...activationLabels,\n        concentrationDuration: activity.labels.concentrationDuration,\n        ritualActivation: activity.labels.ritualActivation\n      });\n      if ( activity.type === \"attack\" ) {\n        const { toHit, modifier } = activity.labels;\n        attacks.push({ toHit, modifier });\n      }\n      if ( activity.labels?.damage?.length ) damages.push(...activity.labels.damage);\n    }\n    if ( activations.length ) {\n      Object.assign(this.labels, activations[0]);\n      delete activations[0].concentrationDuration;\n      delete activations[0].ritualActivation;\n    }\n    if ( attacks.length ) Object.assign(this.labels, attacks[0]);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Render a rich tooltip for this item.\n   * @param {EnrichmentOptions} [enrichmentOptions={}]  Options for text enrichment.\n   * @returns {Promise<{content: string, classes: string[]}>|null}\n   */\n  richTooltip(enrichmentOptions={}) {\n    return this.system.richTooltip?.() ?? null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Configuration data for an item usage being prepared.\n   *\n   * @typedef {object} ItemUseConfiguration\n   * @property {boolean} createMeasuredTemplate     Should this item create a template?\n   * @property {boolean} createSummons              Should this item create a summoned creature?\n   * @property {boolean} consumeResource            Should this item consume a (non-ammo) resource?\n   * @property {boolean} consumeSpellSlot           Should this item (a spell) consume a spell slot?\n   * @property {boolean} consumeUsage               Should this item consume its limited uses or recharge?\n   * @property {string} enchantmentProfile          ID of the enchantment to apply.\n   * @property {boolean} promptEnchantment          Does an enchantment profile need to be selected?\n   * @property {string|number|null} slotLevel       The spell slot type or level to consume by default.\n   * @property {string|null} summonsProfile         ID of the summoning profile to use.\n   * @property {number|null} resourceAmount         The amount to consume by default when scaling with consumption.\n   * @property {boolean} beginConcentrating         Should this item initiate concentration?\n   * @property {string|null} endConcentration       The id of the active effect to end concentration on, if any.\n   */\n\n  /**\n   * Additional options used for configuring item usage.\n   *\n   * @typedef {object} ItemUseOptions\n   * @property {boolean} configureDialog  Display a configuration dialog for the item usage, if applicable?\n   * @property {string} rollMode          The roll display mode with which to display (or not) the card.\n   * @property {boolean} createMessage    Whether to automatically create a chat message (if true) or simply return\n   *                                      the prepared chat message data (if false).\n   * @property {object} flags             Additional flags added to the chat message.\n   * @property {Event} event              The browser event which triggered the item usage, if any.\n   */\n\n  /**\n   * Trigger an Item usage, optionally creating a chat message with followup actions.\n   * @param {ActivityUseConfiguration} config       Configuration info for the activation.\n   * @param {boolean} [config.chooseActivity=false] Force the activity selection prompt unless the fast-forward modifier\n   *                                                is held.\n   * @param {ActivityDialogConfiguration} dialog    Configuration info for the usage dialog.\n   * @param {ActivityMessageConfiguration} message  Configuration info for the created chat message.\n   * @returns {Promise<ActivityUsageResults|ChatMessage|object|void>}  Returns the usage results for the triggered\n   *                                                                   activity, or the chat message if the Item had no\n   *                                                                   activities and was posted directly to chat.\n   */\n  async use(config={}, dialog={}, message={}) {\n    if ( this.pack ) return;\n\n    let event = config.event;\n    const activities = this.system.activities?.filter(a => a.canUse);\n    if ( activities?.length ) {\n      const { chooseActivity, ...activityConfig } = config;\n      let usageConfig = activityConfig;\n      let dialogConfig = dialog;\n      let messageConfig = message;\n      let activity = activities[0];\n      if ( ((activities.length > 1) || chooseActivity) && !event?.shiftKey ) {\n        activity = await ActivityChoiceDialog.create(this);\n      }\n      if ( !activity ) return;\n      return activity.use(usageConfig, dialogConfig, messageConfig);\n    }\n    if ( this.actor ) return this.displayCard(message);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Display the chat card for an Item as a Chat Message\n   * @param {Partial<ActivityMessageConfiguration>} [message]  Configuration info for the created chat message.\n   * @returns {Promise<ChatMessage5e|object|void>}\n   */\n  async displayCard(message={}) {\n    const context = {\n      actor: this.actor,\n      config: CONFIG.DND5E,\n      tokenId: this.actor.token?.uuid || null,\n      item: this,\n      data: await this.system.getCardData(),\n      isSpell: this.type === \"spell\"\n    };\n\n    const messageConfig = foundry.utils.mergeObject({\n      create: message?.createMessage ?? true,\n      data: {\n        content: await foundry.applications.handlebars.renderTemplate(\n          \"systems/dnd5e/templates/chat/item-card.hbs\", context\n        ),\n        flags: {\n          \"dnd5e.item\": { id: this.id, uuid: this.uuid, type: this.type }\n        },\n        speaker: ChatMessage.getSpeaker({ actor: this.actor, token: this.actor.token }),\n        title: this.name\n      },\n      rollMode: game.settings.get(\"core\", \"rollMode\")\n    }, message);\n\n    // Merge in the flags from options\n    if ( foundry.utils.getType(message.flags) === \"Object\" ) {\n      foundry.utils.mergeObject(messageConfig.data.flags, message.flags);\n      delete messageConfig.flags;\n    }\n\n    /**\n     * A hook event that fires before an item chat card is created without using an activity.\n     * @function dnd5e.preDisplayCard\n     * @memberof hookEvents\n     * @param {Item5e} item                           Item for which the card will be created.\n     * @param {ActivityMessageConfiguration} message  Configuration for the roll message.\n     * @returns {boolean}                             Return `false` to prevent the card from being displayed.\n     */\n    if ( Hooks.call(\"dnd5e.preDisplayCard\", this, messageConfig) === false ) return;\n    if ( Hooks.call(\"dnd5e.preDisplayCardV2\", this, messageConfig) === false ) return;\n\n    ChatMessage.applyRollMode(messageConfig.data, messageConfig.rollMode);\n    const card = messageConfig.create === false ? messageConfig.data : await ChatMessage.create(messageConfig.data);\n\n    /**\n     * A hook event that fires after an item chat card is created.\n     * @function dnd5e.displayCard\n     * @memberof hookEvents\n     * @param {Item5e} item                Item for which the chat card is being displayed.\n     * @param {ChatMessage5e|object} card  The created ChatMessage instance or ChatMessageData depending on whether\n     *                                     options.createMessage was set to `true`.\n     */\n    Hooks.callAll(\"dnd5e.displayCard\", this, card);\n\n    return card;\n  }\n\n  /* -------------------------------------------- */\n  /*  Chat Cards                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare an object of chat data used to display a card for the Item in the chat log.\n   * @param {object} htmlOptions    Options used by the TextEditor.enrichHTML function.\n   * @returns {object}              An object of chat data to render.\n   */\n  async getChatData(htmlOptions={}) {\n    const context = {};\n    let { identified, unidentified, description } = this.system;\n\n    // Rich text description\n    const isIdentified = identified !== false;\n    description = game.user.isGM || isIdentified ? description.value : unidentified?.description;\n    context.description = await TextEditor.enrichHTML(description ?? \"\", {\n      relativeTo: this,\n      rollData: this.getRollData(),\n      ...htmlOptions\n    });\n\n    // Type specific properties\n    context.properties = [\n      ...this.system.chatProperties ?? [],\n      ...this.system.equippableItemCardProperties ?? [],\n      ...Object.values(this.labels.activations?.[0] ?? {})\n    ].filter(p => p);\n\n    return context;\n  }\n\n  /* -------------------------------------------- */\n  /*  Item Rolls - Attack, Damage, Saves, Checks  */\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare data needed to roll a tool check and then pass it off to `d20Roll`.\n   * @param {D20RollConfiguration} [options]  Roll configuration options provided to the d20Roll function.\n   * @returns {Promise<Roll>}                 A Promise which resolves to the created Roll instance.\n   */\n  async rollToolCheck(options={}) {\n    if ( this.type !== \"tool\" ) throw new Error(\"Wrong item type!\");\n    return this.actor?.rollToolCheck({\n      ability: this.system.ability,\n      bonus: this.system.bonus,\n      prof: this.system.prof,\n      item: this,\n      tool: this.system.type.baseItem,\n      ...options\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * @inheritdoc\n   * @param {object} [options]\n   * @param {boolean} [options.deterministic] Whether to force deterministic values for data properties that could be\n   *                                          either a die term or a flat term.\n   */\n  getRollData({ deterministic=false }={}) {\n    let data;\n    if ( this.system.getRollData ) data = this.system.getRollData({ deterministic });\n    else data = { ...(this.actor?.getRollData({ deterministic }) ?? {}), item: { ...this.system } };\n    if ( data?.item ) {\n      data.item.flags = { ...this.flags };\n      data.item.name = this.name;\n    }\n    data.scaling = new Scaling(this.scalingIncrease);\n    return data;\n  }\n\n  /* -------------------------------------------- */\n  /*  Chat Message Helpers                        */\n  /* -------------------------------------------- */\n\n  /**\n   * Apply listeners to chat messages.\n   * @param {HTMLElement} html  Rendered chat message.\n   */\n  static chatListeners(html) {\n    html.addEventListener(\"click\", event => {\n      if ( event.target.closest(\"[data-context-menu]\") ) ContextMenu5e.triggerEvent(event);\n      else if ( event.target.closest(\".collapsible\") ) this._onChatCardToggleContent(event);\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle toggling the visibility of chat card content when the name is clicked\n   * @param {Event} event   The originating click event\n   * @private\n   */\n  static _onChatCardToggleContent(event) {\n    const header = event.target.closest(\".collapsible\");\n    if ( !event.target.closest(\".collapsible-content.card-content\") ) {\n      event.preventDefault();\n      header.classList.toggle(\"collapsed\");\n\n      // Clear the height from the chat popout container so that it appropriately resizes.\n      const popout = header.closest(\".chat-popout\");\n      if ( popout ) popout.style.height = \"\";\n    }\n  }\n\n  /* -------------------------------------------- */\n  /*  Activities & Advancements                   */\n  /* -------------------------------------------- */\n\n  /**\n   * Create a new activity of the specified type.\n   * @param {string} type                          Type of activity to create.\n   * @param {object} [data]                        Data to use when creating the activity.\n   * @param {object} [options={}]\n   * @param {boolean} [options.renderSheet=true]  Should the sheet be rendered after creation?\n   * @returns {Promise<ActivitySheet|null>}\n   */\n  async createActivity(type, data={}, { renderSheet=true }={}) {\n    if ( !this.system.activities ) return;\n\n    const config = CONFIG.DND5E.activityTypes[type];\n    if ( !config ) throw new Error(`${type} not found in CONFIG.DND5E.activityTypes`);\n    const cls = config.documentClass;\n\n    const createData = foundry.utils.deepClone(data);\n    const activity = new cls({ type, ...data }, { parent: this });\n    if ( activity._preCreate(createData) === false ) return;\n\n    await this.update({ [`system.activities.${activity.id}`]: activity.toObject() });\n    const created = this.system.activities.get(activity.id);\n    if ( renderSheet ) return created.sheet?.render({ force: true });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Update an activity belonging to this item.\n   * @param {string} id          ID of the activity to update.\n   * @param {object} updates     Updates to apply to this activity.\n   * @returns {Promise<Item5e>}  This item with the changes applied.\n   */\n  updateActivity(id, updates) {\n    if ( !this.system.activities ) return this;\n    if ( !this.system.activities.has(id) ) throw new Error(`Activity of ID ${id} could not be found to update`);\n    return this.update({ [`system.activities.${id}`]: updates });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Remove an activity from this item.\n   * @param {string} id          ID of the activity to remove.\n   * @returns {Promise<Item5e>}  This item with the changes applied.\n   */\n  async deleteActivity(id) {\n    const activity = this.system.activities?.get(id);\n    if ( !activity ) return this;\n    await Promise.allSettled(activity.constructor._apps.get(activity.uuid)?.map(a => a.close()) ?? []);\n    return this.update({ [`system.activities.-=${id}`]: null });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a new advancement of the specified type.\n   * @param {string} type                          Type of advancement to create.\n   * @param {object} [data]                        Data to use when creating the advancement.\n   * @param {object} [options]\n   * @param {boolean} [options.showConfig=true]    Should the new advancement's configuration application be shown?\n   * @param {boolean} [options.source=false]       Should a source-only update be performed?\n   * @returns {Promise<AdvancementConfig>|Item5e}  Promise for advancement config for new advancement if local\n   *                                               is `false`, or item with newly added advancement.\n   */\n  createAdvancement(type, data={}, { showConfig=true, source=false }={}) {\n    if ( !this.system.advancement ) return this;\n\n    const config = CONFIG.DND5E.advancementTypes[type];\n    if ( !config ) throw new Error(`${type} not found in CONFIG.DND5E.advancementTypes`);\n    const cls = config.documentClass;\n\n    if ( !config.validItemTypes.has(this.type) || !cls.availableForItem(this) ) {\n      throw new Error(`${type} advancement cannot be added to ${this.name}`);\n    }\n\n    const createData = foundry.utils.deepClone(data);\n    const advancement = new cls(data, {parent: this});\n    if ( advancement._preCreate(createData) === false ) return;\n\n    const advancementCollection = this.toObject().system.advancement;\n    advancementCollection.push(advancement.toObject());\n    if ( source ) return this.updateSource({\"system.advancement\": advancementCollection});\n    return this.update({ \"system.advancement\": advancementCollection }).then(() => {\n      if ( showConfig ) return this.advancement.byId[advancement.id]?.sheet?.render(true);\n      return this;\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Update an advancement belonging to this item.\n   * @param {string} id                       ID of the advancement to update.\n   * @param {object} updates                  Updates to apply to this advancement.\n   * @param {object} [options={}]\n   * @param {boolean} [options.source=false]  Should a source-only update be performed?\n   * @returns {Promise<Item5e>|Item5e}        This item with the changes applied, promised if source is `false`.\n   */\n  updateAdvancement(id, updates, { source=false }={}) {\n    if ( !this.system.advancement ) return this;\n    const idx = this.system.advancement.findIndex(a => a._id === id);\n    if ( idx === -1 ) throw new Error(`Advancement of ID ${id} could not be found to update`);\n\n    const advancement = this.advancement.byId[id];\n    if ( source ) {\n      advancement.updateSource(updates);\n      advancement.render();\n      return this;\n    }\n\n    const advancementCollection = this.toObject().system.advancement;\n    const clone = new advancement.constructor(advancementCollection[idx], { parent: advancement.parent });\n    clone.updateSource(updates);\n    advancementCollection[idx] = clone.toObject();\n    return this.update({\"system.advancement\": advancementCollection}).then(r => {\n      advancement.render(false, { height: \"auto\" });\n      return r;\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Remove an advancement from this item.\n   * @param {string} id                       ID of the advancement to remove.\n   * @param {object} [options={}]\n   * @param {boolean} [options.source=false]  Should a source-only update be performed?\n   * @returns {Promise<Item5e>|Item5e}        This item with the changes applied.\n   */\n  deleteAdvancement(id, { source=false }={}) {\n    if ( !this.system.advancement ) return this;\n\n    const advancementCollection = this.toObject().system.advancement.filter(a => a._id !== id);\n    if ( source ) return this.updateSource({\"system.advancement\": advancementCollection});\n    return this.update({\"system.advancement\": advancementCollection});\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Duplicate an advancement, resetting its value to default and giving it a new ID.\n   * @param {string} id                             ID of the advancement to duplicate.\n   * @param {object} [options]\n   * @param {boolean} [options.showConfig=true]     Should the new advancement's configuration application be shown?\n   * @param {boolean} [options.source=false]        Should a source-only update be performed?\n   * @returns {Promise<AdvancementConfig>|Item5e}   Promise for advancement config for duplicate advancement if source\n   *                                                is `false`, or item with newly duplicated advancement.\n   */\n  duplicateAdvancement(id, options) {\n    const original = this.advancement.byId[id];\n    if ( !original ) return this;\n    const duplicate = original.toObject();\n    delete duplicate._id;\n    if ( original.constructor.metadata.dataModels?.value ) {\n      duplicate.value = (new original.constructor.metadata.dataModels.value()).toObject();\n    } else {\n      duplicate.value = original.constructor.metadata.defaults?.value ?? {};\n    }\n    return this.createAdvancement(original.constructor.typeName, duplicate, options);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  getEmbeddedDocument(embeddedName, id, options) {\n    let doc;\n    switch ( embeddedName ) {\n      case \"Activity\": doc = this.system.activities?.get(id); break;\n      case \"Advancement\": doc = this.advancement.byId[id]; break;\n      default: return super.getEmbeddedDocument(embeddedName, id, options);\n    }\n    if ( options?.strict && (advancement === undefined) ) {\n      throw new Error(`The key ${id} does not exist in the ${embeddedName} Collection`);\n    }\n    return doc;\n  }\n\n  /* -------------------------------------------- */\n  /*  Event Handlers                              */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _preCreate(data, options, user) {\n    if ( (await super._preCreate(data, options, user)) === false ) return false;\n\n    const isPhysical = this.system.constructor._schemaTemplates?.includes(PhysicalItemTemplate);\n    if ( this.parent?.system?.isGroup && !isPhysical ) return false;\n\n    // Create identifier based on name\n    if ( this.system.hasOwnProperty(\"identifier\") && !data.system?.identifier ) {\n      this.updateSource({ \"system.identifier\": this.identifier });\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _onCreate(data, options, userId) {\n    super._onCreate(data, options, userId);\n    await this.system.onCreateActivities?.(data, options, userId);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _preUpdate(changed, options, user) {\n    if ( (await super._preUpdate(changed, options, user)) === false ) return false;\n    await this.system.preUpdateActivities?.(changed, options, user);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _onUpdate(changed, options, userId) {\n    super._onUpdate(changed, options, userId);\n    await this.system.onUpdateActivities?.(changed, options, userId);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _onDelete(options, userId) {\n    super._onDelete(options, userId);\n    await this.system.onDeleteActivities?.(options, userId);\n    if ( game.user.isActiveGM ) this.effects.forEach(e => e.getDependents().forEach(e => e.delete()));\n    if ( userId !== game.user.id ) return;\n    this.parent?.endConcentration?.(this);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async deleteDialog(options={}) {\n    // If item has advancement, handle it separately\n    if ( this.actor?.system.metadata?.supportsAdvancement && !game.settings.get(\"dnd5e\", \"disableAdvancements\") ) {\n      const manager = AdvancementManager.forDeletedItem(this.actor, this.id);\n      if ( manager.steps.length ) {\n        try {\n          const shouldRemoveAdvancements = await AdvancementConfirmationDialog.forDelete(this);\n          if ( shouldRemoveAdvancements ) return manager.render(true);\n          return this.delete({ shouldRemoveAdvancements });\n        } catch(err) {\n          return;\n        }\n      }\n    }\n\n    // Display custom delete dialog when deleting a container with contents\n    const count = await this.system.contentsCount;\n    if ( count ) {\n      return Dialog.confirm({\n        title: `${game.i18n.format(\"DOCUMENT.Delete\", {type: game.i18n.localize(\"DND5E.Container\")})}: ${this.name}`,\n        content: `<h4>${game.i18n.localize(\"AreYouSure\")}</h4>\n          <p>${game.i18n.format(\"DND5E.ContainerDeleteMessage\", {count})}</p>\n          <label>\n            <input type=\"checkbox\" name=\"deleteContents\">\n            ${game.i18n.localize(\"DND5E.ContainerDeleteContents\")}\n          </label>`,\n        yes: html => {\n          const deleteContents = html.querySelector('[name=\"deleteContents\"]').checked;\n          this.delete({ deleteContents });\n        },\n        options: { ...options, jQuery: false }\n      });\n    }\n\n    return super.deleteDialog(options);\n  }\n\n  /* -------------------------------------------- */\n  /*  Factory Methods                             */\n  /* -------------------------------------------- */\n\n  /**\n   * Add additional system-specific sidebar directory context menu options for Item documents.\n   * @param {ItemDirectory} app      The sidebar application.\n   * @param {object[]} entryOptions  The default array of context menu options.\n   */\n  static addDirectoryContextOptions(app, entryOptions) {\n    entryOptions.push({\n      name: \"DND5E.Scroll.CreateScroll\",\n      icon: '<i class=\"fa-solid fa-scroll\"></i>',\n      callback: async li => {\n        let spell = game.items.get(li.dataset.entryId);\n        if ( app.collection instanceof foundry.documents.collections.CompendiumCollection ) {\n          spell = await app.collection.getDocument(li.dataset.entryId);\n        }\n        const scroll = await Item5e.createScrollFromSpell(spell);\n        if ( scroll ) Item5e.create(scroll);\n      },\n      condition: li => {\n        let item = game.items.get(li.dataset.documentId ?? li.dataset.entryId);\n        if ( app.collection instanceof foundry.documents.collections.CompendiumCollection ) {\n          item = app.collection.index.get(li.dataset.entryId);\n        }\n        return (item.type === \"spell\") && game.user.hasPermission(\"ITEM_CREATE\");\n      },\n      group: \"system\"\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * @callback ItemContentsTransformer\n   * @param {Item5e|object} item        Data for the item to transform.\n   * @param {object} options\n   * @param {string} options.container  ID of the container to create the items.\n   * @param {number} options.depth      Current depth of the item being created.\n   * @returns {Item5e|object|void}\n   */\n\n  /**\n   * Prepare creation data for the provided items and any items contained within them. The data created by this method\n   * can be passed to `createDocuments` with `keepId` always set to true to maintain links to container contents.\n   * @param {Item5e[]} items                     Items to create.\n   * @param {object} [context={}]                Context for the item's creation.\n   * @param {Item5e} [context.container]         Container in which to create the item.\n   * @param {boolean} [context.keepId=false]     Should IDs be maintained?\n   * @param {ItemContentsTransformer} [context.transformAll]    Method called on provided items and their contents.\n   * @param {ItemContentsTransformer} [context.transformFirst]  Method called only on provided items.\n   * @returns {Promise<object[]>}                Data for items to be created.\n   */\n  static async createWithContents(items, { container, keepId=false, transformAll, transformFirst }={}) {\n    let depth = 0;\n    if ( container ) {\n      depth = 1 + (await container.system.allContainers()).length;\n      if ( depth > PhysicalItemTemplate.MAX_DEPTH ) {\n        ui.notifications.warn(game.i18n.format(\"DND5E.ContainerMaxDepth\", { depth: PhysicalItemTemplate.MAX_DEPTH }));\n        return;\n      }\n    }\n\n    const createItemData = async (item, containerId, depth) => {\n      const o = { container: containerId, depth };\n      let newItemData = transformAll ? await transformAll(item, o) : item;\n      if ( transformFirst && (depth === 0) ) newItemData = await transformFirst(newItemData, o);\n      if ( !newItemData ) return;\n      if ( newItemData instanceof Item ) newItemData = game.items.fromCompendium(newItemData, {\n        clearSort: false, keepId: true, clearOwnership: false\n      });\n      foundry.utils.mergeObject(newItemData, {\"system.container\": containerId} );\n      if ( !keepId ) newItemData._id = foundry.utils.randomID();\n\n      created.push(newItemData);\n\n      const contents = await item.system.contents;\n      if ( contents && (depth < PhysicalItemTemplate.MAX_DEPTH) ) {\n        for ( const doc of contents ) await createItemData(doc, newItemData._id, depth + 1);\n      }\n    };\n\n    const created = [];\n    for ( const item of items ) await createItemData(item, container?.id, depth);\n    return created;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Configuration options for spell scroll creation.\n   *\n   * @typedef {object} SpellScrollConfiguration\n   * @property {boolean} [dialog=true]                           Present scroll creation dialog?\n   * @property {\"full\"|\"reference\"|\"none\"} [explanation=\"full\"]  Length of spell scroll rules text to include.\n   * @property {number} [level]                                  Level at which the spell should be cast.\n   * @property {Partial<SpellScrollValues>} [values]             Spell scroll DC and attack bonus.\n   */\n\n  /**\n   * Create a consumable spell scroll Item from a spell Item.\n   * @param {Item5e|object} spell                   The spell or item data to be made into a scroll.\n   * @param {object} [options]                      Additional options that modify the created scroll.\n   * @param {SpellScrollConfiguration} [config={}]  Configuration options for scroll creation.\n   * @returns {Promise<Item5e|void>}                The created scroll consumable item.\n   */\n  static async createScrollFromSpell(spell, options={}, config={}) {\n    if ( spell.pack ) return this.createScrollFromCompendiumSpell(spell.uuid, config);\n\n    const values = {};\n    if ( (spell instanceof Item5e) && spell.isOwned && (game.settings.get(\"dnd5e\", \"rulesVersion\") === \"modern\") ) {\n      const spellcastingClass = spell.actor.spellcastingClasses?.[spell.system.sourceClass];\n      if ( spellcastingClass ) {\n        values.bonus = spellcastingClass.spellcasting.attack;\n        values.dc = spellcastingClass.spellcasting.save;\n      } else {\n        values.bonus = spell.actor.system.attributes?.spell?.mod;\n        values.dc = spell.actor.system.attributes?.spell?.dc;\n      }\n    }\n\n    config = foundry.utils.mergeObject({\n      explanation: game.user.getFlag(\"dnd5e\", \"creation.scrollExplanation\") ?? \"reference\",\n      level: spell.system.level,\n      values\n    }, config);\n\n    if ( config.dialog !== false ) {\n      const result = await CreateScrollDialog.create(spell, config);\n      if ( !result ) return;\n      foundry.utils.mergeObject(config, result);\n      await game.user.setFlag(\"dnd5e\", \"creation.scrollExplanation\", config.explanation);\n    }\n\n    // Get spell data\n    const itemData = (spell instanceof Item5e) ? spell.toObject() : spell;\n    const flags = itemData.flags ?? {};\n    if ( Number.isNumeric(config.level) ) {\n      flags.dnd5e ??= {};\n      flags.dnd5e.scaling = Math.max(0, config.level - spell.system.level);\n      flags.dnd5e.spellLevel = {\n        value: config.level,\n        base: spell.system.level\n      };\n      itemData.system.level = config.level;\n    }\n\n    /**\n     * A hook event that fires before the item data for a scroll is created.\n     * @function dnd5e.preCreateScrollFromSpell\n     * @memberof hookEvents\n     * @param {object} itemData                  The initial item data of the spell to convert to a scroll.\n     * @param {object} options                   Additional options that modify the created scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     * @returns {boolean}                        Explicitly return false to prevent the scroll to be created.\n     */\n    if ( Hooks.call(\"dnd5e.preCreateScrollFromSpell\", itemData, options, config) === false ) return;\n\n    let { activities, level, properties, source } = itemData.system;\n\n    // Get scroll data\n    let scrollUuid;\n    const id = CONFIG.DND5E.spellScrollIds[level];\n    if ( foundry.data.validators.isValidId(id) ) {\n      scrollUuid = game.packs.get(CONFIG.DND5E.sourcePacks.ITEMS).index.get(id).uuid;\n    } else {\n      scrollUuid = id;\n    }\n    const scrollItem = await fromUuid(scrollUuid);\n    const scrollData = game.items.fromCompendium(scrollItem);\n\n    // Create a composite description from the scroll description and the spell details\n    const desc = this._createScrollDescription(scrollItem, itemData, null, config);\n\n    for ( const level of Array.fromRange(itemData.system.level + 1).reverse() ) {\n      const values = CONFIG.DND5E.spellScrollValues[level];\n      if ( values ) {\n        config.values.bonus ??= values.bonus;\n        config.values.dc ??= values.dc;\n        break;\n      }\n    }\n\n    // Apply inferred spell activation, duration, range, and target data to activities\n    for ( const activity of Object.values(activities) ) {\n      for ( const key of [\"activation\", \"duration\", \"range\", \"target\"] ) {\n        if ( activity[key]?.override !== false ) continue;\n        activity[key].override = true;\n        foundry.utils.mergeObject(activity[key], itemData.system[key]);\n      }\n      activity.consumption.targets.push({ type: \"itemUses\", target: \"\", value: \"1\" });\n      if ( activity.type === \"attack\" ) {\n        activity.attack.flat = true;\n        activity.attack.bonus = values.bonus;\n      } else if ( activity.type === \"save\" ) {\n        activity.save.dc.calculation = \"\";\n        activity.save.dc.formula = values.dc;\n      }\n    }\n\n    // Create the spell scroll data\n    const spellScrollData = foundry.utils.mergeObject(scrollData, {\n      name: `${game.i18n.localize(\"DND5E.SpellScroll\")}: ${itemData.name}`,\n      effects: itemData.effects ?? [],\n      flags,\n      system: {\n        activities, description: { value: desc.trim() }, properties, source\n      }\n    });\n    foundry.utils.mergeObject(spellScrollData, options);\n    spellScrollData.system.properties = [\n      \"mgc\",\n      ...scrollData.system.properties,\n      ...properties ?? [],\n      ...options.system?.properties ?? []\n    ];\n\n    /**\n     * A hook event that fires after the item data for a scroll is created but before the item is returned.\n     * @function dnd5e.createScrollFromSpell\n     * @memberof hookEvents\n     * @param {Item5e|object} spell              The spell or item data to be made into a scroll.\n     * @param {object} spellScrollData           The final item data used to make the scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     */\n    Hooks.callAll(\"dnd5e.createScrollFromSpell\", spell, spellScrollData, config);\n\n    return new this(spellScrollData);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a consumable spell scroll Item from a spell Item.\n   * @param {string} uuid                           UUID of the spell to add to the scroll.\n   * @param {SpellScrollConfiguration} [config={}]  Configuration options for scroll creation.\n   * @returns {Promise<Item5e|void>}                The created scroll consumable item.\n   */\n  static async createScrollFromCompendiumSpell(uuid, config={}) {\n    const spell = await fromUuid(uuid);\n    if ( !spell ) return;\n\n    const values = {};\n\n    config = foundry.utils.mergeObject({\n      explanation: game.user.getFlag(\"dnd5e\", \"creation.scrollExplanation\") ?? \"reference\",\n      level: spell.system.level,\n      values\n    }, config);\n\n    if ( config.dialog !== false ) {\n      const result = await CreateScrollDialog.create(spell, config);\n      if ( !result ) return;\n      foundry.utils.mergeObject(config, result);\n      await game.user.setFlag(\"dnd5e\", \"creation.scrollExplanation\", config.explanation);\n    }\n\n    /**\n     * A hook event that fires before the item data for a scroll is created for a compendium spell.\n     * @function dnd5e.preCreateScrollFromCompendiumSpell\n     * @memberof hookEvents\n     * @param {Item5e} spell                     Spell to add to the scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     * @returns {boolean}                        Explicitly return `false` to prevent the scroll to be created.\n     */\n    if ( Hooks.call(\"dnd5e.preCreateScrollFromCompendiumSpell\", spell, config) === false ) return;\n\n    // Get scroll data\n    let scrollUuid;\n    const id = CONFIG.DND5E.spellScrollIds[spell.system.level];\n    if ( foundry.data.validators.isValidId(id) ) {\n      scrollUuid = game.packs.get(CONFIG.DND5E.sourcePacks.ITEMS).index.get(id).uuid;\n    } else {\n      scrollUuid = id;\n    }\n    const scrollItem = await fromUuid(scrollUuid);\n    const scrollData = game.items.fromCompendium(scrollItem);\n\n    for ( const level of Array.fromRange(spell.system.level + 1).reverse() ) {\n      const values = CONFIG.DND5E.spellScrollValues[level];\n      if ( values ) {\n        config.values.bonus ??= values.bonus;\n        config.values.dc ??= values.dc;\n        break;\n      }\n    }\n\n    const activity = {\n      _id: staticID(\"dnd5escrollspell\"),\n      type: \"cast\",\n      consumption: {\n        targets: [{ type: \"itemUses\", value: \"1\" }]\n      },\n      spell: {\n        challenge: {\n          attack: config.values.bonus,\n          save: config.values.dc,\n          override: true\n        },\n        level: config.level,\n        uuid\n      }\n    };\n\n    // Create the spell scroll data\n    const spellScrollData = foundry.utils.mergeObject(scrollData, {\n      name: `${game.i18n.localize(\"DND5E.SpellScroll\")}: ${spell.name}`,\n      system: {\n        activities: { ...(scrollData.system.activities ?? {}), [activity._id]: activity },\n        description: {\n          value: this._createScrollDescription(scrollItem, spell, `<p>@Embed[${uuid} inline]</p>`, config).trim()\n        }\n      }\n    });\n\n    /**\n     * A hook event that fires after the item data for a scroll is created but before the item is returned.\n     * @function dnd5e.createScrollFromSpell\n     * @memberof hookEvents\n     * @param {Item5e} spell                     The spell or item data to be made into a scroll.\n     * @param {object} spellScrollData           The final item data used to make the scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     */\n    Hooks.callAll(\"dnd5e.createScrollFromSpell\", spell, spellScrollData, config);\n\n    return new this(spellScrollData);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create the description for a spell scroll.\n   * @param {Item5e} scroll                         Base spell scroll.\n   * @param {Item5e|object} spell                   Spell being added to the scroll.\n   * @param {string} [spellDescription]             Description from the spell being added.\n   * @param {SpellScrollConfiguration} [config={}]  Configuration options for scroll creation.\n   * @returns {string}\n   * @protected\n   */\n  static _createScrollDescription(scroll, spell, spellDescription, config={}) {\n    spellDescription ??= spell.system.description.value;\n    const isConc = spell.system.properties[spell instanceof Item5e ? \"has\" : \"includes\"](\"concentration\");\n    const level = spell.system.level;\n    switch ( config.explanation ) {\n      case \"full\":\n        // Split the scroll description into an intro paragraph and the remaining details\n        const scrollDescription = scroll.system.description.value;\n        const pdel = \"</p>\";\n        const scrollIntroEnd = scrollDescription.indexOf(pdel);\n        const scrollIntro = scrollDescription.slice(0, scrollIntroEnd + pdel.length);\n        const scrollDetails = scrollDescription.slice(scrollIntroEnd + pdel.length);\n        return [\n          scrollIntro,\n          `<h3>${spell.name} (${game.i18n.format(\"DND5E.LevelNumber\", { level })})</h3>`,\n          isConc ? `<p><em>${game.i18n.localize(\"DND5E.Scroll.RequiresConcentration\")}</em></p>` : null,\n          spellDescription,\n          `<h3>${game.i18n.localize(\"DND5E.Scroll.Details\")}</h3>`,\n          scrollDetails\n        ].filterJoin(\"\");\n      case \"reference\":\n        return [\n          \"<p><em>\",\n          CONFIG.DND5E.spellLevels[level] ?? level,\n          \" &Reference[Spell Scroll]\",\n          isConc ? `, ${game.i18n.localize(\"DND5E.Scroll.RequiresConcentration\")}` : null,\n          \"</em></p>\",\n          spellDescription\n        ].filterJoin(\"\");\n    }\n    return spellDescription;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Spawn a dialog for creating a new Item.\n   * @param {object} [data]  Data to pre-populate the Item with.\n   * @param {object} [context]\n   * @param {Actor5e} [context.parent]       A parent for the Item.\n   * @param {string|null} [context.pack]     A compendium pack the Item should be placed in.\n   * @param {string[]|null} [context.types]  A list of types to restrict the choices to, or null for no restriction.\n   * @returns {Promise<Item5e|null>}\n   */\n  static async createDialog(data={}, { parent=null, pack=null, types=null, ...options }={}) {\n    types ??= game.documentTypes[this.documentName].filter(t => (t !== CONST.BASE_DOCUMENT_TYPE) && (t !== \"backpack\"));\n    if ( !types.length ) return null;\n    const collection = parent ? null : pack ? game.packs.get(pack) : game.collections.get(this.documentName);\n    const folders = collection?._formatFolderSelectOptions() ?? [];\n    const label = game.i18n.localize(this.metadata.label);\n    const title = game.i18n.format(\"DOCUMENT.Create\", { type: label });\n    const name = data.name || game.i18n.format(\"DOCUMENT.New\", { type: label });\n    let type = data.type || CONFIG[this.documentName]?.defaultType;\n    const content = await foundry.applications.handlebars.renderTemplate(\n      \"systems/dnd5e/templates/apps/document-create.hbs\",\n      {\n        folders, name, type,\n        folder: data.folder,\n        hasFolders: folders.length > 0,\n        types: types.map(type => {\n          const label = CONFIG[this.documentName]?.typeLabels?.[type] ?? type;\n          const data = {\n            type,\n            label: game.i18n.has(label) ? game.i18n.localize(label) : type,\n            icon: this.getDefaultArtwork({ type })?.img ?? \"icons/svg/item-bag.svg\"\n          };\n          data.svg = data.icon?.endsWith(\".svg\");\n          return data;\n        }).sort((a, b) => a.label.localeCompare(b.label, game.i18n.lang))\n      }\n    );\n    return Dialog.prompt({\n      title, content,\n      label: title,\n      render: html => {\n        const app = html.closest(\".app\");\n        const folder = app.querySelector(\"select\");\n        if ( folder ) app.querySelector(\".dialog-buttons\").insertAdjacentElement(\"afterbegin\", folder);\n        app.querySelectorAll(\".window-header .header-button\").forEach(btn => {\n          const label = btn.innerText;\n          const icon = btn.querySelector(\"i\");\n          btn.innerHTML = icon.outerHTML;\n          btn.dataset.tooltip = label;\n          btn.setAttribute(\"aria-label\", label);\n        });\n        app.querySelector(\".document-name\").select();\n      },\n      callback: html => {\n        const form = html.querySelector(\"form\");\n        const fd = new foundry.applications.ux.FormDataExtended(form);\n        const createData = foundry.utils.mergeObject(data, fd.object, { inplace: false });\n        if ( !createData.folder ) delete createData.folder;\n        if ( !createData.name?.trim() ) createData.name = this.defaultName();\n        return this.create(createData, { parent, pack, renderSheet: true });\n      },\n      rejectClose: false,\n      options: { ...options, jQuery: false, width: 350, classes: [\"dnd5e2\", \"create-document\", \"dialog\"] }\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static getDefaultArtwork(itemData={}) {\n    const { type } = itemData;\n    const { img } = super.getDefaultArtwork(itemData);\n    return { img: CONFIG.DND5E.defaultArtwork.Item[type] ?? img };\n  }\n\n  /* -------------------------------------------- */\n  /*  Migrations & Deprecations                   */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static migrateData(source) {\n    source = super.migrateData(source);\n    ActivitiesTemplate.initializeActivities(source);\n    if ( source.type === \"class\" ) ClassData._migrateTraitAdvancement(source);\n    else if ( source.type === \"container\" ) ContainerData._migrateWeightlessData(source);\n    else if ( source.type === \"equipment\" ) EquipmentData._migrateStealth(source);\n    else if ( source.type === \"spell\" ) SpellData._migrateComponentData(source);\n    return source;\n  }\n}\n"
    }
  },
  "itemgrant_analysis": {
    "uuid_patterns": [],
    "reference_formats": [],
    "item_structures": {
      "lang/en.json": {
        "DOCUMENT.DND5E": {
          "Activity": "Activity",
          "Advancement": "Advancement",
          "Warning": {
            "SelectType": "{name} type must be selected for creation."
          }
        },
        "TYPES.Actor.character": "Player Character",
        "TYPES.Actor.characterPl": "Player Characters",
        "TYPES.Actor.encounter": "Encounter",
        "TYPES.Actor.encounterPl": "Encounters",
        "TYPES.Actor.group": "Group",
        "TYPES.Actor.groupPl": "Groups",
        "TYPES.Actor.npc": "Non-Player Character",
        "TYPES.Actor.npcPl": "Non-Player Characters",
        "TYPES.Actor.vehicle": "Vehicle",
        "TYPES.Actor.vehiclePl": "Vehicles",
        "TYPES.ActiveEffect.enchantment": "Enchantment",
        "TYPES.ActiveEffect.enchantmentPl": "Enchantments",
        "TYPES.ChatMessage": {
          "request": "Request Message",
          "rest": "Rest Message",
          "turn": "Combat Turn Message"
        },
        "TYPES.Item.background": "Background",
        "TYPES.Item.backgroundPl": "Backgrounds",
        "TYPES.Item.container": "Container",
        "TYPES.Item.containerPl": "Containers",
        "TYPES.Item.class": "Class",
        "TYPES.Item.classPl": "Classes",
        "TYPES.Item.consumable": "Consumable",
        "TYPES.Item.consumablePl": "Consumables",
        "TYPES.Item.equipment": "Equipment",
        "TYPES.Item.equipmentPl": "Equipment",
        "TYPES.Item.facility": "Facility",
        "TYPES.Item.facilityPl": "Facilities",
        "TYPES.Item.feat": "Feature",
        "TYPES.Item.featurePl": "Features",
        "TYPES.Item.loot": "Loot",
        "TYPES.Item.lootPl": "Loot",
        "TYPES.Item.race": "Species",
        "TYPES.Item.racePl": "Species",
        "TYPES.Item.raceLegacy": "Race",
        "TYPES.Item.raceLegacyPl": "Races",
        "TYPES.Item.spell": "Spell",
        "TYPES.Item.spellPl": "Spells",
        "TYPES.Item.subclass": "Subclass",
        "TYPES.Item.subclassPl": "Subclasses",
        "TYPES.Item.tool": "Tool",
        "TYPES.Item.toolPl": "Tools",
        "TYPES.Item.weapon": "Weapon",
        "TYPES.Item.weaponPl": "Weapons",
        "TYPES.RegionBehavior": {
          "dnd5e.difficultTerrain": "Difficult Terrain",
          "dnd5e.rotateArea": "Rotate Area"
        },
        "DND5E.title": "Dungeon & Dragons Fifth Edition",
        "DND5E.AbbreviationCR": "CR",
        "DND5E.AbbreviationConc": "Conc.",
        "DND5E.AbbreviationDC": "DC",
        "DND5E.AbbreviationKg": "kg",
        "DND5E.AbbreviationLR": "LR",
        "DND5E.AbbreviationLevel": "Lvl",
        "DND5E.AbbreviationLbs": "lbs.",
        "DND5E.AbbreviationSR": "SR",
        "DND5E.ABILITY": {
          "Configure": {
            "CheckLabel": "{ability} Check",
            "SaveLabel": "{ability} Save",
            "Title": "Configure {ability}"
          },
          "SECTIONS": {
            "Bonuses": {
              "Label": "{ability} Bonuses",
              "Hint": "These bonuses apply to checks & saves made with {ability}."
            },
            "Global": {
              "Label": "Global Bonuses",
              "Hint": "These bonuses apply to checks & saves made with any ability."
            },
            "Score": "{ability} Score"
          }
        },
        "DND5E.Ability": "Ability",
        "DND5E.Abilities": "Abilities",
        "DND5E.AbilityStr": "Strength",
        "DND5E.AbilityStrAbbr": "str",
        "DND5E.AbilityCon": "Constitution",
        "DND5E.AbilityConAbbr": "con",
        "DND5E.AbilityDex": "Dexterity",
        "DND5E.AbilityDexAbbr": "dex",
        "DND5E.AbilityInt": "Intelligence",
        "DND5E.AbilityIntAbbr": "int",
        "DND5E.AbilityWis": "Wisdom",
        "DND5E.AbilityWisAbbr": "wis",
        "DND5E.AbilityCha": "Charisma",
        "DND5E.AbilityChaAbbr": "cha",
        "DND5E.AbilityHon": "Honor",
        "DND5E.AbilityHonAbbr": "hon",
        "DND5E.AbilitySan": "Sanity",
        "DND5E.AbilitySanAbbr": "san",
        "DND5E.AbilityScore": "Ability Score",
        "DND5E.AbilityScoreShort": "Score",
        "DND5E.AbilityScorePl": "Ability Scores",
        "DND5E.AbilityScoreL": "{ability} Score",
        "DND5E.AbilityScoreMax": "Maximum Ability Score",
        "DND5E.AbilityScoreMaxShort": "Maximum",
        "DND5E.AbilityModifier": "Ability Modifier",
        "DND5E.AbilityModifierShort": "Mod",
        "DND5E.AbilityPromptText": "What type of {ability} check?",
        "DND5E.AbilityPromptTitle": "{ability} Ability Check",
        "DND5E.AbilityUseChargesLabel": "{value} Charges",
        "DND5E.AbilityUseConsumableLabel": "{max} per {per}",
        "DND5E.AbilityUseCast": "Cast Spell",
        "DND5E.AbilityUseUse": "Use Ability",
        "DND5E.AbilityUseConfig": "Usage Configuration",
        "DND5E.AbilityBonuses": "Ability Bonuses",
        "DND5E.AbilityConfigure": "Configure {ability}",
        "DND5E.AbilityConfigureTitle": "Configure {ability} Saving Throws and Checks",
        "DND5E.AbilitySaveConfigure": "{ability} Saving Throws",
        "DND5E.AbilityCheckConfigure": "{ability} Ability Checks",
        "DND5E.AbilityCheckConfigurationHint": "Configure check bonuses.",
        "DND5E.AbilityConfigurationHint": "Configure ability saving throw proficiency, saving throw bonuses, and check bonuses.",
        "DND5E.AbilityCheckBonus": "Check Bonus",
        "DND5E.AbilityCheckGlobalBonusHint": "This bonus applies to all ability checks made by this actor.",
        "DND5E.Action": "Action",
        "DND5E.ActionAbbr": "A",
        "DND5E.ActionPl": "Actions",
        "DND5E.ActionAbil": "Ability Check",
        "DND5E.ActionEnch": "Enchant",
        "DND5E.ActionHeal": "Heal",
        "DND5E.ActionMSAK": "Melee Spell Attack",
        "DND5E.ActionMWAK": "Melee Weapon Attack",
        "DND5E.ActionOther": "Other",
        "DND5E.ActionRSAK": "Ranged Spell Attack",
        "DND5E.ActionRWAK": "Ranged Weapon Attack",
        "DND5E.ActionSave": "Saving Throw",
        "DND5E.ActionSumm": "Summon",
        "DND5E.ActionUtil": "Utility",
        "DND5E.ActionWarningNoItem": "The requested item {item} no longer exists on Actor {name}",
        "DND5E.ActionWarningNoToken": "You must have one or more controlled Tokens in order to use this option.",
        "DND5E.ACTIVATION": {
          "FIELDS": {
            "activation": {
              "label": "Activation",
              "condition": {
                "label": "Activation Condition",
                "hint": "Condition required to activate this activity."
              },
              "override": {
                "label": "Override Activation",
                "hint": "Use these activation values instead of the item's when using this activity."
              },
              "type": {
                "label": "Activation Cost",
                "hint": "Activation type (e.g. action, legendary action, minutes)."
              },
              "value": {
                "label": "Activation Value",
                "hint": "Scalar value associated with the activation."
              }
            }
          },
          "Category": {
            "Combat": "Combat",
            "Monster": "Monster",
            "Rest": "Rest",
            "Standard": "Standard",
            "Time": "Time",
            "Vehicle": "Vehicle"
          },
          "Type": {
            "Action": {
              "Header": "Actions",
              "Label": "Action"
            },
            "BonusAction": {
              "Header": "Bonus Actions",
              "Label": "Bonus Action"
            },
            "Crew": {
              "Header": "Crew Actions",
              "Label": "Crew Action"
            },
            "Day": {
              "Header": "Days",
              "Label": "Day"
            },
            "Encounter": {
              "Label": "Start of Encounter"
            },
            "Hour": {
              "Header": "Hours",
              "Label": "Hour"
            },
            "Lair": {
              "Header": "Lair Actions",
              "Label": "Lair Action"
            },
            "Legendary": {
              "Counted": {
                "one": "{number} legendary action",
                "other": "{number} legendary actions"
              },
              "Header": "Legendary Actions",
              "Label": "Legendary Action"
            },
            "LongRest": {
              "Label": "End of a Long Rest"
            },
            "Minute": {
              "Header": "Minutes",
              "Label": "Minute"
            },
            "Mythic": {
              "Header": "Mythic Actions",
              "Label": "Mythic Action"
            },
            "Reaction": {
              "Header": "Reactions",
              "Label": "Reaction"
            },
            "ShortRest": {
              "Label": "End of a Short Rest"
            },
            "TurnEnd": {
              "Label": "End of Turn"
            },
            "TurnStart": {
              "Label": "Start of Turn"
            }
          },
          "Warning": {
            "NoActions": "No {type} are available, but activating this requires at least {required}.",
            "NotEnoughActions": "Not enough {type} to activate, {required} required but only {available} available."
          }
        },
        "DND5E.ACTIVEEFFECT": {
          "AttributeKeyTooltip": "For a list of common keys, see <a href=\"{url}\">the wiki</a>.",
          "FIELDS": {
            "statuses": {
              "label": "Status Conditions",
              "hint": "While affected by this Active Effect, the target will be treated as having these additional status conditions."
            }
          }
        },
        "DND5E.ACTIVITY": {
          "Action": {
            "Create": "Create Activity",
            "Delete": "Delete Activity"
          },
          "Title": {
            "one": "Activity",
            "other": "Activities"
          },
          "FIELDS": {
            "description": {
              "label": "Description",
              "chatFlavor": {
                "label": "Chat Flavor",
                "hint": "Additional text displayed in the activation chat message."
              }
            },
            "effects": {
              "label": "Applied Effects"
            },
            "img": {
              "label": "Icon"
            },
            "name": {
              "label": "Name"
            }
          },
          "SECTIONS": {
            "Activation": "Activation",
            "Behavior": "Behavior",
            "Effect": "Effect",
            "Identity": "Identity",
            "Time": "Time"
          },
          "Warning": {
            "UsageNotAllowed": "Using this activity isn't currently possible."
          }
        },
        "DND5E.ACTOR": {
          "Warning": {
            "CreateActor": "You must have 'Create New Actors' permission in order to summon directly from a compendium.",
            "InvalidItem": "{itemType} items cannot be added to a {actorType}.",
            "NoActor": "Actor cannot be found with UUID '{uuid}' to summon.",
            "Singleton": "Only a single {itemType} can be added to a {actorType}."
          }
        },
        "DND5E.ActiveEffectOverrideWarning": "This value is being modified by an Active Effect and cannot be edited. Disable the effect to edit it.",
        "DND5E.Add": "Add",
        "DND5E.AdditionalControls": "Additional Controls",
        "DND5E.AdditionalSettings": "Additional Settings",
        "DND5E.AddEmbeddedItemPromptHint": "Do you want to add these items to your character sheet?",
        "DND5E.Advanced": "Advanced",
        "DND5E.ADVANCEMENT": {
          "AbilityScoreImprovement": {
            "Action": {
              "Select": "Select Feat"
            },
            "CapDisplay": {
              "one": "Max {points} point per score",
              "other": "Max {points} points per score"
            },
            "Details": "Improvement Details",
            "Feat": {
              "ASIName": "Ability Score Improvement Feat",
              "Hint": "Drop a feat here to choose one instead of an ability score improvement."
            },
            "FIELDS": {
              "cap": {
                "hint": "Maximum number of points a player can assign to a single score.",
                "label": "Point Cap"
              },
              "fixed": {
                "hint": "Abilities that are improved by a fixed amount and cannot be manually improved during the process.",
                "label": "Fixed Improvement"
              },
              "locked": {
                "hint": "Ability cannot be improved.",
                "label": "Locked",
                "locked": "Ability cannot be improved.",
                "unlocked": "Ability may be improved."
              },
              "max": {
                "hint": "Increase the maximum score from what is allowed on the actor.",
                "label": "Maximum"
              },
              "points": {
                "decrease": "Decrease Points",
                "hint": "Number of points that can be assigned to any unlocked ability score.",
                "increase": "Increase Points",
                "label": "Points"
              },
              "recommendation": {
                "hint": "Epic Boon feat recommended by this class.",
                "label": "Recommendation"
              }
            },
            "Hint": "Allow the player to increase one or more ability scores or take an optional feat.",
            "Journal": {
              "DescriptionEpic": "<p>You gain an Epic Boon feat or another feat of your choice for which you qualify. {recommendation} is recommended.</p>",
              "DescriptionLegacy": "<p>When you reach {firstLevelOrdinal} level, and again at {otherLevelsOrdinal} level, you can increase one ability score of your choice by 2, or you can increase two ability scores of your choice by 1. As normal, you can\u2019t increase an ability score above {maxAbilityScore} using this feature.</p><p>Using the optional feats rule, you can forgo taking this feature to take a feat of your choice instead.</p>",
              "DescriptionModern": "<p>You gain the Ability Score Improvement feat or another feat of your choice for which you qualify. You gain this feature again at {class} levels {otherLevels}.</p>",
              "Name": "Ability Score Improvement"
            },
            "LockedHint": "Scores cannot be modified with a feat selected.",
            "PointsRemaining": {
              "one": "{points} Point Remaining",
              "other": "{points} Points Remaining"
            },
            "Title": "Ability Score Improvement",
            "TitleEpic": "Epic Boon",
            "Warning": {
              "Type": "Only features with the \"feat\" type can be selected."
            }
          },
          "Action": {
            "Create": "Create Advancement",
            "Delete": "Delete Advancement",
            "Duplicate": "Duplicate Advancement",
            "Edit": "Edit Advancement",
            "View": "View Advancement"
          },
          "Config": {
            "AnyLevel": "Any",
            "Details": "Advancement Details"
          },
          "Defaults": {
            "BackgroundFeat": "Background Feat",
            "BackgroundFeature": "Background Feature",
            "BackgroundProficiencies": "Background Proficiencies",
            "ChooseLanguages": "Choose Languages"
          },
          "HitPoints": {
            "Action": {
              "Roll": "Roll {die}"
            },
            "Average": "Average",
            "Hint": "Track the player's hit points for each level in the class.",
            "MaxAtFirstLevel": "Max at 1st Level: <strong>{max}</strong>",
            "Roll": "Roll {class} Hit Points",
            "Starting": "Hit Points at 1st Level",
            "TakeAverage": "Take Average",
            "Title": "Hit Points",
            "Warning": {
              "Empty": "Hit points must be rolled or the average value must be taken.",
              "Invalid": "Hit points must be a valid whole number."
            }
          },
          "ItemChoice": {
            "Action": {
              "SelectGeneric": "Select Item",
              "SelectSpecific": "Select {type}"
            },
            "Choose": "choose {count}",
            "Chosen": "Chosen: {current} of {max}",
            "Details": "Choice Details",
            "DropHint": "Drop Items here to add them to the list that can be chosen with this advancement.",
            "FIELDS": {
              "allowDrops": {
                "hint": "Allow players to be able to drop their own choices into this advancement.",
                "label": "Allow Drops"
              },
              "choices": {
                "hint": "Specify how many choices are allowed at each level.",
                "label": "Choices",
                "FIELDS": {
                  "count": {
                    "label": "Count"
                  },
                  "replacement": {
                    "label": "Allow Replacement"
                  }
                }
              },
              "pool": {
                "label": "Item Options"
              },
              "restriction": {
                "level": {
                  "Available": "Any Available Level",
                  "hint": "Only allow choices from spells of this level.",
                  "label": "Spell Level"
                },
                "list": {
                  "hint": "Only allow spells from these lists.",
                  "label": "Spell Lists"
                },
                "subtype": {
                  "label": "Subtype"
                },
                "type": {
                  "label": "Type"
                }
              },
              "type": {
                "Any": "Anything",
                "hint": "Restrict what Item types can be chosen.",
                "label": "Item Type"
              }
            },
            "Hint": "Present the player with a choice of items (such as equipment, features, or spells) that they can choose for their character at one or more levels.",
            "Replacement": {
              "None": "No Replacement",
              "Title": "replace"
            },
            "Title": "Choose Items",
            "Warning": {
              "InvalidType": "Only {type} items can be selected for this choice.",
              "MaxSelected": "No additional items can be selected, uncheck items before selecting more.",
              "NoOriginal": "Previously selected choice no longer available for replacement.",
              "SpellLevelAvailable": "Only {level} or lower spells can be chosen for this advancement.",
              "SpellLevelSpecific": "Only {level} spells can be chosen for this advancement.",
              "SpellList": "Only spells available on the {lists} spell list can be chosen for this advancement."
            }
          },
          "ItemGrant": {
            "Details": "Grant Details",
            "DropHint": "Drop Items here to add them to the list granted by this advancement.",
            "FIELDS": {
              "items": {
                "label": "Items"
              },
              "optional": {
                "label": "Optional",
                "hint": "If the whole advancement is marked optional, players may opt out of any of the following items, otherwise all non-optional items are granted."
              }
            },
            "Hint": "Grant the character items (such as equipment, features, or spells) when they reach a certain level.",
            "Title": "Grant Items",
            "Warning": {
              "Container": "Container contents will not be added with containers.",
              "Duplicate": "That item already exists on this advancement.",
              "Recursive": "You cannot grant an item in its own advancement."
            }
          },
          "Manager": {
            "Action": {
              "Complete": "Complete",
              "NextStep": "Next",
              "PreviousStep": "Previous",
              "Restart": "Restart"
            },
            "ClosePrompt": {
              "Action": {
                "Continue": "Continue",
                "Stop": "Stop Advancement"
              },
              "Message": "<p>If the advancement process is cancelled, choices made so far will be discarded and no changes will be made to the actor.</p>",
              "Title": "Stop Advancement"
            },
            "RestartPrompt": {
              "Message": "Are you sure you wish to undo all choices so far?",
              "Title": "Restart Advancement Choices"
            },
            "Steps": "Step {current} of {total}",
            "Title": {
              "Default": "Advancement",
              "LevelIncreased": "Level Up Character",
              "LevelNewClass": "Add Class",
              "ModifyChoices": "Modify Choices"
            }
          },
          "Migration": {
            "Action": {
              "Confirm": "Apply Migrations"
            },
            "Hint": "Select which of the following advancements will be added to {name}.",
            "Selection": "Advancement Selection",
            "Title": "Migrate Advancement"
          },
          "ScaleValue": {
            "Action": {
              "CopyFormula": "Copy Formula"
            },
            "Details": "Scale Value Details",
            "FIELDS": {
              "distance": {
                "units": {
                  "label": "Distance Units"
                }
              },
              "identifier": {
                "label": "Identifier"
              },
              "scale": {
                "label": "Scale"
              },
              "type": {
                "label": "Scale Type"
              }
            },
            "Hint": "A single value that changes as a class increases in level that is made available in roll formulas (such as a Monk's martial arts die).",
            "Title": "Scale Value",
            "Type": {
              "CR": {
                "FIELDS": {
                  "value": {
                    "label": "CR"
                  }
                },
                "Hint": "Use this for representing creature challenge ratings for features like Wild Shape",
                "Label": "Challenge Rating"
              },
              "Dice": {
                "FIELDS": {
                  "faces": {
                    "label": "Faces"
                  },
                  "number": {
                    "label": "Number"
                  }
                },
                "Hint": "Use this for dice values like bardic inspiration, sneak attack, or superiority dice.",
                "Identifier": "This scale value for the current level will be available in a formula using:<br><copyable-text>@scale.{class}.{identifier}</copyable-text> - whole formula (<code>4d6</code>)<br><copyable-text>@scale.{class}.{identifier}.die</copyable-text> - whole die (<code>d6</code>)<br><copyable-text>@scale.{class}.{identifier}.number</copyable-text> - number of dice (<code>4</code>)<br><copyable-text>@scale.{class}.{identifier}.faces</copyable-text> - number of faces (<code>6</code>)",
                "Label": "Dice"
              },
              "Distance": {
                "Hint": "Use this for numerical values that represent a distance, such as unarmored movement speed, or aura of protection radius.",
                "Label": "Distance"
              },
              "Number": {
                "Hint": "Use this for purely numerical values like rage damage bonus or number of uses per day.",
                "Label": "Numeric"
              },
              "String": {
                "FIELDS": {
                  "value": {
                    "label": "Value"
                  }
                },
                "Hint": "Use this if you are unsure of the type of the scale values, or if the type does not matter.",
                "Identifier": "This scale value for the current level will be available in a formula using:<br><copyable-text>@scale.{class}.{identifier}</copyable-text>",
                "Label": "Anything"
              }
            }
          },
          "Size": {
            "DefaultHint": {
              "Multiple": "Choose your size from either {sizes}.",
              "Single": "Your size is {size}."
            },
            "FIELDS": {
              "sizes": {
                "label": "Sizes"
              }
            },
            "Hint": "Set a character's size.",
            "Title": "Size"
          },
          "SPELLCONFIG": {
            "FIELDS": {
              "spell": {
                "label": "Spell Details",
                "ability": {
                  "label": "Ability"
                },
                "method": {
                  "label": "Spellcasting Method"
                },
                "prepared": {
                  "label": "Preparation"
                },
                "uses": {
                  "max": {
                    "label": "Uses"
                  },
                  "per": {
                    "label": "Period"
                  },
                  "requireSlot": {
                    "label": "Require Slot",
                    "hint": "Require a spell slot to be spent when using the limited uses. If not checked then the uses will be additional free uses that don't consume a slot."
                  }
                }
              }
            },
            "FreeCasting": "Free Casting"
          },
          "Subclass": {
            "Action": {
              "Select": "Select Subclass"
            },
            "Hint": "Specify what level this class receives its subclass.",
            "Title": "Subclass",
            "Warning": {
              "InvalidType": "Only subclasses may be selected."
            }
          },
          "Trait": {
            "Action": {
              "AddChoice": "Add Choice",
              "RemoveChoice": "Remove Choice"
            },
            "ChoicesRemaining": "Select {count} more {type}",
            "Details": "Trait Details",
            "FIELDS": {
              "allowReplacements": {
                "hint": "If a trait is already set on the actor, allow the player to choose from any other trait as a replacement.",
                "label": "Allow Replacements"
              },
              "choices": {
                "hint": "The following traits will be presented as a choice to the player.",
                "label": "Choices",
                "FIELDS": {
                  "count": {
                    "label": "Count"
                  },
                  "pool": {
                    "label": "Traits"
                  }
                }
              },
              "grants": {
                "hint": "The following traits will be granted to the character as long as they don't already possess that trait.",
                "label": "Guaranteed"
              },
              "mode": {
                "label": "Mode"
              }
            },
            "Hint": "Grant a character certain traits or give them an option to select traits (such as proficiencies, skills, languages).",
            "Mode": {
              "Default": {
                "Hint": "Gain a trait or proficiency.",
                "Label": "Default"
              },
              "Expertise": {
                "Hint": "Gain expertise in a trait in which you already have proficiency.",
                "Label": "Expertise"
              },
              "Force": {
                "Hint": "Gain expertise in a trait regardless of your previous proficiency level.",
                "Label": "Forced Expertise"
              },
              "Mastery": {
                "Hint": "Gain mastery with a weapon in which you already have proficiency.",
                "Label": "Mastery"
              },
              "Upgrade": {
                "Hint": "Gain proficiency in a trait unless you already have it, otherwise gain expertise.",
                "Label": "Upgrade"
              }
            },
            "TraitType": "Trait Type",
            "Title": "Traits"
          }
        },
        "DND5E.AdvancementChoices": "choices",
        "DND5E.AdvancementClassRestriction": "Class Restriction",
        "DND5E.AdvancementClassRestrictionNone": "All Classes",
        "DND5E.AdvancementClassRestrictionPrimary": "Original Class Only",
        "DND5E.AdvancementClassRestrictionSecondary": "Multiclass Only",
        "DND5E.AdvancementConfigurationActionDisable": "Disable Configuration",
        "DND5E.AdvancementConfigurationActionEnable": "Enable Configuration",
        "DND5E.AdvancementConfigurationModeDisabled": "Configuration Disabled",
        "DND5E.AdvancementConfigurationModeEnabled": "Configuration Enabled",
        "DND5E.AdvancementConfigureTitle": "Configure {item} Advancement",
        "DND5E.AdvancementConfigureAllowDrops": "Allow Drops",
        "DND5E.AdvancementConfigureAllowDropsHint": "Should players be able to drop their own choices into this advancement?",
        "DND5E.AdvancementConfigureDropAreaHint": "Drop Items here to add them to the pool from which a player can choose.",
        "DND5E.AdvancementConfiguredComplete": "Fully Configured",
        "DND5E.AdvancementConfiguredIncomplete": "Not Configured",
        "DND5E.AdvancementCustomIcon": "Custom Icon",
        "DND5E.AdvancementCustomTitle": "Custom Title",
        "DND5E.AdvancementDeleteConfirmationLabel": "Remove advancement changes",
        "DND5E.AdvancementDeleteConfirmationMessage": "Deleting this item will also delete all advancement choices made for it. These changes will be removed from your character as long as the checkbox below is checked.",
        "DND5E.AdvancementDeleteConfirmationTitle": "Confirm Deletion",
        "DND5E.AdvancementFlowDropAreaHint": "Drop an Item here to choose it.",
        "DND5E.AdvancementHint": "Hint",
        "DND5E.AdvancementItemTypeInvalidWarning": "{type} items cannot be added with this advancement type.",
        "DND5E.AdvancementLevelHeader": "Level {level}",
        "DND5E.AdvancementLevelAnyHeader": "Any Level",
        "DND5E.AdvancementLevelNoneHeader": "No Level",
        "DND5E.AdvancementLevelDownConfirmationMessage": "Leveling this class down will also undo all advancement choices made for it. These changes will be removed from your character as long as the checkbox below is checked.",
        "DND5E.AdvancementLevelDownConfirmationTitle": "Confirm Leveling Down",
        "DND5E.AdvancementModifyChoices": "Modify Choices",
        "DND5E.AdvancementSaveButton": "Save Advancement",
        "DND5E.AdvancementSelectionCreateButton": "Create Advancement",
        "DND5E.AdvancementSelectionTitle": "Select Advancement Type",
        "DND5E.AdvancementTitle": "Advancement",
        "DND5E.Advantage": "Advantage",
        "DND5E.AdvantageMode": "Advantage Mode",
        "DND5E.Age": "Age",
        "DND5E.Alignment": "Alignment",
        "DND5E.AlignmentCE": "Chaotic Evil",
        "DND5E.AlignmentCG": "Chaotic Good",
        "DND5E.AlignmentCN": "Chaotic Neutral",
        "DND5E.AlignmentLE": "Lawful Evil",
        "DND5E.AlignmentLG": "Lawful Good",
        "DND5E.AlignmentLN": "Lawful Neutral",
        "DND5E.AlignmentNE": "Neutral Evil",
        "DND5E.AlignmentNG": "Neutral Good",
        "DND5E.AlignmentTN": "True Neutral",
        "DND5E.Amount": "Amount",
        "DND5E.Appearance": "Appearance",
        "DND5E.Apply": "Apply",
        "DND5E.Attunement": "Attunement",
        "DND5E.AttunementMax": "Maximum Attuned Items",
        "DND5E.AttunementNone": "Attunement Not Required",
        "DND5E.AttunementOptional": "Optional Attunement",
        "DND5E.AttunementRequired": "Attunement Required",
        "DND5E.AttunementAttuned": "Attuned",
        "DND5E.AttunementOverride": "Override attunement",
        "DND5E.Attuned": "Attuned",
        "DND5E.AreaOfEffect": {
          "Label": "Area of Effect",
          "Size": {
            "Label": "Size",
            "Height": "Height",
            "Length": "Length",
            "Radius": "Radius",
            "Thickness": "Thickness",
            "Width": "Width"
          }
        },
        "DND5E.Armor": "Armor",
        "DND5E.ArmorClass": "Armor Class",
        "DND5E.ArmorClassEquipment": "Equipped Armor",
        "DND5E.ArmorClassFlat": "Flat",
        "DND5E.ArmorClassUnarmored": "Unarmored",
        "DND5E.ArmorClassNatural": "Natural Armor",
        "DND5E.ArmorClassMage": "Mage Armor",
        "DND5E.ArmorClassMotionless": "Armor Class while Motionless",
        "DND5E.ArmorClassDraconic": "Draconic Resilience",
        "DND5E.ArmorClassUnarmoredMonk": "Unarmored Defense (Monk)",
        "DND5E.ArmorClassUnarmoredBarbarian": "Unarmored Defense (Barbarian)",
        "DND5E.ArmorClassUnarmoredBard": "Unarmored Defense (Bard)",
        "DND5E.ArmorClassCustom": "Custom Formula",
        "DND5E.ArmorConfig": "Configure Armor",
        "DND5E.ArmorConfigHint": "Fill in the above box to override automatically calculated armor class.",
        "DND5E.ArmorClassCalculation": "Calculation",
        "DND5E.ArmorClassFormula": "Formula",
        "DND5E.ArmorHeavyProficiency": "Heavy",
        "DND5E.ArmorLightProficiency": "Light",
        "DND5E.ArmorMediumProficiency": "Medium",
        "DND5E.ArmorValue": "Armor Value",
        "DND5E.AC": "AC",
        "DND5E.ATTACK": {
          "Title": {
            "one": "Attack",
            "other": "Attacks"
          },
          "FIELDS": {
            "attack": {
              "label": "Attack Details",
              "ability": {
                "label": "Attack Ability",
                "hint": "Ability used for make the attack and determine damage. Available using @mod in formulas."
              },
              "bonus": {
                "label": "To Hit Bonus",
                "hint": "Bonus added to the to hit roll for the attack."
              },
              "critical": {
                "threshold": {
                  "label": "Critical Threshold",
                  "hint": "Minimum value on the D20 needed to roll a critical hit."
                }
              },
              "flat": {
                "label": "Flat To Hit",
                "hint": "Ignore the ability modifier, proficiency, and any other bonuses from the actor and only use the bonus defined by the activity when calculating to hit."
              },
              "type": {
                "label": "Attack Type",
                "value": {
                  "label": "Attack Type",
                  "hint": "Is this a melee or ranged attack?"
                },
                "classification": {
                  "label": "Attack Classification",
                  "hint": "Is this an unarmed, weapon, or spell attack?"
                }
              }
            },
            "damage": {
              "label": "Attack Damage",
              "critical": {
                "bonus": {
                  "label": "Extra Critical Damage",
                  "hint": "Extra damage applied when a critical is rolled. Added to the base damage or first damage part."
                }
              },
              "includeBase": {
                "label": "Include Base Damage",
                "hint": "Include the item's base damage with any additional damage parts."
              },
              "parts": {
                "label": "Damage Parts",
                "hint": "Individual damage parts to include with the roll."
              }
            }
          },
          "Attack": {
            "mwak": "Melee Attack",
            "rwak": "Ranged Attack"
          },
          "Classification": {
            "Spell": "Spell",
            "Unarmed": "Unarmed",
            "Weapon": "Weapon"
          },
          "Formatted": {
            "2014": "{type} {classification} Attack",
            "2024": "{type} Attack Roll"
          },
          "Mode": {
            "Label": "Attack Mode",
            "Offhand": "Offhand",
            "OneHanded": "One-Handed",
            "Ranged": "Ranged",
            "Thrown": "Thrown",
            "ThrownOffhand": "Offhand Throw",
            "TwoHanded": "Two-Handed"
          },
          "Type": {
            "Melee": "Melee",
            "Ranged": "Ranged"
          },
          "Warning": {
            "NoQuantity": "Attempting to attack with a weapon with a quantity of zero."
          },
          "Weapon": {
            "Melee": "Melee Weapon",
            "Ranged": "Ranged Weapon"
          }
        },
        "DND5E.Attack": "Attack",
        "DND5E.AttackPl": "Attacks",
        "DND5E.AttackRoll": "Attack Roll",
        "DND5E.Attributes": "Attributes",
        "DND5E.AttrConcentration": {
          "Limit": "Limit"
        },
        "DND5E.Automatic": "Automatic",
        "DND5E.AutomaticValue": "Automatic ({value})",
        "DND5E.Award": {
          "Title": "Distribute Award",
          "Action": "Award",
          "Distribution": {
            "Split": "Split",
            "Each": "Each"
          },
          "Message": "{name} has been awarded {award}.",
          "NoDestinations": "No Destinations Available",
          "NoPrimaryParty": "No primary party set, displaying characters assigned to players instead.",
          "NotGMError": "The /award command is only available to GMs.",
          "UnrecognizedWarning": "Unable to parse {commands}. The /award command should be used with XP & currencies values such as '/award 10gp 50xp'."
        },
        "DND5E.Background": "Background",
        "DND5E.BackgroundAdd": "Add Background",
        "DND5E.BackgroundName": "Background Name",
        "DND5E.Bastion": {
          "Action": {
            "BastionTurn": "Advance Bastion Turn"
          },
          "Attack": {
            "Automatic": "Resolve Automatically",
            "Formula": "Attack Formula",
            "NoActorWarning": "No character selected as target of the attack. Either select a token, or open their character sheet.",
            "Resolve": "Resolve Attack",
            "Result": {
              "Damaged": "{link} damaged in the attack.",
              "Deaths": {
                "one": "<strong>{deaths}</strong> defender was slain in an attack on their bastion!",
                "other": "<strong>{deaths}</strong> defenders were slain in an attack on their bastion!"
              },
              "NoDeaths": "Fended off an attack on their bastion with no casualties!",
              "Undefended": "Undefended bastion attacked!"
            },
            "Title": "Bastion Attack"
          },
          "Button": {
            "Label": "Show Bastion Turn Button",
            "Hint": "Display a button for advancing bastion turns in the main game interface."
          },
          "Configuration": {
            "Name": "Bastions",
            "Label": "Configure Bastions",
            "Hint": "Various configuration options for the Bastion system as presented in the DMG 2024."
          },
          "Confirm": "Advance one bastion turn?",
          "Duration": {
            "Label": "Bastion Turn Duration (days)"
          },
          "Enabled": {
            "Label": "Enable Bastion Functionality",
            "Hint": "When enabled, player characters will have access to a new Bastion tab on their character sheets when reaching level 5, and will be able to build facilities and issue orders to them."
          },
          "Gold": {
            "Claim": "Claim Income",
            "Claimed": "claimed",
            "Unclaimed": "unclaimed"
          },
          "Label": "Bastion",
          "Summary": {
            "Gold": "{value} ({claimed})",
            "NoOrders": "No orders issued to special facilities this turn.",
            "Order": "{link} completed the <strong>{order}</strong> order."
          },
          "Trade": {
            "Cancel": "Cancel Pending Trade",
            "Invalid": "Removing a pending trade will invalidate your trade order.",
            "Pending": "Pending trade"
          }
        },
        "DND5E.Biography": "Biography",
        "DND5E.BiographyPublic": "Public Biography",
        "DND5E.BiopgrahyPublicEdit": "Edit Public Biography",
        "DND5E.Bonds": "Bonds",
        "DND5E.Bonus": "Bonus",
        "DND5E.BonusAction": "Bonus Action",
        "DND5E.BonusActionAbbr": "BA",
        "DND5E.BonusAttack": "Attack Bonus",
        "DND5E.BonusDamage": "Damage Bonus",
        "DND5E.BonusSaveForm": "Update Bonuses",
        "DND5E.BonusTitle": "Configure Actor Bonuses",
        "DND5E.BONUSES": {
          "FIELDS": {
            "bonuses": {
              "label": "Global Bonuses",
              "hint": "Global bonuses as formulas which are added to certain rolls.",
              "abilities": {
                "label": "Global Ability Bonuses",
                "check": {
                  "label": "Global Ability Check Bonus"
                },
                "save": {
                  "label": "Global Saving Throw Bonus"
                },
                "skill": {
                  "label": "Global Skill Check Bonus"
                }
              },
              "msak": {
                "label": "Melee Spell Bonuses",
                "attack": {
                  "label": "Melee Spell Attack Bonus"
                },
                "damage": {
                  "label": "Melee Spell Damage Bonus"
                }
              },
              "mwak": {
                "label": "Melee Weapon Bonuses",
                "attack": {
                  "label": "Melee Weapon Attack Bonus"
                },
                "damage": {
                  "label": "Melee Weapon Damage Bonus"
                }
              },
              "rsak": {
                "label": "Ranged Spell Bonuses",
                "attack": {
                  "label": "Ranged Spell Attack Bonus"
                },
                "damage": {
                  "label": "Ranged Spell Damage Bonus"
                }
              },
              "rwak": {
                "label": "Ranged Weapon Bonuses",
                "attack": {
                  "label": "Ranged Weapon Attack Bonus"
                },
                "damage": {
                  "label": "Ranged Weapon Damage Bonus"
                }
              },
              "spell": {
                "label": "Global Spell Bonuses",
                "dc": {
                  "label": "Global Spell DC Bonus"
                }
              }
            }
          }
        },
        "DND5E.CAST": {
          "Title": "Cast",
          "FIELDS": {
            "spell": {
              "label": "Casting Details",
              "ability": {
                "label": "Casting Ability",
                "hint": "Ability to override the creature's normal spellcasting ability."
              },
              "challenge": {
                "attack": {
                  "label": "Attack Bonus",
                  "hint": "Flat to hit bonus in place of the spell's normal attack bonus."
                },
                "save": {
                  "label": "Save DC",
                  "hint": "Flat DC to use in place of the spell's normal save DC."
                },
                "override": {
                  "label": "Override Values",
                  "hint": "Override the spell's normal attack bonus & DC when casting."
                }
              },
              "level": {
                "label": "Casting Level",
                "hint": "Base level to cast the spell, if different than the spell's level."
              },
              "properties": {
                "label": "Ignored Properties",
                "hint": "Spell components & tags to ignore while casting."
              },
              "spellbook": {
                "label": "Display in Spellbook",
                "hint": "Display spell in the Spells tab of the character sheet."
              },
              "uuid": {
                "label": "Spell to Cast"
              }
            }
          },
          "SECTIONS": {
            "Spell": "Spell",
            "Spellbook": "Additional Spells"
          },
          "Action": {
            "RemoveSpell": "Remove Spell"
          },
          "Enchantment": {
            "Name": "Spell Changes"
          }
        },
        "DND5E.Casting": "Casting",
        "DND5E.Conditions": "Conditions",
        "DND5E.CONTAINER": {
          "Details": "Container Details",
          "FIELDS": {
            "capacity": {
              "label": "Capacity",
              "count": {
                "label": "Item Count"
              },
              "volume": {
                "label": "Volume Capacity",
                "units": {
                  "label": "Volume Units"
                },
                "value": {
                  "label": "Maximum Volume"
                }
              },
              "weight": {
                "label": "Weight Capacity",
                "units": {
                  "label": "Weight Units"
                },
                "value": {
                  "label": "Maximum Weight"
                }
              }
            },
            "properties": {
              "label": "Container Properties"
            }
          }
        },
        "DND5E.Controls": {
          "Hint": "Enable various hints throughout the UI for certain mouse and keyboard controls.",
          "LeftClick": "Left Click",
          "LockHint": "Middle-click to lock",
          "MiddleClick": "Middle Click",
          "Name": "Enable Control Hints",
          "Activity": {
            "FastForwardHint": "<kbd>Shift</kbd> + <left-click> the item to skip this dialog"
          }
        },
        "DND5E.Challenge": "Challenge",
        "DND5E.ChallengeRating": "Challenge Rating",
        "DND5E.Charged": "Charged",
        "DND5E.Charges": "Charges",
        "DND5E.ChatContextDamage": "Apply As Damage",
        "DND5E.ChatContextHealing": "Apply As Healing",
        "DND5E.ChatContextTempHP": "Apply As Temporary HP",
        "DND5E.ChatContextDoubleDamage": "Apply Double As Damage",
        "DND5E.ChatContextHalfDamage": "Apply Half As Damage",
        "DND5E.ChatContextSelectHit": "Select Hit Targets",
        "DND5E.ChatContextSelectMiss": "Select Missed Targets",
        "DND5E.ChatFlavor": "Chat Message Flavor",
        "DND5E.CHATMESSAGE": {
          "Activities": "Activities",
          "Deltas": {
            "Recovery": "Recovery"
          },
          "REQUEST": {
            "Action": {
              "Handle": "Handle Request"
            },
            "Complete": "Request Fulfilled",
            "PartyMembers": "Party Members"
          },
          "TURN": {
            "NoCombatant": "Combatant no longer exists!"
          }
        },
        "DND5E.CHECK": {
          "Title": "Check",
          "FIELDS": {
            "check": {
              "label": "Check Details",
              "ability": {
                "label": "Check Ability",
                "hint": "Ability to use when making the check."
              },
              "associated": {
                "label": "Associated Skills or Tools",
                "hint": "Present ability checks using proficiency and bonuses with these skills or tools."
              },
              "dc": {
                "label": "Difficulty Class",
                "calculation": {
                  "label": "DC Calculation",
                  "hint": "Method or ability used to calculate the difficulty class."
                },
                "formula": {
                  "label": "DC Formula",
                  "hint": "Custom formula or flat value for defining the check DC."
                }
              }
            }
          },
          "ThisTool": "This Tool"
        },
        "DND5E.CheckBonus": "Check Bonus",
        "DND5E.CLASS": {
          "Multiclass": {
            "Title": "Multiclassing"
          },
          "FIELDS": {
            "hd": {
              "label": "Hit Point Die",
              "additional": {
                "label": "Additional Hit Dice",
                "hint": "Formula for hit dice that are available for this class beyond the normal amount."
              },
              "spent": {
                "label": "Spent Hit Dice"
              }
            },
            "levels": {
              "label": "Class Levels"
            },
            "primaryAbility": {
              "all": {
                "label": "Require All",
                "hint": "Require all primary abilities to meet the minimum in order to multi-class."
              },
              "value": {
                "label": "Primary Ability",
                "hint": "Abilities used most by this class. Used to determine multi-classing restrictions."
              }
            },
            "properties": {
              "label": "Class Properties"
            }
          }
        },
        "DND5E.ClassAdd": "Add Class",
        "DND5E.ClassIdentifier": "Class Identifier",
        "DND5E.ClassIdentifierHint": "This class's data will be accessible using <strong>@classes.{identifier}</strong> in roll formulas.",
        "DND5E.ClassLevels": "Class Levels",
        "DND5E.ClassMakeOriginal": "Original Class",
        "DND5E.ClassMakeOriginalHint": "First class taken by character used to determine certain class traits when multiclassing.",
        "DND5E.ClassName": "Class Name",
        "DND5E.ClassOriginal": "Original Class",
        "DND5E.ClassSaves": "Saving Throws",
        "DND5E.Confirm": "Confirm",
        "DND5E.COMBAT": {
          "Group": {
            "ActiveCount": "{current} of {combatants}",
            "Title": "{name} Group"
          }
        },
        "DND5E.COMBATANT": {
          "Counted": {
            "one": "{number} combatant",
            "other": "{number} combatants"
          }
        },
        "DND5E.CompendiumBrowser": {
          "Title": "Compendium Browser",
          "Action": {
            "Open": "Open Compendium Browser"
          },
          "Column": {
            "Icon": "Icon",
            "Name": "Name",
            "Results": "Results",
            "Source": "Source"
          },
          "Filters": {
            "Label": "Filters",
            "Grouped": "{type} ({group})",
            "HasDarkvision": "Has Darkvision",
            "HasSpellcasting": "Has Spellcasting",
            "SearchResults": "Search results"
          },
          "Selection": {
            "Label": "Selected: {summary}",
            "Select": "Select",
            "Summary": {
              "Max": "<span class=\"value\">{value}</span> of up to {max}",
              "Min": "<span class=\"value\">{value}</span> of at least {min}",
              "Range": "<span class=\"value\">{value}</span> of {min} to {max}",
              "Single": "<span class=\"value\">{value}</span> of {max}"
            },
            "Warning": {
              "Document": {
                "one": "document",
                "other": "documents"
              },
              "Max": "Must select at most {max} {document}, {value} selected.",
              "Min": "Must select at least {min} {document}, {value} selected.",
              "Range": "Must select between {min} and {max} documents, {value} selected.",
              "Single": "Must select {max} {document}, {value} selected."
            }
          },
          "Sources": {
            "Name": "Compendium Browser Sources",
            "Label": "Configure Sources",
            "FilterPackages": "Filter Packages",
            "Hint": "Configure which compendium packs have their content available in the compendium browser."
          },
          "Tabs": {
            "Feat.other": "Feats",
            "Item.other": "Items",
            "Monster.other": "Monsters"
          },
          "Types": {
            "Label": "Types"
          },
          "Locked": "Locked"
        },
        "DND5E.ComponentMaterial": "Material",
        "DND5E.ComponentMaterialAbbr": "M",
        "DND5E.ComponentSomatic": "Somatic",
        "DND5E.ComponentSomaticAbbr": "S",
        "DND5E.ComponentVerbal": "Verbal",
        "DND5E.ComponentVerbalAbbr": "V",
        "DND5E.Components": "Components",
        "DND5E.Container": "Container",
        "DND5E.ContainerDeleteMessage": "This container will be permanently deleted and cannot be recovered and the {count} items contained within will be moved out.",
        "DND5E.ContainerDeleteContents": "Also delete all items within the container.",
        "DND5E.ContainerMaxDepth": "Containers cannot be nested more than {depth} levels deep.",
        "DND5E.ContainerRecursiveError": "Containers cannot contain themselves.",
        "DND5E.Contents": "Contents",
        "DND5E.ContextMenuActionEdit": "Edit",
        "DND5E.ContextMenuActionDuplicate": "Duplicate",
        "DND5E.ContextMenuActionDelete": "Delete",
        "DND5E.ContextMenuActionEquip": "Equip",
        "DND5E.ContextMenuActionUnequip": "Unequip",
        "DND5E.ContextMenuActionPrepare": "Prepare",
        "DND5E.ContextMenuActionExpendCharge": "Uncharge",
        "DND5E.ContextMenuActionCharge": "Charge",
        "DND5E.ContextMenuActionUnprepare": "Unprepare",
        "DND5E.ContextMenuActionAttune": "Attune",
        "DND5E.ContextMenuActionUnattune": "Unattune",
        "DND5E.ContextMenuActionEnable": "Enable",
        "DND5E.ContextMenuActionDisable": "Disable",
        "DND5E.ContextMenuActionView": "View",
        "DND5E.Contiguous": "Contiguous",
        "DND5E.ConBlinded": "Blinded",
        "DND5E.ConCharmed": "Charmed",
        "DND5E.ConDeafened": "Deafened",
        "DND5E.ConDiseased": "Diseased",
        "DND5E.CONDITIONS": {
          "RiderConditions": {
            "label": "Separate Status Conditions",
            "hint": "When this Active Effect is applied, these additional status conditions will be applied separately."
          }
        },
        "DND5E.ConExhaustion": "Exhaustion",
        "DND5E.ConFrightened": "Frightened",
        "DND5E.ConGrappled": "Grappled",
        "DND5E.ConImm": "Condition Immunities",
        "DND5E.ConIncapacitated": "Incapacitated",
        "DND5E.ConInvisible": "Invisible",
        "DND5E.ConParalyzed": "Paralyzed",
        "DND5E.ConPetrified": "Petrified",
        "DND5E.ConPoisoned": "Poisoned",
        "DND5E.ConProne": "Prone",
        "DND5E.ConRestrained": "Restrained",
        "DND5E.ConStunned": "Stunned",
        "DND5E.ConUnconscious": "Unconscious",
        "DND5E.Concentration": "Concentration",
        "DND5E.ConcentrationAbbr": "C",
        "DND5E.ConcentrationBreak": "Break Concentration",
        "DND5E.ConcentrationBreakWarning": "Breaking concentration on an effect that is active on other creatures requires an active GM to be present.",
        "DND5E.ConcentrationBonus": "Concentration Bonus",
        "DND5E.ConcentrationDuration": "Concentration, up to {duration}",
        "DND5E.ConcentratingOn": "You are maintaining concentration on the effects of the '{name}' {type}.",
        "DND5E.ConcentratingEndChoice": "You are concentrating on effects from more than one source. Pick which effect to end.",
        "DND5E.ConcentratingMissingItem": "The effect that is concentrated on and to be replaced does not exist.",
        "DND5E.ConcentratingLimited": "You are not able to begin concentrating on an additional effect.",
        "DND5E.ConcentrationLimit": "Concentration Limit",
        "DND5E.ConcentratingEnd": "End Concentration",
        "DND5E.ConcentratingItemless": "Concentration With No Source",
        "DND5E.ConcentratingWarnLimit": "You cannot maintain concentration on more effects!",
        "DND5E.ConcentratingWarnLimitOptional": "You may end concentration on one of your maintained effects to use this item.",
        "DND5E.ConcentratingWarnLimitZero": "You are not able to maintain concentration on any effects!",
        "DND5E.ConcentrationConfigurationHint": "Configure concentration modifiers and bonuses which apply to this creature.",
        "DND5E.ConsumeTitle": "Resource Consumption",
        "DND5E.ConsumeAmount": "Consumption Amount",
        "DND5E.ConsumeHint": {
          "Attribute": "Attribute to consume (e.g. currency.gp)",
          "Item": "UUID of target in compendium"
        },
        "DND5E.ConsumeTarget": "Consumption Target",
        "DND5E.ConsumeType": "Consumption Category",
        "DND5E.ConsumeAmmunition": "Ammunition",
        "DND5E.ConsumeAttribute": "Attribute",
        "DND5E.ConsumeHitDice": "Hit Dice",
        "DND5E.ConsumeHitDiceLargest": "Largest Available",
        "DND5E.ConsumeHitDiceLargestLong": "Largest Hit Dice Available",
        "DND5E.ConsumeHitDiceSmallest": "Smallest Available",
        "DND5E.ConsumeHitDiceSmallestLong": "Smallest Hit Dice Available",
        "DND5E.ConsumeMaterial": "Material",
        "DND5E.ConsumeCharges": "Item Uses",
        "DND5E.ConsumeResource": "Consume Resource?",
        "DND5E.ConsumeRecharge": "Consume Recharge?",
        "DND5E.ConsumeScaling": "Resource Scaling",
        "DND5E.ConsumeScalingLabel": "Use Resources",
        "DND5E.ConsumeScalingTooltip": "If checked, consuming additional resources will increase the level the spell is cast at.",
        "DND5E.CONSUMABLE": {
          "FIELDS": {
            "damage": {
              "label": "Ammunition Damage",
              "replace": {
                "label": "Replace Weapon Damage",
                "hint": "Replace base weapon damage with this damage rather than augmenting it."
              }
            },
            "magicalBonus": {
              "label": "Magical Bonus"
            },
            "properties": {
              "label": "Consumable Properties"
            },
            "uses": {
              "autoDestroy": {
                "label": "Destroy on Empty",
                "hint": "Reduce the item's quantity by 1 whenever all of its limited uses are expended."
              }
            }
          },
          "Category": {
            "Poison": "Poison"
          },
          "Type": {
            "Ammunition": {
              "Label": "Ammunition",
              "Arrow": "Arrow",
              "Bolt": "Bolt",
              "BulletFirearm": "Bullet, Firearm",
              "BulletSling": "Bullet, Sling",
              "EnergyCell": "Energy Cell",
              "Needle": "Needle"
            },
            "Food": {
              "Label": "Food"
            },
            "Poison": {
              "Label": "Poison",
              "Contact": "Contact",
              "Ingested": "Ingested",
              "Inhaled": "Inhaled",
              "Injury": "Injury"
            },
            "Potion": {
              "Label": "Potion"
            },
            "Rod": {
              "Label": "Rod"
            },
            "Scroll": {
              "Label": "Scroll"
            },
            "Trinket": {
              "Label": "Trinket"
            },
            "Wand": {
              "Label": "Wand"
            }
          }
        },
        "DND5E.ConsumableUseWarnStart": "This consumable has",
        "DND5E.ConsumableUseWarnEnd": "of the current unit",
        "DND5E.ConsumableUnitWarn": "units remaining",
        "DND5E.ConsumableLastChargeWarn": "This is the last charge of this unit and consuming it will also reduce the item's quantity by 1",
        "DND5E.ConsumableWithoutCharges": "available units to use",
        "DND5E.CONSUMPTION": {
          "FIELDS": {
            "consumption": {
              "label": "Consumption",
              "scaling": {
                "abbr": "Scaling",
                "label": "Consumption Scaling",
                "allowed": {
                  "label": "Allow Scaling",
                  "hint": "Can an activity not on a spell be activated at higher levels?"
                },
                "max": {
                  "label": "Max Scaling",
                  "hint": "Maximum number of scaling levels for this item, including the base level."
                }
              },
              "spellSlot": {
                "label": "Consume Spell Slot",
                "hint": "Should using this activity consume a slot for this spell?"
              },
              "targets": {
                "label": "Consumption Targets",
                "hint": "Targets of possible consumption when this activity is activated.",
                "FIELDS": {
                  "type": {
                    "label": "Consumption Type",
                    "hint": "Type of consumption target."
                  },
                  "target": {
                    "label": "Consumption Target",
                    "hint": "Specific target to be consumed."
                  },
                  "value": {
                    "label": "Consumption Amount",
                    "hint": "Enter a negative value to restore rather than consume."
                  },
                  "scaling": {
                    "label": "Consumption Scaling",
                    "mode": {
                      "label": "Scaling Mode",
                      "hint": "How consumption should be scaled."
                    },
                    "formula": {
                      "label": "Scaling Formula",
                      "hint": "Custom scaling of consumption amount per level."
                    }
                  }
                }
              }
            }
          },
          "Action": {
            "ConsumeResource": "Consume Resource",
            "Create": "Create Consumption Target",
            "Delete": "Delete Consumption Target",
            "RefundResource": "Refund Resource"
          },
          "Scaling": {
            "Amount": "Amount",
            "Automatic": "Automatic",
            "None": "No Scaling",
            "SlotLevel": "Slot Level"
          },
          "Target": {
            "ThisItem": "This Item"
          },
          "Type": {
            "Action": {
              "Prompt": "Consume {type}?",
              "PromptHint": "Spend {cost} ({available} available)."
            },
            "ActivityUses": {
              "Label": "Activity Uses",
              "PromptDecrease": "Consume Activity Use?",
              "PromptIncrease": "Restore Activity Use?",
              "PromptHintDecrease": "Spend <strong>{cost}</strong> {use} of this activity ({available} {availableUse} available).",
              "PromptHintIncrease": "Recover <strong>{cost}</strong> {use} of this activity.",
              "Warning": "uses on {item}'s activity {activity}"
            },
            "Attribute": {
              "Label": "Attribute",
              "PromptDecrease": "Consume Attribute?",
              "PromptIncrease": "Restore Attribute?",
              "PromptHintDecrease": "Decrease <code>{attribute}</code> by <strong>{cost}</strong> (currently {current}).",
              "PromptHintIncrease": "Increase <code>{attribute}</code> by <strong>{cost}</strong> (currently {current}).",
              "Warning": "{attribute} amount"
            },
            "HitDice": {
              "Label": "Hit Dice",
              "PromptDecrease": "Consume Hit Die?",
              "PromptIncrease": "Restore Hit Die?",
              "PromptHintDecrease": "Spend <strong>{cost}</strong> {denomination} {die} ({available} remaining).",
              "PromptHintIncrease": "Recover <strong>{cost}</strong> {denomination} {die}.",
              "Warning": "{denomination} hit dice"
            },
            "HitDie": {
              "one": "hit die",
              "other": "hit dice"
            },
            "ItemUses": {
              "Label": "Item Uses",
              "PromptDecrease": "Consume Item Use?",
              "PromptIncrease": "Restore Item Use?",
              "PromptHintDecrease": "Spend <strong>{cost}</strong> {use} of {item} ({available} {availableUse} available).",
              "PromptHintIncrease": "Recover <strong>{cost}</strong> {use} of {item}.",
              "Warning": "uses on {name}"
            },
            "Material": {
              "Label": "Material",
              "PromptDecrease": "Consume Material?",
              "PromptIncrease": "Restore Material?",
              "PromptHintDecrease": "Reduce quantity of {item} by <strong>{cost}</strong> ({quantity} remaining).",
              "PromptHintIncrease": "Increase quantity of {item} by <strong>{cost}</strong>.",
              "Warning": "of {name}"
            },
            "SpellSlot": {
              "one": "{level} slot",
              "other": "{level} slots"
            },
            "SpellSlots": {
              "Label": "Spell Slots",
              "PromptDecrease": "Consume Spell Slot?",
              "PromptIncrease": "Restore Spell Slot?",
              "PromptHintDecrease": "Spend <strong>{cost}</strong> {slot} ({available} remaining).",
              "PromptHintIncrease": "Recover <strong>{cost}</strong> {slot}.",
              "Warning": "{level} slots"
            },
            "Use": {
              "one": "use",
              "other": "uses"
            }
          },
          "Warning": {
            "MissingAttribute": "Attribute {attribute} configured to be consumed by {activity} activity on {item} could not be found.",
            "MissingHitDice": "Actor does not have a class with a {denomination} hit die.",
            "MissingItem": "Item configured to be consumed by {activity} activity on {item} could not be found.",
            "MissingSpellSlot": "No {level} slots available.",
            "None": "No {type} available to spend, {cost} required.",
            "NotEnough": "Not enough {type} available to spend, {cost} required and only {available} available.",
            "WillDestroy": "Consuming {item} will spend its final use and it will be destroyed."
          }
        },
        "DND5E.Consumed": "Consumed",
        "DND5E.Copy": "Copy Text",
        "DND5E.Copied": "Copied {value}",
        "DND5E.Cover": "Cover",
        "DND5E.CoverHalf": "Half",
        "DND5E.CoverThreeQuarters": "Three Quarters",
        "DND5E.CoverTotal": "Total",
        "DND5E.Cost": "Cost",
        "DND5E.CostGP": "Cost (GP)",
        "DND5E.CreatureAberration": "Aberration",
        "DND5E.CreatureAberrationPl": "Aberrations",
        "DND5E.CreatureBeast": "Beast",
        "DND5E.CreatureBeastPl": "Beasts",
        "DND5E.CreatureCelestial": "Celestial",
        "DND5E.CreatureCelestialPl": "Celestials",
        "DND5E.CreatureConstruct": "Construct",
        "DND5E.CreatureConstructPl": "Constructs",
        "DND5E.CreatureDragon": "Dragon",
        "DND5E.CreatureDragonPl": "Dragons",
        "DND5E.CreatureElemental": "Elemental",
        "DND5E.CreatureElementalPl": "Elementals",
        "DND5E.CreatureFey": "Fey",
        "DND5E.CreatureFeyPl": "Fey",
        "DND5E.CreatureFiend": "Fiend",
        "DND5E.CreatureFiendPl": "Fiends",
        "DND5E.CreatureGiant": "Giant",
        "DND5E.CreatureGiantPl": "Giants",
        "DND5E.CreatureHumanoid": "Humanoid",
        "DND5E.CreatureHumanoidPl": "Humanoids",
        "DND5E.CreatureMonstrosity": "Monstrosity",
        "DND5E.CreatureMonstrosityPl": "Monstrosities",
        "DND5E.CreatureOoze": "Ooze",
        "DND5E.CreatureOozePl": "Oozes",
        "DND5E.CreaturePlant": "Plant",
        "DND5E.CreaturePlantPl": "Plants",
        "DND5E.CreatureType": "Creature Type",
        "DND5E.CreatureTypeTitle": "Configure Creature Type",
        "DND5E.CreatureSwarm": "Swarm",
        "DND5E.CreatureSwarmSize": "Swarm Size",
        "DND5E.CreatureSwarmPhrase": "Swarm of {size} {type}",
        "DND5E.CreatureTag": "{size} {type}, {alignment}",
        "DND5E.CreatureTypeConfig": "Configure Creature Type",
        "DND5E.CreatureTypeSelectorCustom": "Custom Type",
        "DND5E.CreatureTypeSelectorSubtype": "Subtype",
        "DND5E.CreatureUndead": "Undead",
        "DND5E.CreatureUndeadPl": "Undead",
        "DND5E.Crewed": "Crewed",
        "DND5E.Critical": "Critical",
        "DND5E.CriticalHit": "Critical Hit",
        "DND5E.PowerfulCritical": "Powerful Critical",
        "DND5E.CRLabel": "CR {cr}",
        "DND5E.Currency": "Currency",
        "DND5E.CurrencyAbbrCP": "cp",
        "DND5E.CurrencyAbbrEP": "ep",
        "DND5E.CurrencyAbbrGP": "gp",
        "DND5E.CurrencyAbbrPP": "pp",
        "DND5E.CurrencyAbbrSP": "sp",
        "DND5E.CurrencyCP": "Copper",
        "DND5E.CurrencyEP": "Electrum",
        "DND5E.CurrencyGP": "Gold",
        "DND5E.CurrencyPP": "Platinum",
        "DND5E.CurrencySP": "Silver",
        "DND5E.CurrencyManager": {
          "Title": "Manage Currency",
          "Convert": {
            "Label": "Convert",
            "Action": "Convert All Currency",
            "Hint": "Convert all carried currency to the highest possible denomination to reduce the amount of coinage carried by the character. Be wary, this action cannot be undone."
          },
          "Error": {
            "InsufficientFunds": "Failed to deduct {amount}{denomination} from {name}. Insufficient funds."
          },
          "Transfer": {
            "Label": "Transfer",
            "Action": "Transfer Selected",
            "All": "All",
            "Half": "Half"
          }
        },
        "DND5E.Current": "Current",
        "DND5E.DAMAGE": {
          "Title": "Damage",
          "FIELDS": {
            "damage": {
              "label": "Damage",
              "critical": {
                "allow": {
                  "label": "Allow Critical",
                  "hint": "Should the creature be able to roll critical damage?"
                },
                "bonus": {
                  "label": "Extra Critical Damage",
                  "hint": "Extra damage applied to the first damage part when a critical is rolled."
                }
              },
              "parts": {
                "label": "Damage Parts",
                "hint": "Individual damage parts to include with the roll.",
                "FIELDS": {
                  "bonus": {
                    "label": "Damage Bonus",
                    "hint": "Bonus added to the damage roll."
                  },
                  "custom": {
                    "label": "Custom Damage Formula",
                    "enabled": {
                      "label": "Enable Custom Formula",
                      "hint": "Use a custom formula rather than the default dice."
                    },
                    "formula": {
                      "label": "Damage Formula",
                      "hint": "Custom damage formula."
                    }
                  },
                  "denomination": {
                    "label": "Die Denomination",
                    "hint": "Denomination of the dice to roll."
                  },
                  "number": {
                    "label": "Die Number",
                    "hint": "Number of dice to roll."
                  },
                  "scaling": {
                    "label": "Damage Scaling",
                    "abbr": "Scaling",
                    "mode": {
                      "label": "Scaling Mode",
                      "abbr": "Mode",
                      "hint": "Method by which the scaling increase is calculated."
                    },
                    "number": {
                      "label": "Dice Scaling",
                      "abbr": "Dice",
                      "hint": "Number of dice to increase for each scaling step. Will be applied to the first die found in the damage formula if more than one is present."
                    },
                    "formula": {
                      "label": "Scaling Formula",
                      "hint": "Arbitrary scaling formula that will be multiplied for each scaling step and added to the original formula."
                    }
                  },
                  "types": {
                    "label": "Damage Types",
                    "hint": "Type of damage inflicted or multiple for the user to select from."
                  }
                }
              }
            }
          },
          "Part": {
            "Action": {
              "Create": "Create Damage Part",
              "Delete": "Delete Damage Part"
            }
          },
          "Scaling": {
            "Half": "Every Other Level",
            "HalfCantrip": "Half Cantrip Scaling",
            "None": "No Scaling",
            "Whole": "Every Level",
            "WholeCantrip": "Cantrip Scaling"
          }
        },
        "DND5E.DamImm": "Damage Immunities",
        "DND5E.DamMod": "Damage Modification",
        "DND5E.DamRes": "Damage Resistances",
        "DND5E.DamVuln": "Damage Vulnerabilities",
        "DND5E.Damage": "Damage",
        "DND5E.DamageAcid": "Acid",
        "DND5E.DamageAll": "All Damage",
        "DND5E.DamageApplication": {
          "Change": {
            "Modification": "{type} Modification",
            "Immunity": "{type} Immunity",
            "Resistance": "{type} Resistance",
            "Vulnerability": "{type} Vulnerability"
          },
          "Downgrading": "Downgrading {source} to Resistance",
          "Ignoring": "Ignoring {source}"
        },
        "DND5E.DamageBludgeoning": "Bludgeoning",
        "DND5E.DamageCold": "Cold",
        "DND5E.DamageFire": "Fire",
        "DND5E.DamageForce": "Force",
        "DND5E.DamageLightning": "Lightning",
        "DND5E.DamageModification": {
          "Label": "Damage Modification",
          "Hint": "Formulas for amounts that will be added to typed damage applied to this actor. Negative values will reduce the damage taken.",
          "BypassHint": "These weapon properties will bypass damage modification for physical damage."
        },
        "DND5E.DamageNecrotic": "Necrotic",
        "DND5E.DamagePiercing": "Piercing",
        "DND5E.DamagePhysical": "Non-Magical Physical",
        "DND5E.DamagePhysicalBypass": "Physical Bypasses",
        "DND5E.DamagePhysicalBypassHint": "These weapon properties will bypass damage resistance for physical damage.",
        "DND5E.DamagePhysicalBypasses": "{damageTypes} from attacks that are not {bypassTypes}",
        "DND5E.DamagePhysicalBypassesShort": "Bypassed by {type} Sources",
        "DND5E.DamagePoison": "Poison",
        "DND5E.DamagePsychic": "Psychic",
        "DND5E.DamageRadiant": "Radiant",
        "DND5E.DamageRoll": "Damage Roll",
        "DND5E.DamageSlashing": "Slashing",
        "DND5E.DamageThreshold": "Damage Threshold",
        "DND5E.DamageThunder": "Thunder",
        "DND5E.DamageType": "Damage Type",
        "DND5E.DamageTypes": "Damage Types",
        "DND5E.Dawn": "Dawn",
        "DND5E.Day": "Day",
        "DND5E.DeathSave": "Death Saves",
        "DND5E.DeathSaveBonus": "Death Save Bonus",
        "DND5E.DeathSaveConfigure": "Configure Death Saves",
        "DND5E.DeathSaveCriticalSuccess": "{name} critically succeeded on a death saving throw and has regained 1 Hit Point!",
        "DND5E.DeathSaveHide": "Hide Death Saves",
        "DND5E.DeathSaveShow": "Show Death Saves",
        "DND5E.DeathSaveSuccess": "{name} has survived with 3 death save successes and is now stable!",
        "DND5E.DeathSaveSuccessLabel": "Death Save Success",
        "DND5E.DeathSaveSuccessLabelN.one": "1st death save success",
        "DND5E.DeathSaveSuccessLabelN.two": "2nd death save success",
        "DND5E.DeathSaveSuccessLabelN.few": "3rd death save success",
        "DND5E.DeathSaveSuccesses": "Successes",
        "DND5E.DeathSaveFailure": "{name} has died with 3 death save failures!",
        "DND5E.DeathSaveFailureLabel": "Death Save Failure",
        "DND5E.DeathSaveFailureLabelN.one": "1st death save failure",
        "DND5E.DeathSaveFailureLabelN.two": "2nd death save failure",
        "DND5E.DeathSaveFailureLabelN.few": "3rd death save failure",
        "DND5E.DeathSaveFailures": "Failures",
        "DND5E.DeathSaveRoll": "Roll a Death Saving Throw",
        "DND5E.DeathSavingThrow": "Death Saving Throw",
        "DND5E.DeathSaveUnnecessary": "You do not need to roll death saves because you have a positive number of hit points or have already reached 3 successes or failures.",
        "DND5E.Default": "Default",
        "DND5E.DefaultSpecific": "Default ({default})",
        "DND5E.DefaultAbilityCheck": "Default Ability Check",
        "DND5E.Denomination": "Denomination",
        "DND5E.Description": "Description",
        "DND5E.DescriptionChat": "Chat Description",
        "DND5E.DescriptionEdit": "Edit {description}",
        "DND5E.DescriptionSummary": "Summary Description",
        "DND5E.DescriptionUnidentified": "Unidentified Description",
        "DND5E.Details": "Details",
        "DND5E.DetailsEdit": "Edit Details",
        "DND5E.Die": "Die",
        "DND5E.Dimensions": "Dimensions",
        "DND5E.Disadvantage": "Disadvantage",
        "DND5E.Discord": "Discord",
        "DND5E.Disclaimer": "Disclaimer",
        "DND5E.DisplayCard": "Display in Chat",
        "DND5E.DistAny": "Any",
        "DND5E.DistFt": "Feet",
        "DND5E.DistFtAbbr": "ft",
        "DND5E.DistKm": "Kilometers",
        "DND5E.DistKmAbbr": "km",
        "DND5E.DistM": "Meters",
        "DND5E.DistMAbbr": "m",
        "DND5E.DistMi": "Miles",
        "DND5E.DistMiAbbr": "mi",
        "DND5E.DistSelf": "Self",
        "DND5E.DistTouch": "Touch",
        "DND5E.DocumentUseWarn": "You lack permission to use an item on this document.",
        "DND5E.DocumentViewWarn": "You lack permission to view this document.",
        "DND5E.DURATION": {
          "FIELDS": {
            "duration": {
              "label": "Duration",
              "concentration": {
                "label": "Concentration",
                "hint": "Creature must maintain concentration while active."
              },
              "override": {
                "label": "Override Duration",
                "hint": "Use these duration values instead of the item's when using this activity."
              },
              "special": {
                "label": "Special Duration",
                "hint": "Description of any special duration details."
              },
              "units": {
                "label": "Duration Units",
                "hint": "Units used to measure duration."
              },
              "value": {
                "label": "Duration Value",
                "hint": "Value of the duration in the specified units, if applicable."
              }
            }
          }
        },
        "DND5E.Duration": "Duration",
        "DND5E.DurationPermanent": "Permanent",
        "DND5E.DurationTime": "Time",
        "DND5E.DurationType": "Duration Type",
        "DND5E.DurationUnits": "Duration Units",
        "DND5E.DurationValue": "Duration Value",
        "DND5E.Dusk": "Dusk",
        "DND5E.Effect": "Effect",
        "DND5E.Effects": "Effects",
        "DND5E.EFFECT": {
          "Action": {
            "Create": "Create Effect",
            "Delete": "Delete Effect",
            "Dissociate": "Dissociate Effect"
          },
          "Empty": "No associated effects. Use the <i class=\"fas fa-plus\"></i> button above to create one, or select an existing effect from the drop-down.",
          "Label": "Available Effects"
        },
        "DND5E.EffectsApplyTokens": "Apply to selected tokens",
        "DND5E.EffectApplyWarningConcentration": "Applying an effect that is being concentrated on by another character requires GM permissions.",
        "DND5E.EffectApplyWarningOwnership": "Effects cannot be applied to tokens you are not the owner of.",
        "DND5E.EffectsSearch": "Search effects",
        "DND5E.ENCHANT": {
          "Title": "Enchant",
          "FIELDS": {
            "effects.element": {
              "level": {
                "label": "Level Limit",
                "hint": "Range of levels required to use this enchantment.",
                "max": {
                  "label": "Maximum Level"
                },
                "min": {
                  "label": "Minimum Level"
                }
              },
              "riders": {
                "label": "Attached",
                "activity": {
                  "label": "Additional Activities",
                  "hint": "These additional activities will be added to the enchanted item when this enchantment is applied, and removed when the enchantment is removed."
                },
                "effect": {
                  "label": "Additional Effects",
                  "hint": "These additional effects will be added to the enchanted item when this enchantment is applied, and removed when the enchantment is removed."
                },
                "item": {
                  "label": "Additional Items",
                  "hint": "These additional items will be added to the creature when one of its items is enchanted, and will be removed if the enchantment is ever removed."
                }
              }
            },
            "enchant": {
              "label": "Enchantment Configuration",
              "identifier": {
                "label": "Class Identifier",
                "hint": "Identifier used to determine whether the character level or a specific class level should be used for enchantment level limits."
              },
              "self": {
                "label": "Automatically Enchant Self",
                "hint": "Automatically apply selected enchantment to the item containing this activity when it is used, and remove it when the activity is used again."
              }
            },
            "restrictions": {
              "label": "Restrictions",
              "hint": "Restrictions on the type of item to which this enchantment can be applied.",
              "allowMagical": {
                "label": "Allow Magical",
                "hint": "Allow physical items that are already magical to be enchanted."
              },
              "categories": {
                "label": "Valid Categories",
                "hint": "Specific item categories to which this enchantment can be applied."
              },
              "properties": {
                "label": "Valid Properties",
                "hint": "Specific item properties which must be present for this enchantment to be applied."
              },
              "type": {
                "label": "Item Type",
                "hint": "Type of item to which this enchantment can be applied.",
                "Any": "Any Enchantable Type"
              }
            }
          },
          "SECTIONS": {
            "Enchanting": "Enchanting",
            "Enchantments": "Enchantments",
            "Restrictions": "Restrictions"
          },
          "DropArea": "Place item here to enchant it\u2026",
          "Enchanted": "{current} &sol; {max} enchanted",
          "Enchantment": {
            "Action": {
              "Create": "Create Enchantment",
              "Delete": "Delete Enchantment"
            },
            "Active": "{name} (active)",
            "Empty": "No associated enchantments. Use the <i class=\"fas fa-plus\"></i> button above to create one, or select an existing enchantment from the drop-down."
          },
          "Warning": {
            "ConcentrationEnded": "Cannot apply this enchantment because concentration has ended.",
            "MissingProperty": "Item must have one of these properties to be enchanted: {validProperties}.",
            "NoMagicalItems": "Items that are already magical cannot be enchanted.",
            "NoSubtype": "Only {allowedType} items can be enchanted by this enchantment, but this item doesn't have a sub-type.",
            "WrongType": "{incorrectType} items cannot be enchanted by this enchantment, only {allowedType} items are allowed."
          }
        },
        "DND5E.ENCHANTMENT": {
          "Action": {
            "Apply": "Apply Enchantment",
            "Disable": "Disable Enchantment",
            "Edit": "Edit Enchantment",
            "Enable": "Enable Enchantment",
            "Remove": "Remove Enchantment"
          },
          "Category": {
            "Active": "Active Enchantments",
            "General": "Enchantments",
            "Inactive": "Inactive Enchantments"
          },
          "FIELDS": {
            "enchantment": {
              "label": "Enchantment Configuration",
              "items": {
                "max": {
                  "label": "Item Limit",
                  "hint": "Formula for the maximum number of enchantments of this type that can be active at a time."
                },
                "period": {
                  "label": "Replacement Period",
                  "hint": "How frequently the enchantments of this type can be re-bound to different items."
                }
              }
            }
          },
          "Items": {
            "Entry": "{item} on <em>{actor}</em>"
          },
          "Label": "Enchantment",
          "Period": {
            "AtWill": "At Will",
            "LongRest": "Long Rest",
            "Never": "Never",
            "ShortRest": "Short Rest"
          },
          "Warning": {
            "NotOnActor": "Enchantments can only be added to items, not directly to actors.",
            "Override": "This value is being modified by an Enchantment and cannot be edited. Disable the enchantment in the effects tab to edit it."
          }
        },
        "DND5E.ENCOUNTER": {
          "Action": {
            "Award": "Award XP & Currency"
          },
          "Difficulty": {
            "high": "High Difficulty",
            "low": "Low Difficulty",
            "moderate": "Moderate Difficulty"
          },
          "DropCreature": "Drop Creature",
          "Tab": {
            "Description": "Description",
            "Loot": "Loot",
            "Members": "Members"
          }
        },
        "DND5E.Environment": "Environment",
        "DND5E.EQUIPMENT": {
          "Type": {
            "Clothing": {
              "Label": "Clothing"
            },
            "Ring": {
              "Label": "Ring"
            },
            "Rod": {
              "Label": "Rod"
            },
            "Trinket": {
              "Label": "Trinket"
            },
            "Vehicle": {
              "Label": "Vehicle Equipment"
            },
            "Wand": {
              "Label": "Wand"
            },
            "Wondrous": {
              "Label": "Wondrous Item"
            }
          }
        },
        "DND5E.EquipmentBonus": "Magical Bonus",
        "DND5E.EquipmentHeavy": "Heavy Armor",
        "DND5E.EquipmentLight": "Light Armor",
        "DND5E.EquipmentMedium": "Medium Armor",
        "DND5E.EquipmentNatural": "Natural Armor",
        "DND5E.EquipmentShield": "Shield",
        "DND5E.EquipmentShieldProficiency": "Shields",
        "DND5E.Equipped": "Equipped",
        "DND5E.Exhaustion": "Exhaustion",
        "DND5E.ExhaustionLevel": "Exhaustion Level {n}",
        "DND5E.ExperiencePoints": {
          "Abbreviation": "XP",
          "Boons": {
            "one": "{number} Boon",
            "other": "{number} Boons"
          },
          "Current": "Current XP",
          "Format": "{value} XP",
          "Label": "Experience Points",
          "Pool": "XP Pool",
          "Progress": "Progress to next Level",
          "StatBlock": {
            "Standard": "XP {value}",
            "Lair": "XP {value}, or {lair} in lair"
          },
          "Value": "XP Value"
        },
        "DND5E.Expertise": "Expertise",
        "DND5E.FACILITY": {
          "Action": {
            "DeleteDefender": "Delete Defender",
            "DeleteOccupant": "Delete Occupant",
            "RemoveCraft": "Remove Craft"
          },
          "AvailableFacility": {
            "basic": {
              "build": "Build Facility",
              "free": "Free Facility"
            },
            "special": {
              "free": "Add Facility"
            }
          },
          "Build": {
            "Unbuilt": "Unbuilt"
          },
          "Costs": {
            "Automatic": "Deduct Automatically",
            "Days": "{days} days",
            "Label": "Costs",
            "Manual": "Mark as Paid",
            "Paid": "paid",
            "Unpaid": "unpaid"
          },
          "Craft": {
            "BaseItem": {
              "Label": "Purchase Base Item",
              "Hint": "If checked, the base item will be purchased at full price instead of crafted."
            },
            "Hint": "The items that this facility is currently in the process of crafting or harvesting, if any."
          },
          "Description": "Description",
          "FIELDS": {
            "building": {
              "built": {
                "label": "Built",
                "hint": "Basic facilities must be built first before they can be used."
              }
            },
            "defenders": {
              "max": {
                "label": "Defenders"
              }
            },
            "disabled": {
              "hint": "Disabled facilities cannot be issued orders and are repaired at the beginning of the next turn.",
              "label": "Disabled"
            },
            "enlargeable": {
              "hint": "Certain special facilities may have their size categories increased for a cost.",
              "label": "Can Be Enlarged"
            },
            "free": {
              "hint": "Free facilities do not count towards your special facilities cap.",
              "label": "Free Facility"
            },
            "hirelings": {
              "max": {
                "label": "Hirelings"
              }
            },
            "level": {
              "label": "Level Requirement"
            },
            "order": {
              "label": "Order"
            },
            "progress": {
              "max": {
                "label": "Total"
              },
              "order": {
                "label": "Executing"
              },
              "value": {
                "label": "Current"
              }
            },
            "size": {
              "label": "Size"
            },
            "trade": {
              "creatures": {
                "max": {
                  "label": "Creature Capacity"
                }
              },
              "profit": {
                "label": "Profit Factor"
              },
              "stock": {
                "stocked": {
                  "hint": "Appropriate for facilities that do not store a variable value of goods, but are instead considered either stocked or empty.",
                  "label": "Stocked"
                },
                "value": {
                  "label": "Value"
                },
                "max": {
                  "label": "Max"
                }
              }
            },
            "type": {
              "subtype": {
                "label": "Type"
              },
              "value": {
                "label": "Category"
              }
            }
          },
          "Goods": "Goods",
          "NoDefenders": "Bastion is undefended.",
          "Occupants": "Occupants",
          "Order": {
            "Execute": "Execute Order",
            "Issue": "Issue Order: {order}"
          },
          "Orders": {
            "Label": "Orders",
            "build": {
              "inf": "Build",
              "present": "Building"
            },
            "change": {
              "inf": "Change",
              "present": "Changing"
            },
            "craft": {
              "inf": "Craft",
              "present": "Crafting"
            },
            "empower": {
              "inf": "Empower",
              "present": "Empowering"
            },
            "enlarge": {
              "inf": "Enlarge",
              "present": "Enlarging"
            },
            "harvest": {
              "inf": "Harvest",
              "present": "Harvesting"
            },
            "maintain": {
              "inf": "Maintain",
              "present": "Maintaining"
            },
            "recruit": {
              "inf": "Recruit",
              "present": "Recruiting"
            },
            "repair": {
              "inf": "Repair",
              "present": "Repairing"
            },
            "research": {
              "inf": "Research",
              "present": "Researching"
            },
            "trade": {
              "inf": "Trade",
              "present": "Trading"
            }
          },
          "Progress": "Progress",
          "Properties": "Properties",
          "Sizes": {
            "cramped": "Cramped",
            "roomy": "Roomy",
            "vast": "Vast"
          },
          "Squares": "{squares} squares",
          "Trade": {
            "Buy": {
              "Supplement": "Buy"
            },
            "Creatures": {
              "Buy": "Drop animals that you wish to purchase into the slots above, and update the cost appropriately below."
            },
            "Price": {
              "Label": "Base Price",
              "Hint": "Select which stock to sell, and input the base price above."
            },
            "Sell": {
              "Label": "Sell Stock",
              "Supplement": "Sell"
            },
            "Stock": {
              "Buy": "Buying",
              "Sell": "Selling"
            },
            "Stocked": {
              "Label": "Fully Stock",
              "Hint": "Input the required cost to fully stock this facility below."
            }
          },
          "Types": {
            "Basic": {
              "Label": {
                "one": "Basic Facility",
                "other": "Basic Facilities"
              },
              "Bedroom": "Bedroom",
              "DiningRoom": "Dining Room",
              "Parlor": "Parlor",
              "Courtyard": "Courtyard",
              "Kitchen": "Kitchen",
              "Storage": "Storage"
            },
            "Special": {
              "Label": {
                "one": "Special Facility",
                "other": "Special Facilities"
              },
              "ArcaneStudy": "Arcane Study",
              "Armory": "Armory",
              "Barrack": "Barrack",
              "Garden": "Garden",
              "Library": "Library",
              "Sanctuary": "Sanctuary",
              "Smithy": "Smithy",
              "Storehouse": "Storehouse",
              "Workshop": "Workshop",
              "GamingHall": "Gaming Hall",
              "Greenhouse": "Greenhouse",
              "Laboratory": "Laboratory",
              "Sacristy": "Sacristy",
              "Scriptorium": "Scriptorium",
              "Stable": "Stable",
              "TeleportationCircle": "Teleportation Circle",
              "Theater": "Theater",
              "TrainingArea": "Training Area",
              "TrophyRoom": "Trophy Room",
              "Archive": "Archive",
              "MeditationChamber": "Meditation Chamber",
              "Menagerie": "Menagerie",
              "Observatory": "Observatory",
              "Pub": "Pub",
              "Reliquary": "Reliquary",
              "Demiplane": "Demiplane",
              "Guildhall": "Guildhall",
              "Sanctum": "Sanctum",
              "WarRoom": "War Room"
            }
          },
          "Use": {
            "Description": "Issued the <strong>{order}</strong> order to their {link} {facilityType}."
          }
        },
        "DND5E.Favorite": "Favorite",
        "DND5E.FavoriteDrop": "Drop Favorite",
        "DND5E.FavoriteRemove": "Remove Favorite",
        "DND5E.Favorites": "Favorites",
        "DND5E.FeatureActionRecharge": "Action Recharge",
        "DND5E.FEATURE": {
          "FIELDS": {
            "cover": {
              "label": "Cover",
              "hint": "Cover provided to crew by this vehicle feature."
            },
            "properties": {
              "label": "Feature Properties"
            },
            "requirements": {
              "label": "Requirements"
            },
            "type": {
              "label": "Feature Type"
            }
          }
        },
        "DND5E.Feature": {
          "Background": "Background Feature",
          "Class": {
            "Label": "Class Feature",
            "ArcaneShot": "Arcane Shot",
            "ArtificerInfusion": "Artificer Infusion",
            "ChannelDivinity": "Channel Divinity",
            "DefensiveTactic": "Defensive Tactic",
            "EldritchInvocation": "Eldritch Invocation",
            "ElementalDiscipline": "Elemental Discipline",
            "FightingStyle": "Fighting Style",
            "HuntersPrey": "Hunter's Prey",
            "Ki": "Ki Ability",
            "Maneuver": "Maneuver",
            "Metamagic": "Metamagic Option",
            "Multiattack": "Multiattack",
            "PactBoon": "Pact Boon",
            "PsionicPower": "Psionic Power",
            "Rune": "Rune",
            "SuperiorHuntersDefense": "Superior Hunter's Defense"
          },
          "Feat": {
            "Label": "Feat",
            "EpicBoon": "Epic Boon Feat",
            "FightingStyle": "Fighting Style Feat",
            "General": "General Feat",
            "Origin": "Origin Feat"
          },
          "Monster": "Monster Feature",
          "Species": "Species Feature",
          "SpeciesLegacy": "Race Feature",
          "SupernaturalGift": {
            "Label": "Supernatural Gift",
            "Blessing": "Blessing",
            "Charm": "Charm",
            "EpicBoon": "Epic Boon"
          },
          "Vehicle": {
            "Label": "Vehicle Feature"
          }
        },
        "DND5E.Focus": {
          "Label": "Spellcasting Focus",
          "Arcane": "Arcane Focus",
          "Druidic": "Druidic Focus",
          "Holy": "Holy Focus"
        },
        "DND5E.Loot.Art": "Art Object",
        "DND5E.Loot.Gear": "Adventuring Gear",
        "DND5E.Loot.Gem": "Gemstone",
        "DND5E.Loot.Junk": "Junk",
        "DND5E.Loot.Material": "Material",
        "DND5E.Loot.Resource": "Resource",
        "DND5E.Loot.Treasure": "Treasure",
        "DND5E.Flaws": "Flaws",
        "DND5E.FormulaCannotContainDiceError": "{name} formula cannot contain dice expressions.",
        "DND5E.FORWARD": {
          "Title": "Forward",
          "FIELDS": {
            "activity": {
              "label": "Triggered Activity"
            }
          },
          "Warning": {
            "NoActivity": "Linked activity must be configured before Forward activity can be used."
          }
        },
        "DND5E.EffectCreate": "Create Effect",
        "DND5E.EffectToggle": "Toggle Effect",
        "DND5E.EffectEdit": "Edit Effect",
        "DND5E.EffectEnable": "Enable Effect",
        "DND5E.EffectDelete": "Delete Effect",
        "DND5E.EffectDisable": "Disable Effect",
        "DND5E.EffectTemporary": "Temporary Effects",
        "DND5E.EffectPassive": "Passive Effects",
        "DND5E.EffectInactive": "Inactive Effects",
        "DND5E.EffectNew": "New Effect",
        "DND5E.EffectType": {
          "Inactive": "Inactive",
          "Passive": "Passive",
          "Temporary": "Temporary",
          "Unavailable": "Unavailable"
        },
        "DND5E.EffectUnavailable": "Unavailable Effects",
        "DND5E.EffectUnavailableInfo": "Source item must be equipped or attuned to activate these",
        "DND5E.Encumbrance": "Encumbrance",
        "DND5E.Eyes": "Eyes",
        "DND5E.Faith": "Faith",
        "DND5E.FeatureActive": "Active Abilities",
        "DND5E.FeatureAdd": "Create Feature",
        "DND5E.FeatureAttack": "Feature Attack",
        "DND5E.FeaturePassive": "Passive Abilities",
        "DND5E.FeatureRechargeOn": "Recharge On",
        "DND5E.FeatureRechargeResult": "1d6 Result",
        "DND5E.FeatureSearch": "Search features",
        "DND5E.FeatureUsage": "Feature Usage",
        "DND5E.Features": "Features",
        "DND5E.FeaturesBackground": "Background Features",
        "DND5E.FeaturesClass": "{class} Features",
        "DND5E.FeaturesOther": "Other Features",
        "DND5E.Feats": "Feats",
        "DND5E.FeetAbbr": "ft.",
        "DND5E.Filter": "Filter",
        "DND5E.FilterClear": "Clear Filters",
        "DND5E.FilterGroupCategory": "Group by Category",
        "DND5E.FilterGroupOrigin": "Group by Origin",
        "DND5E.FilterGroupAction": "Group by Action",
        "DND5E.FilterNoSpells": "No spells found for this set of filters.",
        "DND5E.NoSpellLevels": "This character has no spellcaster levels, but you may add spells manually.",
        "DND5E.FLAGS": {
          "EnhancedDualWielding": {
            "Name": "Enhanced Dual Wielding",
            "Hint": "Allow bonus action extra attacks using any melee weapon without the Two-Handed property."
          }
        },
        "DND5E.FlagsInstructions": "Configure character features and traits which fine-tune behaviors of the D&D Fifth Edition system.",
        "DND5E.FlagsSave": "Update Special Traits",
        "DND5E.FlagsTitle": "Configure Special Traits",
        "DND5E.FlagsDiamondSoul": "Diamond Soul",
        "DND5E.FlagsDiamondSoulHint": "Gain proficiency to all saving throws.",
        "DND5E.FlagsPowerfulBuild": "Powerful Build",
        "DND5E.FlagsPowerfulBuildHint": "Provides increased carrying capacity.",
        "DND5E.FlagsElvenAccuracy": "Elven Accuracy",
        "DND5E.FlagsElvenAccuracyHint": "Roll an extra d20 with advantage to Dex, Int, Wis, or Cha.",
        "DND5E.FlagsHalflingLucky": "Halfling Lucky",
        "DND5E.FlagsHalflingLuckyHint": "Reroll ones when rolling d20 checks.",
        "DND5E.FlagsHalflingNimbleness": "Halfling Nimbleness",
        "DND5E.FlagsHalflingNimblenessHint": "Movement through larger creatures is not blocked.",
        "DND5E.FlagsAlert": "Alert Feat",
        "DND5E.FlagsAlertHint": "Proficient in Initiative rolls.",
        "DND5E.FlagsAlertHintLegacy": "Provides +5 to Initiative.",
        "DND5E.FlagsJOAT": "Jack of All Trades",
        "DND5E.FlagsJOATHint": "Half-Proficiency to Ability Checks in which you are not already Proficient.",
        "DND5E.FlagsObservant": "Observant Feat",
        "DND5E.FlagsObservantHint": "Provides a +5 to passive Perception and Investigation.",
        "DND5E.FlagsTavernBrawler": "Tavern Brawler Feat",
        "DND5E.FlagsTavernBrawlerHint": "Proficient with improvised weapons.",
        "DND5E.FlagsReliableTalent": "Reliable Talent",
        "DND5E.FlagsReliableTalentHint": "Rogues Reliable Talent Feature.",
        "DND5E.FlagsRemarkableAthlete": "Remarkable Athlete",
        "DND5E.FlagsRemarkableAthleteHint": "Half-Proficiency (rounded-up) to physical Ability Checks and Initiative.",
        "DND5E.FlagsWeaponCritThreshold": "Weapon Critical Hit Threshold",
        "DND5E.FlagsWeaponCritThresholdHint": "An expanded critical hit threshold for weapon attacks.",
        "DND5E.FlagsSpellCritThreshold": "Spell Critical Hit Threshold",
        "DND5E.FlagsSpellCritThresholdHint": "An expanded critical hit threshold for spell attacks.",
        "DND5E.FlagsMeleeCriticalDice": "Melee Critical Damage Dice",
        "DND5E.FlagsMeleeCriticalDiceHint": "A number of additional damage dice added to melee weapon critical hits.",
        "DND5E.FlagsToolExpertise": "Tool Expertise",
        "DND5E.FlagsToolExpertiseHint": "Doubles your proficiency bonus for any ability check you make that uses your proficiency with a tool.",
        "DND5E.Flat": "Flat",
        "DND5E.Formula": "Formula",
        "DND5E.FormulaMalformedError": "Problem preparing the {property} formula within {name}.",
        "DND5E.FormulaMissingReferenceWarn": "The {property} formula within {name} has references to missing data: {references}",
        "DND5E.Gear": "Gear",
        "DND5E.Gender": "Gender",
        "DND5E.GlobalBonus": "Global Bonus",
        "DND5E.GrantedAbilities": "Granted Abilities",
        "DND5E.GroupInventory": "Inventory",
        "DND5E.GroupHP": "Aggregate Hit Points",
        "DND5E.GroupSummary": "A group of {members}",
        "DND5E.GroupSummaryEmpty": "Empty group",
        "DND5E.GroupControls": "Controls",
        "DND5E.Group": {
          "Action": {
            "ChangePace": "Change Pace",
            "Remove": "Remove Member",
            "View": "View Member"
          },
          "Config": {
            "Art": {
              "Label": "Member Art",
              "portraits": "Portraits",
              "tokens": "Tokens"
            },
            "Legend": "Group Sheet Options"
          },
          "Challenge": "Challenge",
          "Distribute": {
            "noxp": "Distribute pooled currency",
            "xp": "Distribute pooled XP & currency"
          },
          "Member": {
            "one": "Member",
            "other": "Members"
          },
          "PlaceMembers": "Place Members",
          "Primary": {
            "Remove": "Remove as Primary Party",
            "Set": "Set as Primary Party"
          },
          "Type": "Group Type",
          "TypeEncounter": "Encounter",
          "TypeGeneric": "Group",
          "TypeParty": "Party",
          "Vehicle": {
            "one": "Vehicle",
            "other": "Vehicles"
          },
          "Warning": {
            "PhysicalItemOnly": "Only physical items are supported."
          }
        },
        "DND5E.Habitat": {
          "Categories": {
            "Any": "Any",
            "Arctic": "Arctic",
            "Coastal": "Coastal",
            "Desert": "Desert",
            "Forest": "Forest",
            "Grassland": "Grassland",
            "Hill": "Hill",
            "Mountain": "Mountain",
            "Planar": "Planar",
            "Swamp": "Swamp",
            "Underdark": "Underdark",
            "Underwater": "Underwater",
            "Urban": "Urban"
          },
          "Configuration": {
            "Custom": "Custom",
            "Label": "Habitat",
            "Legend": "Categories",
            "Subtype": "{type} Subtype",
            "Title": "Configure Habitat"
          },
          "Subtype": "{type} ({subtype})"
        },
        "DND5E.Hair": "Hair",
        "DND5E.HalfProficient": "Half Proficient",
        "DND5E.HEAL": {
          "Title": "Heal",
          "FIELDS": {
            "healing": {
              "label": "Healing",
              "bonus": {
                "label": "Healing Bonus",
                "hint": "Bonus added to the healing roll."
              },
              "custom": {
                "label": "Custom Healing Formula",
                "enabled": {
                  "label": "Enable Custom Formula",
                  "hint": "Should the custom formula be used rather than the default dice."
                },
                "formula": {
                  "label": "Healing Formula",
                  "hint": "Custom healing formula."
                }
              },
              "denomination": {
                "label": "Die Denomination",
                "hint": "Denomination of the dice to roll."
              },
              "number": {
                "label": "Die Number",
                "hint": "Number of dice to roll."
              },
              "scaling": {
                "label": "Healing Scaling",
                "mode": {
                  "label": "Scaling Mode",
                  "hint": "Method by which the scaling increase is calculated."
                },
                "number": {
                  "label": "Dice Scaling",
                  "hint": "Number of dice to increase for each scaling step. Will be applied to the first die found in the healing formula if more than one is present."
                },
                "formula": {
                  "label": "Scaling Formula",
                  "hint": "Arbitrary scaling formula that will be multiplied for each scaling step and added to the original formula."
                }
              },
              "types": {
                "label": "Healing Types",
                "hint": "Type of healing inflicted or multiple for the user to select from."
              }
            }
          }
        },
        "DND5E.Healing": "Healing",
        "DND5E.HealingRoll": "Healing Roll",
        "DND5E.HealingTemp": "Temporary Hit Points",
        "DND5E.Height": "Height",
        "DND5E.HITPOINTS": {
          "Counted": {
            "one": "{number} hit point",
            "other": "{number} hit points"
          },
          "DT": {
            "Abbr": "DT"
          }
        },
        "DND5E.HitPoints": "Hit Points",
        "DND5E.HitPointsBonusLevel": "Per Level Bonus",
        "DND5E.HitPointsBonusOverall": "Overall Bonus",
        "DND5E.HitPointsConfig": "Configure Hit Points",
        "DND5E.HitPointsCurrent": "Current Hit Points",
        "DND5E.HitPointsMax": "Maximum Hit Points",
        "DND5E.HitPointsMin": "Minimum Hit Points",
        "DND5E.HitPointsOverride": "Maximum Override",
        "DND5E.HitPointsOverrideHint": "Override automatically calculated hit points, ignoring any HP from classes, bonuses, and ability modifier.",
        "DND5E.HitPointsTemp": "Temporary Hit Points",
        "DND5E.HitPointsTempShort": "Temporary HP",
        "DND5E.HitPointsTempMax": "Temporary Maximum",
        "DND5E.HitPointsTempMaxHint": "Temporary change to the maximum HP.",
        "DND5E.HitPointsTempMaxShort": "Temp Max HP",
        "DND5E.HP": "HP",
        "DND5E.HPFormula": "Health Formula",
        "DND5E.HPFormulaError": "The provided hit point formula could not be evaluated.",
        "DND5E.HPFormulaRollMessage": "Roll Hit Point Formula",
        "DND5E.HITDICE": {
          "Abbreviation": "HD",
          "Action": {
            "Decrease": "Decrease",
            "Increase": "Increase"
          },
          "Available": "{number} available",
          "Config": "Adjust Hit Dice",
          "Counted": {
            "one": "{number} hit die",
            "other": "{number} hit dice"
          }
        },
        "DND5E.HitDie": "Hit Die",
        "DND5E.HitDice": "Hit Dice",
        "DND5E.HitDiceConfig": "Adjust Hit Dice",
        "DND5E.HitDiceConfigHint": "Adjust remaining hit dice levels for each class.",
        "DND5E.HitDiceMax": "Maximum Hit Dice",
        "DND5E.HitDiceRemaining": "Remaining Hit Dice",
        "DND5E.HitDiceRoll": "Roll Hit Dice",
        "DND5E.HitDiceWarn": "{name} has no available {formula} Hit Dice remaining!",
        "DND5E.HitDiceNPCWarn": "{name} has no available Hit Dice remaining!",
        "DND5E.Ideals": "Ideals",
        "DND5E.Identified": "Identified",
        "DND5E.Identifier": "Identifier",
        "DND5E.IdentifierError": "An identifier can only contain letters (a-z), numbers (0-9), dashes (-), and underscores (_).",
        "DND5E.Identify": "Identify",
        "DND5E.Immunities": "Immunities",
        "DND5E.Initiative": "Initiative",
        "DND5E.InitiativeAbbr": "Init",
        "DND5E.InitiativeBonus": "Initiative Bonus",
        "DND5E.InitiativeRoll": "Initiative Roll",
        "DND5E.InitiativeConfig": "Configure Initiative",
        "DND5E.InitiativeConfigHint": "Configure initiative modifiers and bonuses which apply to this Actor.",
        "DND5E.Inspiration": "Inspiration",
        "DND5E.Inventory": "Inventory",
        "DND5E.InventorySearch": "Search inventory",
        "DND5E.Issues": "Issues",
        "DND5E.ItemActionType": "Action Type",
        "DND5E.ItemActivation": "Activation",
        "DND5E.ItemActivationCondition": "Activation Condition",
        "DND5E.ItemActivationCost": "Activation Cost",
        "DND5E.ItemActivationType": "Activation Type",
        "DND5E.ItemAmmoProperties": "Ammunition Properties",
        "DND5E.ItemAttackBonus": "Attack Roll Bonus",
        "DND5E.ItemAttackFlat": "Flat Bonus",
        "DND5E.ItemAttackFlatHint": "If checked, don't add proficiency, ability modifier, or any other bonuses to attack roll except what is included here.",
        "DND5E.ItemBackgroundDetails": "Background Details",
        "DND5E.ItemClassDetails": "Class Details",
        "DND5E.ItemConsumableActivation": "Consumable Activation",
        "DND5E.ItemConsumableUsage": "Consumable Usage",
        "DND5E.ItemConsumableDetails": "Consumable Details",
        "DND5E.ItemConsumableProperties": "Consumable Properties",
        "DND5E.ItemConsumableStatus": "Consumable Status",
        "DND5E.ItemConsumableSubtype": "{category} Type",
        "DND5E.ItemConsumableType": "Consumable Type",
        "DND5E.ItemCreate": "Create Item",
        "DND5E.ItemCritThreshold": "Critical Hit Threshold",
        "DND5E.ItemCritExtraDamage": "Extra Critical Hit Damage",
        "DND5E.ItemDelete": "Delete Item",
        "DND5E.ItemEdit": "Edit Item",
        "DND5E.ItemEquipmentAction": "Equipment Action",
        "DND5E.ItemEquipmentBase": "Base Equipment",
        "DND5E.ItemEquipmentDetails": "Equipment Details",
        "DND5E.ItemEquipmentDexMod": "Max. Dexterity Modifier",
        "DND5E.ItemEquipmentDexModAbbr": "Max Dex",
        "DND5E.ItemEquipmentProperties": "Equipment Properties",
        "DND5E.ItemEquipmentStatus": "Equipment Status",
        "DND5E.ItemEquipmentStealthDisav": "Imposes Stealth Disadvantage",
        "DND5E.ItemEquipmentType": "Equipment Type",
        "DND5E.ItemEquipmentUsage": "Equipment Usage",
        "DND5E.ItemFacilityDetails": "Facility Details",
        "DND5E.ItemFeatureDetails": "Feature Details",
        "DND5E.ItemFeatureProperties": "Feature Properties",
        "DND5E.ItemFeatureSubtype": "{category} Type",
        "DND5E.ItemFeatureType": "Feature Type",
        "DND5E.ItemLootDetails": "Loot Details",
        "DND5E.ItemLootProperties": "Loot Properties",
        "DND5E.ItemLootSubtype": "{category} Type",
        "DND5E.ItemLootType": "Loot Type",
        "DND5E.ItemName": "Item Name",
        "DND5E.ItemNew": "New {type}",
        "DND5E.ItemRarityCommon": "common",
        "DND5E.ItemRarityMundane": "mundane",
        "DND5E.ItemRarityUncommon": "uncommon",
        "DND5E.ItemRarityRare": "rare",
        "DND5E.ItemRarityVeryRare": "very rare",
        "DND5E.ItemRarityLegendary": "legendary",
        "DND5E.ItemRarityArtifact": "artifact",
        "DND5E.ItemRechargeCheck": "{name} recharge check - {result}",
        "DND5E.ItemRechargeFailure": "failure!",
        "DND5E.ItemRechargeSuccess": "success!",
        "DND5E.ItemRecoveryRoll": "{name} recovers {count} charges",
        "DND5E.ItemLossRoll": "{name} loses {count} charges",
        "DND5E.ItemRecoveryRollMax": "{name} recovers all charges",
        "DND5E.ItemRecoveryFormulaWarning": "Unable to recover uses for {name}. Invalid recovery formula '{formula}' ({uuid}).",
        "DND5E.ItemRequiredStr": "Required Strength",
        "DND5E.Items": "Items",
        "DND5E.ItemSiegeProperties": "Siege Properties",
        "DND5E.ItemSpeciesDetails": "Species Details",
        "DND5E.ItemSpeciesDetailsLegacy": "Race Details",
        "DND5E.ItemSubclassDetails": "Subclass Details",
        "DND5E.ItemToolBase": "Base Tool",
        "DND5E.ItemToolBonus": "Tool Bonus",
        "DND5E.ItemToolDetails": "Tool Details",
        "DND5E.ItemToolProficiency": "Tool Proficiency",
        "DND5E.ItemToolProperties": "Tool Properties",
        "DND5E.ItemToolStatus": "Tool Status",
        "DND5E.ItemToolType": "Tool Type",
        "DND5E.ItemToolUsage": "Tool Usage",
        "DND5E.ItemVehicleProperties": "Vehicle Properties",
        "DND5E.ItemView": "View Item",
        "DND5E.ItemWeaponAttack": "Weapon Attack",
        "DND5E.ItemWeaponBase": "Base Weapon",
        "DND5E.ItemWeaponDetails": "Weapon Details",
        "DND5E.ItemWeaponProperties": "Weapon Properties",
        "DND5E.ItemWeaponStatus": "Weapon Status",
        "DND5E.ItemWeaponType": "Weapon Type",
        "DND5E.ItemWeaponUsage": "Weapon Usage",
        "DND5E.ITEM": {
          "Category": {
            "Label": "Category",
            "Physical": "Physical"
          },
          "Property": {
            "Adamantine": "Adamantine",
            "Ammunition": "Ammunition",
            "Concentration": "Concentration",
            "Finesse": "Finesse",
            "Firearm": "Firearm",
            "Focus": "Focus",
            "Heavy": "Heavy",
            "Light": "Light",
            "Loading": "Loading",
            "Material": "Material",
            "Magical": "Magical",
            "Reach": "Reach",
            "Reload": "Reload",
            "Returning": "Returning",
            "Ritual": "Ritual",
            "Sidekick": "Sidekick",
            "Silvered": "Silvered",
            "Somatic": "Somatic",
            "Special": "Special",
            "StealthDisadvantage": "Stealth Disadvantage",
            "Thrown": "Thrown",
            "Trait": "Passive Trait",
            "TwoHanded": "Two-Handed",
            "Versatile": "Versatile",
            "Verbal": "Verbal",
            "WeightlessContents": "Weightless Contents"
          },
          "SECTIONS": {
            "Activities": "Activities",
            "Advancement": "Advancement",
            "Contents": "Contents",
            "Description": "Description",
            "Details": "Details",
            "Effects": "Effects"
          }
        },
        "DND5E.JackOfAllTrades": "Jack of all Trades",
        "DND5E.JOURNALENTRY": {
          "Navigation": {
            "Next": "Next",
            "Previous": "Previous",
            "Up": "Up"
          }
        },
        "DND5E.LAIR": {
          "Label": "Lair",
          "Action": {
            "Label": "Lair Action",
            "Initiative": "Lair Action Initiative Count",
            "Uses": "Uses Lair Action"
          },
          "HasLair": "Has Lair",
          "Inside": "Inside Lair"
        },
        "DND5E.Language": {
          "All": "All Languages",
          "Label": "Language",
          "Category": {
            "Exotic": "Exotic Languages",
            "Rare": "Rare Languages",
            "Standard": "Standard Languages"
          },
          "Communication": {
            "Label": "Ranged Communication",
            "Telepathy": "Telepathy"
          },
          "Language": {
            "Aarakocra": "Aarakocra",
            "Abyssal": "Abyssal",
            "Aquan": "Aquan",
            "Auran": "Auran",
            "Celestial": "Celestial",
            "Common": "Common",
            "CommonSign": "Common Sign Language",
            "DeepSpeech": "Deep Speech",
            "Draconic": "Draconic",
            "Druidic": "Druidic",
            "Dwarvish": "Dwarvish",
            "Elvish": "Elvish",
            "Giant": "Giant",
            "Gith": "Gith",
            "Gnoll": "Gnoll",
            "Gnomish": "Gnomish",
            "Goblin": "Goblin",
            "Halfling": "Halfling",
            "Ignan": "Ignan",
            "Infernal": "Infernal",
            "Orc": "Orc",
            "Primordial": "Primordial",
            "Sylvan": "Sylvan",
            "Terran": "Terran",
            "ThievesCant": "Thieves' Cant",
            "Undercommon": "Undercommon"
          }
        },
        "DND5E.Languages": "Languages",
        "DND5E.LegendaryAction": {
          "Description": "Legendary Action Uses: {uses}. Immediately after another creature\u2019s turn, the {name} can expend a use to take one of the following actions. The {name} regains all expended uses at the start of each of its turns.",
          "DescriptionLegacy": "The {name} can take {usesNamed}, choosing from the options below. Only one legendary action option can be used at a time and only at the end of another creature\u2019s turn. The {name} regains spent legendary actions at the start of its turn.",
          "Label": "Legendary Action",
          "LabelPl": "Legendary Actions",
          "LairUses": "{normal} ({lair} in Lair)",
          "Max": "Maximum Legendary Actions",
          "Ordinal": {
            "one": "{n}st Legendary Action",
            "two": "{n}nd Legendary Action",
            "few": "{n}rd Legendary Action",
            "other": "{n}th Legendary Action"
          },
          "Remaining": "Remaining Legendary Actions",
          "Spent": "Spent Legendary Actions"
        },
        "DND5E.LegendaryResistance": {
          "Action": {
            "Resist": "Legendary Resistance"
          },
          "Label": "Legendary Resistance",
          "LabelPl": "Legendary Resistances",
          "Max": "Maximum Legendary Resistances",
          "Ordinal": {
            "one": "{n}st Legendary Resistance",
            "two": "{n}nd Legendary Resistance",
            "few": "{n}rd Legendary Resistance",
            "other": "{n}th Legendary Resistance"
          },
          "Remaining": "Remaining Legendary Resistances",
          "Resisted": "Used Legendary Resistance",
          "Spent": "Spent Legendary Resistances"
        },
        "DND5E.Level": "Level",
        "DND5E.LevelAvg": "Avg. Level",
        "DND5E.LevelPl": "Levels",
        "DND5E.LevelActionDecrease": "Level Down",
        "DND5E.LevelActionIncrease": "Level Up",
        "DND5E.LevelCount": "{ordinal} Level",
        "DND5E.LevelLimit": {
          "Label": "Level Limit",
          "Max": "Maximum Level",
          "Min": "Minimum Level"
        },
        "DND5E.LevelNumber": "Level {level}",
        "DND5E.LevelScaling": "Level Scaling",
        "DND5E.LimitedUses": "Limited Uses",
        "DND5E.LimitedUsesAvailable": "Remaining Uses",
        "DND5E.LimitedUsesMax": "Maximum Uses",
        "DND5E.LimitedUsesPer": "Use Recovery Mode",
        "DND5E.LimitedUsesPrompt": "Uses Prompt",
        "DND5E.LimitedUsesPromptTooltip": "If unchecked, the prompt to consume an available use will be suppressed.",
        "DND5E.Long": "Long",
        "DND5E.Loyalty": "Loyalty",
        "DND5E.MagicalBonus": "Magical Bonus",
        "DND5E.Materials": "Materials",
        "DND5E.Max": "Max",
        "DND5E.MaxCharacterLevelExceededWarn": "Character cannot be advanced past level {max}.",
        "DND5E.MaxClassLevelExceededWarn": "Class cannot be advanced past level {max}.",
        "DND5E.MaxClassLevelMinimumWarn": "Class must have at least one level.",
        "DND5E.Maximum": "Maximum",
        "DND5E.Minimum": "Minimum",
        "DND5E.Method": "Method",
        "DND5E.Modifier": "Modifier",
        "DND5E.ModuleArtConfigH": "Configure which module-provided art should be used.",
        "DND5E.ModuleArtConfigL": "Configure Art",
        "DND5E.ModuleArtConfigN": "Module-provided Art",
        "DND5E.ModuleArtConfigPortraits": "Portraits",
        "DND5E.ModuleArtConfigTokens": "Tokens",
        "DND5E.ModuleArtPriorityDecrease": "Decrease Priority",
        "DND5E.ModuleArtPriorityHint": "Use the arrows to adjust the priority of the art sources. When a single Actor has art provided from multiple sources, the one with the highest priority will be used.",
        "DND5E.ModuleArtPriorityIncrease": "Increase Priority",
        "DND5E.Multiple": "Multiple",
        "DND5E.Multiplier": "Multiplier",
        "DND5E.MythicActionLabel": "Mythic Action",
        "DND5E.Name": "Character Name",
        "DND5E.NameUnidentified": "Unidentified Name",
        "DND5E.NoCharges": "No Charges",
        "DND5E.None": "None",
        "DND5E.NoneActionLabel": "None",
        "DND5E.Normal": "Normal",
        "DND5E.NotProficient": "Not Proficient",
        "DND5E.Notes": "Notes",
        "DND5E.NPC": {
          "Label": "NPC",
          "FIELDS": {
            "traits": {
              "important": {
                "hint": "Important NPCs track death saves, hit dice, and loyalty (if enabled). Any NPC with class levels is considered important regardless of this setting.",
                "label": "Important NPC"
              }
            }
          },
          "SECTIONS": {
            "Actions": "Actions",
            "BonusActions": "Bonus Actions",
            "LegendaryActions": "Legendary Actions",
            "Reactions": "Reactions",
            "Traits": "Traits"
          }
        },
        "DND5E.NUMBER": {
          "1": "one",
          "2": "two",
          "3": "three",
          "4": "four",
          "5": "five",
          "6": "six",
          "7": "seven",
          "8": "eight",
          "9": "nine"
        },
        "DND5E.Number": "Number",
        "DND5E.OtherFormula": "Other Formula",
        "DND5E.ORDINAL": {
          "one": "{number}st",
          "two": "{number}nd",
          "few": "{number}rd",
          "other": "{number}th"
        },
        "DND5E.PactMagic": "Pact Magic",
        "DND5E.Passive": "Passive",
        "DND5E.PassivePerception": "Passive Perception",
        "DND5E.Period": "Period",
        "DND5E.PersonalityTraits": "Personality Traits",
        "DND5E.Portrait": "Portrait",
        "DND5E.Prepared": "Prepared",
        "DND5E.Preparation": "Preparation",
        "DND5E.Prerequisites": {
          "Header": "Feature Prerequisites",
          "FIELDS": {
            "prerequisites": {
              "items": {
                "hint": "Identifiers for items that the character must have before selecting this item.",
                "label": "Required Items"
              },
              "label": "Prerequisites",
              "level": {
                "hint": "Character or class level required to select this feature when levelling up.",
                "label": "Required Level"
              },
              "repeatable": {
                "hint": "This feature can be chosen more than once.",
                "label": "Repeatable"
              }
            }
          },
          "Warning": {
            "InvalidLevel": "must be at least level {level}",
            "Message": "{actor} {requirements} in order to take this {type}.",
            "MissingItem": "must have previously taken {items}",
            "NotRepeatable": "must not have taken this before"
          }
        },
        "DND5E.Price": "Price",
        "DND5E.Proficiency": "Proficiency",
        "DND5E.ProficiencyBonus": "Proficiency Bonus",
        "DND5E.ProficiencyBonusAbbr": "PB",
        "DND5E.ProficiencyConfigurationHint": "Configure proficiency and bonuses.",
        "DND5E.ProficiencyConfigureTitle": "Configure {label}",
        "DND5E.ProficiencyLevel": "Proficiency Level",
        "DND5E.ProficiencyOther": "Other",
        "DND5E.Proficient": "Proficient",
        "DND5E.Properties": "Properties",
        "DND5E.PropertyBase": "Base",
        "DND5E.PropertyTotal": "Total",
        "DND5E.Public": "Public",
        "DND5E.Quantity": "Quantity",
        "DND5E.QuantityAbbr": "Qty",
        "DND5E.QuantityFormula": "Quantity Formula",
        "DND5E.QuantityRoll": "Roll Quantities",
        "DND5E.RacialTraits": "Species Traits",
        "DND5E.RacialTraitsLegacy": "Racial Traits",
        "DND5E.RANGE": {
          "FIELDS": {
            "range": {
              "label": "Range",
              "long": {
                "label": "Long Range",
                "hint": "Far attack range of the weapon, if present on the weapon."
              },
              "override": {
                "label": "Override Range",
                "hint": "Use these range values instead of the item's when using this activity."
              },
              "reach": {
                "label": "Reach"
              },
              "special": {
                "label": "Special Range",
                "hint": "Description of any special range details."
              },
              "units": {
                "label": "Range Units",
                "hint": "Units used to measure range."
              },
              "value": {
                "label": "Range Value",
                "hint": "Value of the range in the specified units, if applicable."
              }
            }
          },
          "Formatted": {
            "Range": "range {range}",
            "Reach": "reach {reach}"
          }
        },
        "DND5E.Range": "Range",
        "DND5E.RangeDistance": "Distance",
        "DND5E.RangeLong": "Long Range",
        "DND5E.RangeNormal": "Normal Range",
        "DND5E.RangeUnits": "Range Type or Units",
        "DND5E.Rarity": "Rarity",
        "DND5E.Reaction": "Reaction",
        "DND5E.ReactionAbbr": "R",
        "DND5E.ReactionPl": "Reactions",
        "DND5E.Recharge": "Recharge",
        "DND5E.RechargeLong": "Recharge after a Long Rest",
        "DND5E.RechargeShort": "Recharge after a Short or Long Rest",
        "DND5E.Recovery": "Recovery",
        "DND5E.RecoveryFormula": "Recovery Formula",
        "DND5E.REGIONBEHAVIORS": {
          "DIFFICULTTERRAIN": {
            "FIELDS": {
              "ignoredDispositions": {
                "hint": "Tokens with these dispositions will not be affected by this difficult terrain.",
                "label": "Ignored Dispositions"
              },
              "magical": {
                "hint": "This difficult terrain is created by a magical effect.",
                "label": "Magical"
              },
              "types": {
                "hint": "Types that best describe the source of this difficult terrain, if any.",
                "label": "Types"
              }
            },
            "Type": {
              "All": "All Types",
              "Ice": "Slippery Ice",
              "Magical": "Magical",
              "Nonmagical": "Nonmagical",
              "Plants": "Plants or Undergrowth",
              "Rocks": "Rubble or Rocks",
              "Liquid": "Shallow Liquid",
              "Slope": "Steep Slope",
              "Snow": "Deep Snow"
            }
          },
          "ROTATEAREA": {
            "Action": {
              "AddPosition": "Add Position",
              "DeletePosition": "Delete Position",
              "RotateToPosition": "Rotate to Position"
            },
            "DirectionMode": {
              "Clockwise": "Clockwise",
              "CounterClockwise": "Counter Clockwise",
              "Longest": "Longest",
              "Shortest": "Shortest"
            },
            "FIELDS": {
              "directionMode": {
                "label": "Direction Mode",
                "hint": "How the rotation direction is decided when moving to the next position."
              },
              "lights": {
                "ids": {
                  "label": "Lights"
                }
              },
              "positions": {
                "label": "Positions",
                "element": {
                  "angle": {
                    "label": "Angle"
                  }
                }
              },
              "regions": {
                "ids": {
                  "label": "Regions"
                }
              },
              "sounds": {
                "ids": {
                  "label": "Ambient Sounds"
                }
              },
              "tiles": {
                "ids": {
                  "label": "Tiles"
                }
              },
              "time": {
                "mode": {
                  "label": "Speed Mode",
                  "hint": "How the rotation speed is determined from the rotation time, either the same regardless of the distance moved (fixed) or dependant on the distance rotated (variable)."
                },
                "value": {
                  "label": "Rotation Time",
                  "hint": "Time in miliseconds to rotate to the next position (in fixed mode) or to rotate 90\u02da (in variable mode)."
                }
              },
              "walls": {
                "ids": {
                  "label": "Walls"
                },
                "link": {
                  "label": "Link Walls",
                  "hint": "Rotate any wall segments attached to the ones specified."
                }
              }
            },
            "SpeedMode": {
              "Fixed": "Fixed (total rotation time)",
              "Variable": "Variable (time to rotate 90\u02da)"
            },
            "Warning": {
              "RecursiveRegion": "Cannot rotate same region that contains the behavior."
            }
          }
        },
        "DND5E.Remaining": "Remaining",
        "DND5E.RequiredMaterials": "Required Materials",
        "DND5E.Requirements": "Requirements",
        "DND5E.Resistances": "Resistances",
        "DND5E.Resources": "Resources",
        "DND5E.ResourceLabel": "Label",
        "DND5E.ResourceMax": "Resource Maximum",
        "DND5E.ResourceValue": "Resource Value",
        "DND5E.ResourcePrimary": "Resource 1",
        "DND5E.ResourceSecondary": "Resource 2",
        "DND5E.ResourceTertiary": "Resource 3",
        "DND5E.REST": {
          "Configuration": "Rest Configuration",
          "HitDice": {
            "AutoSpend": {
              "Hint": "Automatically spend hit dice until they run out or health is full.",
              "Label": "Auto Spend HD"
            },
            "None": "No Hit Dice remaining to roll during this rest.",
            "Select": "Select Dice to Roll"
          },
          "Label": "Rest",
          "Long": {
            "Abbreviation": "LR",
            "Hint": {
              "Group": "On a long rest group members will recover hit points, hit dice, class resources, limited use item charges, and spell slots.",
              "GroupLegacy": "On a long rest group members will recover hit points, half of their maximum hit dice, class resources, limited use item charges, and spell slots.",
              "Normal": "On a long rest you will recover hit points, hit dice, class resources, limited use item charges, and spell slots.",
              "NormalLegacy": "On a long rest you will recover hit points, half your maximum hit dice, class resources, limited use item charges, and spell slots."
            },
            "Label": "Long Rest",
            "LabelShort": "L. Rest",
            "Recovery": "Recovers after Long Rest",
            "Result": {
              "Full": "{name} takes a long rest and recovers {health} and {dice}.",
              "HitDice": "{name} takes a long rest and recovers {dice}.",
              "HitPoints": "{name} takes a long rest and recovers {health}.",
              "Short": "{name} takes a long rest."
            }
          },
          "NewDay": {
            "Hint": "Recover limited use abilities which recharge at dusk, dawn, or on a new day.",
            "Label": "New Day"
          },
          "RecoverTempHP": {
            "Label": "Remove Temp HP"
          },
          "RecoverTempMaxHP": {
            "Hint": "Remove any adjustments to a character's maximum Hit Points.",
            "Label": "Recover Max HP"
          },
          "Request": {
            "AutoRest": {
              "Hint": "Automatically perform the rest for selected party actors, rather than sending a rest request to players.",
              "Label": "Auto Rest"
            },
            "Label": "Rest Request"
          },
          "Short": {
            "Abbreviation": "SR",
            "Hint": {
              "Group": "On a short rest group members can spend Hit Dice and will recover item uses.",
              "Normal": "On a short rest you may spend remaining Hit Dice and recover item uses."
            },
            "Label": "Short Rest",
            "LabelShort": "S. Rest",
            "Recovery": "Recovers after Short Rest",
            "Result": {
              "Full": "{name} takes a short rest spending {dice} to recover {health}.",
              "Short": "{name} takes a short rest."
            }
          },
          "Warning": {
            "OnlyByRequest": "Rests can only be performed at the request of the GM."
          }
        },
        "DND5E.Ritual": "Ritual",
        "DND5E.RitualAbbr": "R",
        "DND5E.ROLL": {
          "Range": {
            "Label": "Roll Range",
            "Maximum": "Maximum Roll",
            "Minimum": "Minimum Roll"
          },
          "Section": "{label} Rolls",
          "Status": "Status"
        },
        "DND5E.Roll": "Roll",
        "DND5E.RollConfiguration": {
          "Title": "Configure Roll",
          "Configuration": "Configuration",
          "Rolls": "Rolls"
        },
        "DND5E.RollExample": "e.g. 1d4",
        "DND5E.RollMode": "Roll Mode",
        "DND5E.RollSituationalBonus": "Situational Bonus?",
        "DND5E.Rule": {
          "Tooltip": "Tooltip",
          "Type": {
            "Label": "Rule Type",
            "Condition": "Condition",
            "Rule": "Rule"
          }
        },
        "DND5E.Movement": "Movement",
        "DND5E.MovementConfig": "Configure Movement Speed",
        "DND5E.MovementConfigHint": "Configure movement speed and special movement attributes.",
        "DND5E.MovementWalk": "Walk",
        "DND5E.MovementBurrow": "Burrow",
        "DND5E.MovementClimb": "Climb",
        "DND5E.MovementHover": "Hover",
        "DND5E.MovementFly": "Fly",
        "DND5E.MovementSwim": "Swim",
        "DND5E.MovementLand": "Land",
        "DND5E.MovementWater": "Water",
        "DND5E.MovementAir": "Air",
        "DND5E.MovementSpeeds": "Movement Speeds",
        "DND5E.MovementUnits": "Units",
        "DND5E.MovementIgnoredDifficultTerrain": "Ignored Difficult Terrain",
        "DND5E.SAVE": {
          "Title": {
            "one": "Save",
            "other": "Saves"
          },
          "FIELDS": {
            "damage": {
              "label": "Save Damage",
              "onSave": {
                "label": "Damage on Save",
                "hint": "How much damage should be applied on a successful save?",
                "Full": "Full Damage",
                "Half": "Half Damage",
                "None": "No Damage"
              },
              "parts": {
                "label": "Damage Parts",
                "hint": "Individual damage parts to include with the roll."
              }
            },
            "effects": {
              "onSave": {
                "label": "Always Apply",
                "hint": "This effect will always be applied, even if the target succeeds on its saving throw."
              }
            },
            "save": {
              "label": "Save Details",
              "ability": {
                "label": "Challenge Abilities",
                "hint": "Abilities that may be rolled to attempt to save."
              },
              "dc": {
                "label": "Difficulty Class",
                "calculation": {
                  "label": "DC Calculation",
                  "hint": "Method or ability used to calculate the difficulty class."
                },
                "formula": {
                  "label": "DC Formula",
                  "hint": "Custom formula or flat value for defining the save DC."
                },
                "CustomFormula": "Custom Formula",
                "DefaultFormula": "8 + @mod + @prof"
              }
            }
          },
          "OnSave": "On Save"
        },
        "DND5E.SaveBonus": "Saving Throw Bonus",
        "DND5E.SaveGlobalBonusHint": "This bonus applies to all saving throws made by this actor.",
        "DND5E.Scroll": {
          "CreateFrom": "Create Scroll from {spell}",
          "CreateScroll": "Create Scroll",
          "Details": "Scroll Details",
          "Explanation": {
            "Label": "Explanation",
            "Hint": "Amount of the rules on using spell scrolls to include in the created scroll.",
            "Complete": "Complete",
            "Reference": "Reference"
          },
          "RequiresConcentration": "Requires Concentration",
          "SaveDC": "Save DC",
          "Values": "Spell Values"
        },
        "DND5E.Senses": "Senses",
        "DND5E.SensesConfig": "Configure Senses",
        "DND5E.SensesConfigHint": "Configure any special sensory perception abilities that this actor possesses.",
        "DND5E.SenseDarkvision": "Darkvision",
        "DND5E.SenseBlindsight": "Blindsight",
        "DND5E.SenseTremorsense": "Tremorsense",
        "DND5E.SenseTruesight": "Truesight",
        "DND5E.SenseUnits": "Units",
        "DND5E.SenseSpecial": "Special Senses",
        "DND5E.Shape": "Shape",
        "DND5E.SheetClass": {
          "Character": "Default 5e Character Sheet",
          "ClassSummary": "Default 5e Class Summary Sheet",
          "Container": "Default 5e Container Sheet",
          "DifficultTerrain": "Default 5e Difficult Terrain Sheet",
          "Encounter": "Default 5e Encounter Sheet",
          "Group": "Default 5e Group Sheet",
          "Item": "Default 5e Item Sheet",
          "JournalEntry": "Default 5e Journal Entry Sheet",
          "JournalEntryLegacy": "Legacy 5e Journal Entry Sheet",
          "MapLocation": "Default 5e Map Location Sheet",
          "NPC": "Default 5e NPC Sheet",
          "RotateArea": "Default 5e Rotate Area Sheet",
          "Rule": "Default 5e Rule Sheet",
          "SpellList": "Default 5e Spell List Sheet",
          "Token": "Default 5e Token Sheet",
          "Vehicle": "Default 5e Vehicle Sheet"
        },
        "DND5E.SheetModeEdit": "Edit",
        "DND5E.SheetModePlay": "Play",
        "DND5E.SavingThrow": "Saving Throw",
        "DND5E.SavingThrowDC": "DC {dc} {ability} Saving Throw",
        "DND5E.SavingThrowRoll": "Roll {ability} Saving Throw",
        "DND5E.SavingThrowShort": "Save",
        "DND5E.SaveDC": "DC {dc} {ability}",
        "DND5E.SavePromptTitle": "{ability} Saving Throw",
        "DND5E.ScalingFormula": "Scaling Formula",
        "DND5E.ScalingMode": "Scaling Mode",
        "DND5E.ScalingValue": "Scaling Value",
        "DND5E.School": "School",
        "DND5E.SchoolAbj": "Abjuration",
        "DND5E.SchoolCon": "Conjuration",
        "DND5E.SchoolDiv": "Divination",
        "DND5E.SchoolEnc": "Enchantment",
        "DND5E.SchoolEvo": "Evocation",
        "DND5E.SchoolIll": "Illusion",
        "DND5E.SchoolNec": "Necromancy",
        "DND5E.SchoolTrs": "Transmutation",
        "DND5E.Size": "Size",
        "DND5E.SizeGargantuan": "Gargantuan",
        "DND5E.SizeGargantuanAbbr": "Gt",
        "DND5E.SizeHuge": "Huge",
        "DND5E.SizeHugeAbbr": "Hg",
        "DND5E.SizeLarge": "Large",
        "DND5E.SizeLargeAbbr": "Lg",
        "DND5E.SizeMedium": "Medium",
        "DND5E.SizeMediumAbbr": "Md",
        "DND5E.SizeSmall": "Small",
        "DND5E.SizeSmallAbbr": "Sm",
        "DND5E.SizeTiny": "Tiny",
        "DND5E.SizeTinyAbbr": "Tn",
        "DND5E.SKILL": {
          "SECTIONS": {
            "Details": "{label} Details",
            "Bonuses": {
              "Label": "{label} Bonuses",
              "Hint": "These bonuses apply to passive scores & checks made with {label}."
            },
            "Global": {
              "Label": "Global Bonuses",
              "Hint": "These bonuses apply to checks made with any skill."
            }
          }
        },
        "DND5E.Skill": "Skill",
        "DND5E.Skills": "Skills",
        "DND5E.SkillAcr": "Acrobatics",
        "DND5E.SkillAni": "Animal Handling",
        "DND5E.SkillArc": "Arcana",
        "DND5E.SkillAth": "Athletics",
        "DND5E.SkillDec": "Deception",
        "DND5E.SkillHis": "History",
        "DND5E.SkillIns": "Insight",
        "DND5E.SkillInv": "Investigation",
        "DND5E.SkillItm": "Intimidation",
        "DND5E.SkillMed": "Medicine",
        "DND5E.SkillNat": "Nature",
        "DND5E.SkillPer": "Persuasion",
        "DND5E.SkillPrc": "Perception",
        "DND5E.SkillPrf": "Performance",
        "DND5E.SkillRel": "Religion",
        "DND5E.SkillSlt": "Sleight of Hand",
        "DND5E.SkillSte": "Stealth",
        "DND5E.SkillSur": "Survival",
        "DND5E.SkillRoll": "Roll {ability} ({skill}) Check",
        "DND5E.SkillPromptTitle": "{ability} ({skill}) Check",
        "DND5E.SkillConfigureTitle": "Configure {skill}",
        "DND5E.SkillConfigure": "Configure Skill",
        "DND5E.SkillsConfig": "Configure Skills",
        "DND5E.SkillBonuses": "Skill Bonuses",
        "DND5E.SkillBonusCheck": "Check Bonus",
        "DND5E.SkillBonusPassive": "Passive Bonus",
        "DND5E.SkillConfigurationHint": "Configure skill proficiency and bonuses.",
        "DND5E.SkillGlobalBonusCheckHint": "This bonus applies to all skill checks made by this actor.",
        "DND5E.SkillModifierHint": "{skill} Modifier",
        "DND5E.SkillPassiveHint": "Passive {skill}",
        "DND5E.SkillPassiveSpecificHint": "Passive {ability} ({skill})",
        "DND5E.SkillPassiveScore": "Passive {skill} Score",
        "DND5E.SkillPassives": "Skill Passives",
        "DND5E.Skin": "Skin",
        "DND5E.Skip": "Skip",
        "DND5E.SOURCE": {
          "FIELDS": {
            "source": {
              "label": "Source",
              "book": {
                "label": "Book"
              },
              "custom": {
                "label": "Custom Label"
              },
              "license": {
                "label": "License"
              },
              "page": {
                "label": "Page/Section"
              },
              "revision": {
                "label": "Revision"
              },
              "rules": {
                "label": "Rules Version"
              },
              "uuid": {
                "label": "Original Source"
              }
            }
          },
          "Action": {
            "Configure": "Configure Source"
          },
          "Display": {
            "Full": "{book} {page}",
            "Page": "pg. {page}"
          }
        },
        "DND5E.Special": "Special",
        "DND5E.SpecialHint": "Special values separated by semi-colons.",
        "DND5E.SpecialTraits": "Special Traits",
        "DND5E.Species": {
          "Label": "Species",
          "Add": "Add Species",
          "AddLegacy": "Add Race",
          "Features": "Species Features",
          "FeaturesLegacy": "Race Features",
          "Name": "Species Name"
        },
        "DND5E.Speed": "Speed",
        "DND5E.SpeedSpecial": "Special Movement",
        "DND5E.SpellAbility": "Spellcasting Ability",
        "DND5E.SpellAbilitySet": "Set as Primary Spellcasting Ability",
        "DND5E.SpellAdd": "Add Spell",
        "DND5E.SpellCantrip": "Cantrip",
        "DND5E.SpellCastConsume": "Consume Spell Slot?",
        "DND5E.SpellCastNoSlots": "You have no available {level} spell slots with which to cast {name}",
        "DND5E.SpellCastNoSlotsLeft": "You have no available spell slots with which to cast {name}!",
        "DND5E.SpellCastTime": "Casting Time",
        "DND5E.SpellCastUpcast": "Cast at Level",
        "DND5E.SpellcasterLevel": "Spellcaster Level",
        "DND5E.SpellCastingHeader": "Spell Casting",
        "DND5E.Spellcasting": "Spellcasting",
        "DND5E.SPELLCASTING": {
          "METHODS": {
            "AtWill": {
              "label": "At-Will"
            },
            "Innate": {
              "label": "Innate Spellcasting"
            },
            "Ritual": {
              "label": "Ritual Only"
            },
            "Spell": {
              "label": "Spellcasting",
              "Full": {
                "label": "Full Caster"
              },
              "Half": {
                "label": "Half Caster"
              },
              "Third": {
                "label": "Third Caster"
              },
              "Artificer": {
                "label": "Artificer"
              }
            },
            "Pact": {
              "abbr": "Pact",
              "label": "Pact Magic",
              "Full": {
                "label": "Pact Magic"
              }
            }
          },
          "SLOTS": {
            "spell0": "Cantrips",
            "spell1": "1st Level",
            "spell2": "2nd Level",
            "spell3": "3rd Level",
            "spell4": "4th Level",
            "spell5": "5th Level",
            "spell6": "6th Level",
            "spell7": "7th Level",
            "spell8": "8th Level",
            "spell9": "9th Level"
          },
          "STATES": {
            "Unprepared": "Not Prepared",
            "Prepared": "Prepared",
            "AlwaysPrepared": "Always Prepared"
          },
          "Unlabeled": "Unlabeled Spellcasting"
        },
        "DND5E.SpellcastingClass": "{class} Spellcasting",
        "DND5E.SpellComponent": "Spell Component",
        "DND5E.SpellComponents": "Spell Components",
        "DND5E.SpellCreate": "Create Spell",
        "DND5E.SpellDC": "Spell DC",
        "DND5E.SpellDetails": "Spell Details",
        "DND5E.SpellEffects": "Spell Effects",
        "DND5E.SpellHeader": {
          "Formula": "Formula",
          "Range": "Range",
          "Roll": "Roll",
          "School": "School",
          "Target": "Target",
          "Time": "Time"
        },
        "DND5E.SpellLevel": "Spell Level",
        "DND5E.SpellLevels": "Spell Levels",
        "DND5E.SpellLevel0": "Cantrip",
        "DND5E.SpellLevel1": "1st Level",
        "DND5E.SpellLevel2": "2nd Level",
        "DND5E.SpellLevel3": "3rd Level",
        "DND5E.SpellLevel4": "4th Level",
        "DND5E.SpellLevel5": "5th Level",
        "DND5E.SpellLevel6": "6th Level",
        "DND5E.SpellLevel7": "7th Level",
        "DND5E.SpellLevel8": "8th Level",
        "DND5E.SpellLevel9": "9th Level",
        "DND5E.SpellLevelSpell": "{level} ({n} Slots)",
        "DND5E.SpellLevelPact": "Pact Slot [Level {level}] ({n} Slots)",
        "DND5E.SpellMaterials": "Spellcasting Materials",
        "DND5E.SpellMaterialsConsumed": "Consume Materials",
        "DND5E.SpellMaterialsCost": "Material Cost",
        "DND5E.SpellMaterialsDescription": "Material Description",
        "DND5E.SpellMaterialsSupply": "Material Supply",
        "DND5E.SpellName": "Spell Name",
        "DND5E.SpellNone": "None",
        "DND5E.SpellPrepAtWill": "At-Will",
        "DND5E.SpellPrepInnate": "Innate Spellcasting",
        "DND5E.SpellPrepRitual": "Ritual Only",
        "DND5E.SpellPrepPrepared": "Prepared",
        "DND5E.SpellPrepAlways": "Always Prepared",
        "DND5E.SpellPreparation": {
          "Label": "Spell Preparation",
          "Formula": "Preparation Formula",
          "Method": "Spellcasting Method"
        },
        "DND5E.SpellSourceClass": "Source Class",
        "DND5E.SpellPrepared": "Prepared",
        "DND5E.SpellProgArt": "Artificer",
        "DND5E.SpellProgAvailable": "Available slots",
        "DND5E.SpellProgFull": "Full Caster",
        "DND5E.SpellProgHalf": "Half Caster",
        "DND5E.SpellProgLeveled": "Leveled Magic",
        "DND5E.SpellProgOverride": "Override slots",
        "DND5E.SpellProgPact": "Pact Magic",
        "DND5E.SpellProgThird": "Third Caster",
        "DND5E.SpellProgression": "Spell Progression",
        "DND5E.SpellsSearch": "Search spells",
        "DND5E.SpellSchool": "Spell School",
        "DND5E.SpellScroll": "Spell Scroll",
        "DND5E.SpellSlotExpended": "Expended Spell Slot",
        "DND5E.SpellSlotN.one": "{n}st spell slot",
        "DND5E.SpellSlotN.two": "{n}nd spell slot",
        "DND5E.SpellSlotN.few": "{n}rd spell slot",
        "DND5E.SpellSlotN.other": "{n}th spell slot",
        "DND5E.SpellSlotTemporary": "Temporary Spell Slot",
        "DND5E.SpellSlotsN.one": "{n}st Level Slots",
        "DND5E.SpellSlotsN.two": "{n}nd Level Slots",
        "DND5E.SpellSlotsN.few": "{n}rd Level Slots",
        "DND5E.SpellSlotsN.other": "{n}th Level Slots",
        "DND5E.SpellSlotsPact": "Pact Slots",
        "DND5E.SpellSlotsConfig": "Configure Spell Slots",
        "DND5E.SpellTag": "Spell Tag",
        "DND5E.SpellTarget": "Spell Target",
        "DND5E.SpellUnprepared": "Unprepared",
        "DND5E.SpellUsage": "Spell Usage",
        "DND5E.Spellbook": "Spellbook",
        "DND5E.Spent": "Spent",
        "DND5E.StartingEquipment": {
          "Title": "Starting Equipment",
          "Action": {
            "AddEntry": "Add Entry",
            "Configure": "Configure Starting Equipment",
            "RemoveEntry": "Remove Entry"
          },
          "Choice": {
            "Armor": "Choose Armor",
            "Focus": "Choose Spellcasting Focus",
            "Tool": "Choose Tool",
            "Weapon": "Choose Weapon"
          },
          "DropHint": "Drop item here to link",
          "IfProficient": "If Proficient",
          "Operator": {
            "AND": "All of\u2026",
            "OR": "One of\u2026"
          },
          "RequireProficiency": "Require Proficiency",
          "SpecificItem": "Specific Item",
          "Warning": {
            "Depth": "Only three levels of depth allowed in starting equipment.",
            "ItemTypeInvalid": "{type} items cannot be added to starting equipment."
          },
          "Wealth": {
            "Label": "Starting Wealth",
            "Hint": "Formula in GP that can be used in place of starting equipment."
          }
        },
        "DND5E.SubclassAdd": "Add Subclass",
        "DND5E.SubclassIdentifierHint": "This identifier should match the identifier on the parent class to ensure they are properly linked.",
        "DND5E.SubclassAssignmentError": "{class} already has a subclass. Remove the existing '{subclass}' subclass before adding a new one.",
        "DND5E.SubclassDuplicateError": "A subclass with the identifier {identifier} already exists on this actor.",
        "DND5E.SubclassMismatchWarn": "{name} subclass has no matching class with identifier '{class}'.",
        "DND5E.SubclassName": "Subclass Name",
        "DND5E.Subtype": "Subtype",
        "DND5E.Summary": "Summary",
        "DND5E.SUMMON": {
          "Title": "Summon",
          "FIELDS": {
            "bonuses": {
              "ac": {
                "label": "Bonus Armor Class",
                "hint": "Bonus to the Armor Class set on the summoned creature added to what is specified in their statblock."
              },
              "attackDamage": {
                "label": "Bonus Attack Damage",
                "hint": "Additional damage done by the creature's attacks."
              },
              "hd": {
                "label": "Bonus Hit Dice",
                "hint": "Additional hit dice added to the creature on top of what is derived from the HP formula in their statblock. Can only be used when summoning NPC actors."
              },
              "healing": {
                "label": "Bonus Healing",
                "hint": "Additional healing provided by healing abilities."
              },
              "hp": {
                "label": "Bonus Hit Points",
                "hint": "Additional hit points added to the creature on top of what is specified in their statblock."
              },
              "saveDamage": {
                "label": "Bonus Save Damage",
                "hint": "Additional damage done by the creature's abilities that require saving throws."
              }
            },
            "creatureSizes": {
              "label": "Creature Sizes",
              "hint": "Summoned creature and token will be changed to this size. If more than one size is selected, then the player will be able to choose from these sizes when summoning."
            },
            "creatureTypes": {
              "label": "Creature Types",
              "hint": "Summoned creature will be changed to this type. If more than one type is selected, then the player will be able to choose from these types when summoning."
            },
            "match": {
              "ability": {
                "label": "Match Ability",
                "hint": "Specific ability to use when when matching attacks and save DCs."
              },
              "attacks": {
                "label": "Match Attacks",
                "hint": "Modify to hit values on the summoned creature's attacks to match that of the summoner."
              },
              "proficiency": {
                "label": "Match Proficiency",
                "hint": "Modify the summoned creature's proficiency to match that of the summoner."
              },
              "saves": {
                "label": "Match Saves",
                "hint": "Modify saving throw DCs on the summoned creature's abilities to match that of the summoner."
              }
            },
            "profiles": {
              "element": {
                "count": {
                  "label": "Count"
                },
                "cr": {
                  "label": "Challenge Rating",
                  "abbr": "CR",
                  "hint": "Maximum CR of the summoned creature."
                },
                "level": {
                  "label": "Level Limit",
                  "hint": "Range of levels required to use this profile.",
                  "max": {
                    "label": "Maximum Level"
                  },
                  "min": {
                    "label": "Minimum Level"
                  }
                },
                "name": {
                  "label": "Display Name",
                  "hint": "Name of the profile displayed in the usage dialog."
                },
                "types": {
                  "label": "Creature Types",
                  "hint": "List of creature types from which the summoned creature can be selected."
                },
                "uuid": {
                  "label": "Linked Creature"
                }
              },
              "label": "Summons Profiles"
            },
            "summon": {
              "label": "Summoning Details",
              "identifier": {
                "label": "Class Identifier",
                "hint": "Identifier used to determine whether the character level or a specific class level should be used for profile level limits."
              },
              "mode": {
                "label": "Mode",
                "hint": "Sets how the creatures that are to be summoned are specified.",
                "CR": "By Challenge Rating & Type",
                "Direct": "By Direct Link"
              },
              "prompt": {
                "label": "Summon Prompt",
                "hint": "Should the player be prompted to place the summons? Players will still be able to summon from the chat card if prompt is disabled."
              }
            }
          },
          "SECTIONS": {
            "Changes": "Changes",
            "Profiles": "Profiles",
            "Summoning": "Summoning"
          },
          "Action": {
            "Place": "Place Summons",
            "Summon": "Summon",
            "View": "View Summon"
          },
          "CreatureChanges": {
            "Label": "Creature Changes",
            "Hint": "Changes that will be made to the creature being summoned. Any @ references used in the following formulas will be based on the summoner's stats. Summoned creatures' stats can be referenced using @summon (e.g. @summon.attributes.hd.max to reference the creature's hit dice count)."
          },
          "ItemChanges": {
            "Label": "Item Changes",
            "Hint": "Changes made to items on the summoned creature."
          },
          "Profile": {
            "Label": "Summons Profile",
            "Action": {
              "Create": "Create Profile",
              "Delete": "Delete Profile"
            },
            "ChallengeRatingLabel": "Challenge Rating of {cr} or lower",
            "DropHint": "Drop creature here",
            "Empty": "Click the <i class=\"fas fa-plus\"></i> button above to create a profile.",
            "EmptyDrop": "Click the <i class=\"fas fa-plus\"></i> button above to create a profile or drop a creature to summon here."
          },
          "Warning": {
            "NoOwnership": "You must have ownership of '{actor}' in order to summon it.",
            "NoProfile": "Cannot find summoning profile {profileId} on '{item}'.",
            "Wildcard": "You must have 'Use File Browser' permissions to summon creatures with wildcard artwork."
          }
        },
        "DND5E.Summoning": {
          "Label": "Summoning"
        },
        "DND5E.Supply": "Supply",
        "DND5E.Suppressed": "Suppressed",
        "DND5E.TARGET": {
          "Action": {
            "PlaceTemplate": "Place Measured Template"
          },
          "Count": {
            "Any": "Any",
            "Every": "Every"
          },
          "FIELDS": {
            "target": {
              "label": "Targeting",
              "affects": {
                "label": "Affected Targets",
                "choice": {
                  "label": "Choose Targets",
                  "hint": "When targeting an area, can the user choose who it affects?"
                },
                "count": {
                  "label": "Target Count",
                  "hint": "Number of individual targets that can be affected."
                },
                "special": {
                  "label": "Special Targeting",
                  "hint": "Description of any special targeting details."
                },
                "type": {
                  "label": "Target Type",
                  "hint": "Type of targets that can be affected (e.g. creatures, objects, spaces)."
                }
              },
              "override": {
                "label": "Override Target",
                "hint": "Use these target values instead of the item's when using this activity."
              },
              "prompt": {
                "label": "Measured Template Prompt",
                "hint": "Should the player be prompted to place a measured template? Players will still be able to place templates from the chat card if prompt is disabled."
              },
              "template": {
                "label": "Area of Effect",
                "contiguous": {
                  "label": "Contiguous Areas",
                  "hint": "Must all created areas be connected to one another?"
                },
                "count": {
                  "label": "Area Count",
                  "hint": "Number of distinct areas that can be targeted."
                },
                "height": {
                  "label": "Area Height",
                  "hint": "Height of a cylinder affected if applicable."
                },
                "size": {
                  "label": "Area Size",
                  "hint": "Size of the area of effect on its primary axis."
                },
                "type": {
                  "label": "Area Type",
                  "hint": "Type of area of effect targeted."
                },
                "units": {
                  "label": "Area Units",
                  "hint": "Units used to measure the area of effect sizes."
                },
                "width": {
                  "label": "Area Width",
                  "hint": "Width of a line affected if applicable."
                }
              }
            }
          },
          "Formatted": "{count} {type}",
          "Type": {
            "Ally": {
              "Label": "Ally",
              "Counted": {
                "any": "any allies",
                "every": "every ally",
                "one": "{number} ally",
                "other": "{number} allies"
              }
            },
            "Any": {
              "Label": "Any"
            },
            "Circle": {
              "Label": "Circle",
              "Counted": {
                "one": "{number} circle",
                "other": "{number} circles"
              }
            },
            "Cone": {
              "Label": "Cone",
              "Counted": {
                "one": "{number} cone",
                "other": "{number} cones"
              }
            },
            "Creature": {
              "Label": "Creature",
              "Counted": {
                "any": "any creatures",
                "every": "every creature",
                "one": "{number} creature",
                "other": "{number} creatures"
              }
            },
            "CreatureOrObject": {
              "Label": "Creature or Object",
              "Counted": {
                "any": "any creatures or objects",
                "every": "every creature or object",
                "one": "{number} creature or object",
                "other": "{number} creatures or objects"
              }
            },
            "Cube": {
              "Label": "Cube",
              "Counted": {
                "one": "{number} cube",
                "other": "{number} cubes"
              }
            },
            "Cylinder": {
              "Label": "Cylinder",
              "Counted": {
                "one": "{number} cylinder",
                "other": "{number} cylinders"
              }
            },
            "Emanation": {
              "Label": "Emanation",
              "Counted": {
                "one": "{number} emanation",
                "other": "{number} emanations"
              }
            },
            "Enemy": {
              "Label": "Enemy",
              "Counted": {
                "any": "any enemies",
                "every": "every enemy",
                "one": "{number} enemy",
                "other": "{number} enemies"
              }
            },
            "Line": {
              "Label": "Line",
              "Counted": {
                "one": "{number} line",
                "other": "{number} lines"
              }
            },
            "Object": {
              "Label": "Object",
              "Counted": {
                "any": "any objects",
                "every": "every object",
                "one": "{number} object",
                "other": "{number} objects"
              }
            },
            "Radius": {
              "Label": "Radius",
              "Counted": {
                "one": "{number} radius",
                "other": "{number} radii"
              }
            },
            "Self": {
              "Label": "Self"
            },
            "Sphere": {
              "Label": "Sphere",
              "Counted": {
                "one": "{number} sphere",
                "other": "{number} spheres"
              }
            },
            "Space": {
              "Label": "Space",
              "Counted": {
                "any": "any spaces",
                "every": "every space",
                "one": "{number} space",
                "other": "{number} spaces"
              }
            },
            "Square": {
              "Label": "Square",
              "Counted": {
                "one": "{number} square",
                "other": "{number} squares"
              }
            },
            "Target": {
              "Label": "Target",
              "Counted": {
                "any": "any targets",
                "every": "every target",
                "one": "{number} target",
                "other": "{number} targets"
              }
            },
            "Wall": {
              "Label": "Wall",
              "Counted": {
                "one": "{number} wall",
                "other": "{number} walls"
              }
            },
            "WillingCreature": {
              "Label": "Willing Creature",
              "Counted": {
                "any": "any willing creatures",
                "every": "every willing creature",
                "one": "{number} willing creature",
                "other": "{number} willing creatures"
              }
            }
          },
          "Warning": {
            "PlaceTemplate": "Failed to place measured template."
          }
        },
        "DND5E.Target": "Target",
        "DND5E.TargetPl": "Targets",
        "DND5E.TargetType": "Target Type",
        "DND5E.TargetTypeArea": "Area",
        "DND5E.TargetTypeIndividual": "Individual",
        "DND5E.TargetUnits": "Area of Effect Units",
        "DND5E.TargetValue": "Target Length or Count",
        "DND5E.TargetWidth": "Line Width",
        "DND5E.TemplatePrompt": "Template Prompt",
        "DND5E.TemplatePromptTooltip": "If unchecked, the prompt for placing a Measured Template will be suppressed.",
        "DND5E.Temp": "Temp",
        "DND5E.Threshold": "Threshold",
        "DND5E.TimeDay": "Days",
        "DND5E.TimeDayAbbr": "d",
        "DND5E.TimeDisp": "Until Dispelled",
        "DND5E.TimeDispTrig": "Until Dispelled or Triggered",
        "DND5E.TimeHour": "Hours",
        "DND5E.TimeHourAbbr": "h",
        "DND5E.TimeInst": "Instantaneous",
        "DND5E.TimeMinute": "Minutes",
        "DND5E.TimeMinuteAbbr": "m",
        "DND5E.TimeMonth": "Months",
        "DND5E.TimePerm": "Permanent",
        "DND5E.TimeRound": "Rounds",
        "DND5E.TimeTurn": "Turns",
        "DND5E.TimeYear": "Years",
        "DND5E.TMP": "TMP",
        "DND5E.ToHit": "To Hit",
        "DND5E.Tokens": {
          "NoneSelected": "No Tokens Selected",
          "NoneTargeted": "No Tokens Targeted",
          "Selected": "Selected",
          "Targeted": "Targeted"
        },
        "DND5E.TokenRings": {
          "BackgroundColor": "Background Color",
          "Effects": {
            "Label": "Effects",
            "BackgroundWave": "Background Wave",
            "RingGradient": "Ring Gradient",
            "RingPulse": "Ring Pulse"
          },
          "Enabled": "Use Dynamic Ring",
          "RingColor": "Ring Color",
          "ScaleCorrection": "Scale Correction",
          "Subject": {
            "Label": "Subject Path",
            "Hint": "Explicitly specify a path for the artwork placed over the dynamic token ring. If not provided, the subject image will be set to the normal token artwork."
          },
          "Title": "Dynamic Ring"
        },
        "DND5E.ToggleDescription": "Toggle Description",
        "DND5E.TOOL": {
          "SECTIONS": {
            "Details": "{label} Details",
            "Bonuses": {
              "Label": "{label} Bonuses",
              "Hint": "These bonuses apply to checks made with {label}."
            },
            "Global": {
              "Label": "Global Bonuses",
              "Hint": "These bonuses apply to checks made with any tool."
            }
          }
        },
        "DND5E.ToolArtisans": "Artisan's Tools",
        "DND5E.ToolBonuses": "Tool Bonuses",
        "DND5E.ToolCheck": "Tool Check",
        "DND5E.ToolConfigure": "Configure Tool Proficiency",
        "DND5E.ToolDisguiseKit": "Disguise Kit",
        "DND5E.ToolForgeryKit": "Forgery Kit",
        "DND5E.ToolGamingSet": "Gaming Set",
        "DND5E.ToolHerbalismKit": "Herbalism Kit",
        "DND5E.ToolMusicalInstrument": "Musical Instrument",
        "DND5E.ToolNavigators": "Navigator's Tools",
        "DND5E.ToolPoisonersKit": "Poisoner's Kit",
        "DND5E.ToolPromptTitle": "{tool} Check",
        "DND5E.ToolThieves": "Thieves' Tools",
        "DND5E.ToolVehicle": "Vehicles",
        "DND5E.TraitAll": "All {category}",
        "DND5E.TraitArmorPlural.one": "Armor Training",
        "DND5E.TraitArmorPlural.other": "Armor Training",
        "DND5E.TraitArmorProf": "Armor Training",
        "DND5E.TraitArmorLegacyPlural.one": "Armor Proficiency",
        "DND5E.TraitArmorLegacyPlural.other": "Armor Proficiencies",
        "DND5E.TraitArmorLegacyProf": "Armor Proficiencies",
        "DND5E.TraitCIPlural.one": "Condition Immunity",
        "DND5E.TraitCIPlural.other": "Condition Immunities",
        "DND5E.TraitConfig": "Configure {trait}",
        "DND5E.TraitConfigChooseAnyCounted": "any {count} {type}",
        "DND5E.TraitConfigChooseAnyUncounted": "any {type}",
        "DND5E.TraitConfigChooseList": "{count} from {list}",
        "DND5E.TraitConfigChooseOther": "{count} other {type}",
        "DND5E.TraitConfigChooseWrapper": "Choose {choices}",
        "DND5E.TraitDIPlural.one": "Damage Immunity",
        "DND5E.TraitDIPlural.other": "Damage Immunities",
        "DND5E.TraitDMPlural.one": "Damage Modification",
        "DND5E.TraitDMPlural.other": "Damage Modifications",
        "DND5E.TraitDRPlural.one": "Damage Resistance",
        "DND5E.TraitDRPlural.other": "Damage Resistances",
        "DND5E.TraitDVPlural.one": "Damage Vulnerability",
        "DND5E.TraitDVPlural.other": "Damage Vulnerabilities",
        "DND5E.TraitGenericPlural.one": "Trait",
        "DND5E.TraitGenericPlural.other": "Traits",
        "DND5E.TraitLanguagesPlural.one": "Language",
        "DND5E.TraitLanguagesPlural.other": "Languages",
        "DND5E.TraitSave": "Update",
        "DND5E.TraitSavesPlural.one": "Saving Throw Proficiency",
        "DND5E.TraitSavesPlural.other": "Saving Throw Proficiencies",
        "DND5E.TraitSelectorSpecial": "Special (Split with Semi-Colon)",
        "DND5E.TraitSkillsPlural.one": "Skill Proficiency",
        "DND5E.TraitSkillsPlural.other": "Skill Proficiencies",
        "DND5E.TraitToolPlural.one": "Tool Proficiency",
        "DND5E.TraitToolPlural.other": "Tool Proficiencies",
        "DND5E.TraitToolProf": "Tool Proficiencies",
        "DND5E.TraitWeaponPlural.one": "Weapon Proficiency",
        "DND5E.TraitWeaponPlural.other": "Weapon Proficiencies",
        "DND5E.TraitWeaponProf": "Weapon Proficiencies",
        "DND5E.Traits": "Traits",
        "DND5E.TraitsChosen": "Chosen Traits",
        "DND5E.TRANSFORM": {
          "Action": {
            "Restore": "Restore Transformation",
            "Transform": "Transform"
          },
          "Dialog": {
            "Title": "Configure Transformation"
          },
          "FIELDS": {
            "profiles": {
              "element": {
                "cr": {
                  "label": "Challenge Rating",
                  "abbr": "CR",
                  "hint": "Maximum CR of the source creature."
                },
                "level": {
                  "label": "Level Limit",
                  "hint": "Range of levels required to use this profile.",
                  "max": {
                    "label": "Maximum Level"
                  },
                  "min": {
                    "label": "Minimum Level"
                  }
                },
                "movement": {
                  "hint": "Movement types that are not allowed on source creatures.",
                  "label": "Restricted Movement Types"
                },
                "name": {
                  "hint": "Name of the profile displayed in the usage dialog.",
                  "label": "Display Name"
                },
                "sizes": {
                  "hint": "List of creature sizes from which the source creature can be selected.",
                  "label": "Creature Sizes"
                },
                "types": {
                  "hint": "List of creature types from which the source creature can be selected.",
                  "label": "Creature Types"
                },
                "uuid": {
                  "label": "Linked Actor"
                }
              },
              "label": "Transform Profiles"
            },
            "transform": {
              "label": "Transformation Details",
              "customize": {
                "label": "Customize",
                "hint": "Use custom transformation settings rather than the defaults provided by the selected preset."
              },
              "identifier": {
                "label": "Class Identifier",
                "hint": "Identifier used to determine whether the character level or a specific class level should be used for profile level limits."
              },
              "mode": {
                "label": "Mode",
                "hint": "Sets how the transformation source creatures are selected.",
                "CR": "By Challenge Rating",
                "Direct": "By Direct Link"
              },
              "preset": {
                "label": "Preset"
              }
            }
          },
          "Preset": {
            "Appearance": {
              "Label": "Appearance Only"
            },
            "Default": "Default",
            "Label": "Presets",
            "Polymorph": {
              "Label": "Polymorph"
            },
            "WildShape": {
              "Label": "Wild Shape"
            }
          },
          "Profile": {
            "Action": {
              "Create": "Create Profile",
              "Delete": "Delete Profile"
            },
            "ChallengeRatingLabel": "Challenge Rating of {cr} or lower",
            "DropHint": "Drop creature here",
            "Empty": "Click the <i class=\"fas fa-plus\"></i> button above to create a profile.",
            "Label": "Transform Profile"
          },
          "SECTIONS": {
            "Profiles": "Profiles",
            "Settings": "Settings",
            "Transformation": "Transformation"
          },
          "Setting": {
            "Effects": {
              "All": {
                "Hint": "Keep all effects, ignoring any other effects settings.",
                "Label": "All Effects"
              },
              "Background": {
                "Label": "Background Effects"
              },
              "Class": {
                "Label": "Class Effects"
              },
              "Equipment": {
                "Label": "Equipment Effects"
              },
              "Feature": {
                "Label": "Feature Effects"
              },
              "Origin": {
                "Hint": "Keep any effects created directly on this source actor.",
                "Label": "This Actor"
              },
              "OtherOrigin": {
                "Hint": "Keep any effects imposed by an outside actor.",
                "Label": "Other Actors"
              },
              "Spell": {
                "Label": "Spell Effects"
              }
            },
            "FIELDS": {
              "effects": {
                "label": "Active Effects"
              },
              "keep": {
                "hint": "These details will be retained from the source actor.",
                "label": "Keep"
              },
              "merge": {
                "hint": "Merge these proficiencies, keeping whichever has the higher modifier.",
                "label": "Merge"
              },
              "minimumAC": {
                "hint": "Formula defining the armor class for the transformed creature, if the target actor's AC is not already higher.",
                "label": "Minimum Armor Class"
              },
              "other": {
                "label": "Other Options"
              },
              "spellLists": {
                "hint": "The spells on these spell lists will be kept if the actor has a matching item.",
                "label": "Retained Spell Lists"
              },
              "tempFormula": {
                "hint": "Formula for temp HP that will be added upon transformation.",
                "label": "Temp Formula"
              },
              "transformTokens": {
                "label": "Transform Tokens"
              }
            },
            "Keep": {
              "Biography": {
                "Label": "Biography"
              },
              "CreatureType": {
                "Label": "Creature Type"
              },
              "Equipment": {
                "Label": "Equipment"
              },
              "Features": {
                "Label": "Features"
              },
              "GearProficiency": {
                "Label": "Gear Proficiency"
              },
              "Health": {
                "Label": "Hit Points & Hit Dice"
              },
              "Languages": {
                "Label": "Languages"
              },
              "Mental": {
                "Hint": "Keep intelligence, wisdom, and charisma scores.",
                "Label": "Mental Abilities"
              },
              "Physical": {
                "Hint": "Keep strength, dexterity, and constitution scores.",
                "Label": "Physical Abilities"
              },
              "Proficiency": {
                "Label": "Proficiency Bonus"
              },
              "Resistances": {
                "Label": "Damage Resistances"
              },
              "Saves": {
                "Label": "Save Proficiencies"
              },
              "Self": {
                "Hint": "Only change portrait and token artwork, other settings will be ignored.",
                "Label": "Self"
              },
              "Skills": {
                "Label": "Skill Proficiencies"
              },
              "Spells": {
                "Label": "Spells"
              },
              "Vision": {
                "Label": "Vision"
              }
            },
            "Merge": {
              "Saves": {
                "Label": "Save Proficiencies"
              },
              "Skills": {
                "Label": "Skill Proficiencies"
              }
            }
          },
          "TemporaryClass": "Temporary Class",
          "Title": "Transform",
          "Warning": {
            "NoOwnership": "You do not have permission to transform this actor.",
            "NoPermission": "Transformation permission haven't been granted to players.",
            "OriginalActor": "No original actor was found with ID '{reference}'.",
            "SourceActor": "No actor found to transform into."
          }
        },
        "DND5E.Travel": {
          "Label": "Travel Pace",
          "Pace": {
            "Fast": "Fast",
            "Normal": "Normal",
            "Slow": "Slow"
          }
        },
        "DND5E.Treasure": {
          "Categories": {
            "Any": "Any",
            "Arcana": "Arcana",
            "Armaments": "Armaments",
            "Implements": "Implements",
            "Individual": "Individual",
            "None": "None",
            "Relics": "Relics"
          },
          "Configuration": {
            "Label": "Treasure",
            "Title": "Configure Treasure"
          }
        },
        "DND5E.Trigger": "Trigger",
        "DND5E.Type": "Type",
        "DND5E.Uncrewed": "Uncrewed",
        "DND5E.Unequipped": "Not Equipped",
        "DND5E.Unidentified.DefaultName": "Unidentified {name}",
        "DND5E.Unidentified.Notice": "You must identify this item to learn its details.",
        "DND5E.Unidentified.Title": "Unidentified",
        "DND5E.Unidentified.Value": "???",
        "DND5E.Unit": "Unit",
        "DND5E.UNITS": {
          "DISTANCE": {
            "Label": "Distance Units",
            "Foot": {
              "Label": "Feet",
              "Abbreviation": "ft"
            },
            "Kilometer": {
              "Label": "Kilometers",
              "Abbreviation": "km"
            },
            "Meter": {
              "Label": "Meters",
              "Abbreviation": "m"
            },
            "Mile": {
              "Label": "Miles",
              "Abbreviation": "mi"
            }
          },
          "TIME": {
            "Day": {
              "Label": "Day"
            },
            "Hour": {
              "Label": "Hour"
            },
            "Minute": {
              "Label": "Minute"
            },
            "Month": {
              "Label": "Month"
            },
            "Round": {
              "Label": "Round",
              "Counted": {
                "narrow": "{number}r",
                "one": "{number} round",
                "other": "{number} rounds"
              }
            },
            "Second": {
              "Label": "Second"
            },
            "Turn": {
              "Label": "Turn",
              "Abbreviation": "t",
              "Counted": {
                "narrow": "{number}t",
                "one": "{number} turn",
                "other": "{number} turns"
              }
            },
            "Week": {
              "Label": "Week"
            },
            "Year": {
              "Label": "Year"
            }
          },
          "VOLUME": {
            "Label": "Volume Units",
            "CubicFoot": {
              "Label": "Cubic Feet",
              "Abbreviation": "ft\u00b3",
              "Counted": {
                "narrow": {
                  "one": "{number}ft\u00b3",
                  "other": "{number}ft\u00b3"
                },
                "short": {
                  "one": "{number} cu ft",
                  "other": "{number} cu ft"
                },
                "long": {
                  "one": "{number} cubic foot",
                  "other": "{number} cubic feet"
                }
              }
            },
            "Liter": {
              "Label": "Liters",
              "Abbreviation": "L"
            }
          },
          "WEIGHT": {
            "Label": "Weight Units",
            "Kilogram": {
              "Label": "Kilogram",
              "Abbreviation": "kg"
            },
            "Megagram": {
              "Label": "Tonnes",
              "Abbreviation": "t",
              "Counted": {
                "narrow": {
                  "one": "{number}t",
                  "other": "{number}t"
                },
                "short": {
                  "one": "{number} t",
                  "other": "{number} t"
                },
                "long": {
                  "one": "{number} tonne",
                  "other": "{number} tonnes"
                }
              }
            },
            "Pound": {
              "Label": "Pounds",
              "Abbreviation": "lb"
            },
            "Ton": {
              "Label": "Tons",
              "Abbreviation": "tn",
              "Counted": {
                "narrow": {
                  "one": "{number}tn",
                  "other": "{number}tn"
                },
                "short": {
                  "one": "{number} tn",
                  "other": "{number} tn"
                },
                "long": {
                  "one": "{number} ton",
                  "other": "{number} tons"
                }
              }
            }
          }
        },
        "DND5E.Unknown": "Unknown",
        "DND5E.Unlimited": "Unlimited",
        "DND5E.USAGE": {
          "SECTION": {
            "Consumption": "Consumption",
            "Creation": "Creation",
            "Scaling": "Scaling"
          }
        },
        "DND5E.Usage": "Usage",
        "DND5E.Use": "Use",
        "DND5E.UseItem": "Use {item}",
        "DND5E.Uses": "Uses",
        "DND5E.UsesAvailable": "Available Uses",
        "DND5E.UsesMax": "Maximum Uses",
        "DND5E.UsesPeriod": "Recovery Period",
        "DND5E.UsesPeriods": {
          "Charges": "Charges",
          "ChargesAbbreviation": "Charges"
        },
        "DND5E.USES": {
          "FIELDS": {
            "uses": {
              "label": "Uses",
              "max": {
                "label": "Maximum Uses",
                "hint": "Formula for the maximum number of uses."
              },
              "recovery": {
                "label": "Use Recovery",
                "hint": "Recovery profiles for this activity's uses.",
                "FIELDS": {
                  "period": {
                    "label": "Recovery Period",
                    "hint": "Time when this recovery will occur."
                  },
                  "type": {
                    "label": "Recovery Type",
                    "hint": "How uses are recovered."
                  },
                  "formula": {
                    "label": "Recovery Formula",
                    "hint": "Formula used to determine how many uses are recovered."
                  }
                }
              },
              "spent": {
                "label": "Spent Uses",
                "hint": "Number of uses that have been spent."
              }
            }
          },
          "Recovery": {
            "Action": {
              "Create": "Create Recovery Profile",
              "Delete": "Delete Recovery Profile"
            },
            "Combat": "Combat",
            "Never": "Never",
            "Period": {
              "Dawn": {
                "Label": "Dawn"
              },
              "Day": {
                "Label": "Day"
              },
              "Dusk": {
                "Label": "Dusk"
              },
              "Initiative": {
                "Label": "Initiative"
              },
              "LongRest": {
                "Label": "Long Rest",
                "Abbreviation": "LR"
              },
              "ShortRest": {
                "Label": "Short Rest",
                "Abbreviation": "SR"
              },
              "Turn": {
                "Label": "Each Turn"
              },
              "TurnEnd": {
                "Label": "End of Turn",
                "Abbreviation": "Turn End"
              },
              "TurnStart": {
                "Label": "Start of Turn",
                "Abbreviation": "Turn Start"
              }
            },
            "Recharge": {
              "Label": "Recharge",
              "Range": "Recharge {range}"
            },
            "Special": "Special",
            "Time": "Time",
            "Type": {
              "Formula": "Custom Formula",
              "LoseAll": "Lose All Uses",
              "RecoverAll": "Recover All Uses"
            }
          }
        },
        "DND5E.UTILITY": {
          "Title": "Use",
          "FIELDS": {
            "roll": {
              "label": "Roll",
              "formula": {
                "label": "Roll Formula",
                "hint": "Formula for an arbitrary roll."
              },
              "name": {
                "label": "Roll Label",
                "hint": "Display name for the rolling button."
              },
              "prompt": {
                "label": "Roll Prompt",
                "hint": "Display the roll configuration dialog when rolling."
              },
              "visible": {
                "label": "Visible to All",
                "hint": "Display the rolling button in chat for all players."
              }
            }
          }
        },
        "DND5E.Value": "Value",
        "DND5E.VEHICLE": {
          "MOUNTABLE": {
            "FIELDS": {
              "cover": {
                "label": "Cover",
                "hint": "Cover provided to crew operating this equipment."
              },
              "crewed": {
                "label": "Crewed"
              },
              "hp": {
                "label": "Hit Points",
                "conditions": {
                  "label": "Health Conditions"
                },
                "dt": {
                  "label": "Damage Threshold"
                },
                "max": {
                  "label": "Max HP"
                },
                "value": {
                  "label": "Current HP"
                }
              },
              "speed": {
                "conditions": {
                  "label": "Speed Conditions"
                },
                "value": {
                  "label": "Speed"
                }
              }
            }
          }
        },
        "DND5E.Vehicle": "Vehicle",
        "DND5E.VehicleActions": "Actions",
        "DND5E.VehicleActionsHint": "Actions taken with full crew complement",
        "DND5E.VehicleActionMax": "Maximum Actions",
        "DND5E.VehicleActionStations": "Action Stations",
        "DND5E.VehicleActionThresholds": "Action Thresholds",
        "DND5E.VehicleActionThresholdsFull": "Full Crew Complement",
        "DND5E.VehicleActionThresholdsMid": "Partial Crew Complement",
        "DND5E.VehicleActionThresholdsMin": "Minimum Crew Complement",
        "DND5E.VehicleCargo": "Cargo",
        "DND5E.VehicleCargoCapacity": "Cargo Capacity",
        "DND5E.VehicleCargoCrew": "Cargo & Crew",
        "DND5E.VehicleCreatureCapacity": "Creature Capacity",
        "DND5E.VehicleCrew": "Crew",
        "DND5E.VehicleCrewPassengers": "Crew & Passengers",
        "DND5E.VehicleCrewed": "Crewed",
        "DND5E.VehicleCrewAction": "Crew Action",
        "DND5E.VehicleEquipment": "Vehicle Equipment",
        "DND5E.VehicleMishap": "Mishap",
        "DND5E.VehicleMishapThreshold": "Mishap Threshold",
        "DND5E.VehiclePassengers": "Passengers",
        "DND5E.VehiclePassengerName": "Passenger Name or Type",
        "DND5E.VehiclePassengerQuantity": "Passenger Quantity",
        "DND5E.VehicleType": "Vehicle Type",
        "DND5E.VehicleTypeAir": "Air Vehicle",
        "DND5E.VehicleTypeLand": "Land Vehicle",
        "DND5E.VehicleTypeSpace": "Space Vehicle",
        "DND5E.VehicleTypeWater": "Water Vehicle",
        "DND5E.VehicleUncrewed": "Uncrewed",
        "DND5E.Versatile": "Versatile",
        "DND5E.VersatileDamage": "Versatile Damage",
        "DND5E.VsDC": "vs DC.",
        "DND5E.Vulnerabilities": "Vulnerabilities",
        "DND5E.WarnBadACFormula": "The provided AC formula \"{formula}\" could not be evaluated.",
        "DND5E.WarnCantAddMultipleAdvancements": "It is not currently possible to add multiple items with advancements to an actor at the same time. Please add them individually.",
        "DND5E.WarnMultipleArmor": "More than one suit of armor equipped, AC calculation may be incorrect.",
        "DND5E.WarnMultipleShields": "More than one shield equipped, AC calculation may be incorrect.",
        "DND5E.WEAPON": {
          "FIELDS": {
            "ammunition": {
              "type": {
                "label": "Ammunition Type"
              }
            },
            "armor": {
              "value": {
                "label": "Armor Class"
              }
            },
            "damage": {
              "hint": "Intrinsic damage dice from the weapon. Ability modifier and additional damage parts will be provided automatically when attacking."
            },
            "mastery": {
              "label": "Mastery",
              "hint": "Special weapon ability unlocked for characters who have Weapon Mastery or a related feature."
            }
          },
          "Mastery": {
            "Label": "Weapon Mastery",
            "Flavor": "Mastery",
            "Cleave": "Cleave",
            "Graze": "Graze",
            "Nick": "Nick",
            "Push": "Push",
            "Sap": "Sap",
            "Slow": "Slow",
            "Topple": "Topple",
            "Vex": "Vex"
          }
        },
        "DND5E.WeaponCategory": "{category} Weapon",
        "DND5E.WeaponImprov": "Improvised",
        "DND5E.WeaponMartialM": "Martial Melee",
        "DND5E.WeaponMartialProficiency": "Martial",
        "DND5E.WeaponMartialR": "Martial Ranged",
        "DND5E.WeaponNatural": "Natural",
        "DND5E.WeaponSiege": "Siege Weapon",
        "DND5E.WeaponSimpleM": "Simple Melee",
        "DND5E.WeaponSimpleProficiency": "Simple",
        "DND5E.WeaponSimpleR": "Simple Ranged",
        "DND5E.Weight": "Weight",
        "DND5E.WhisperedTo": "Whispered to",
        "DND5E.Wiki": "Wiki",
        "DND5E.available": "available",
        "DND5E.description": "A system for playing the fifth edition of the worlds most popular roleplaying game in the Foundry Virtual Tabletop environment.",
        "DND5E.of": "of",
        "DND5E.per": "per",
        "DND5E.spell": "spell",
        "EDITOR.DND5E.Inline": {
          "ApplyStatus": "Apply Status to Selected Tokens",
          "AttackExtended": "<em>{type}</em>: {parts}",
          "AttackLong": "{formula} to hit",
          "AttackShort": "{formula}",
          "AwardEach": "{award} each",
          "CheckShort": "{check}",
          "CheckLong": "{check} check",
          "CheckUsing": "{check} using {tool}",
          "DamageExtended": "<em>Hit:</em> {damage} damage",
          "DamageDouble": "{first} plus {second}",
          "DamageShort": "{formula} {type}",
          "DamageLong": "{average} ({formula}) {type}",
          "DC": "DC {dc} {check}",
          "DCPassiveShort": "DC {dc} passive {check}",
          "DCPassiveLong": "passive {check} score of {dc} or higher",
          "NoActorWarning": "No selected or assigned actor could be found to execute this roll.",
          "PassiveShort": "passive {check}",
          "PassiveLong": "passive {check} score",
          "RequestRoll": "Request Roll",
          "RollRequest": "Roll Request",
          "SaveShort": "{save}",
          "SaveLong": "{save} saving throw",
          "SpecificCheck": "{ability} ({type})",
          "Warning": {
            "NoActivityOnItem": "{item} on {actor} does not have an Activity with name {activity}.",
            "NoActor": "No selected or assigned actor could be found to execute this roll.",
            "NoItemOnActor": "{actor} does not have an Item with name {item}."
          }
        },
        "EFFECT.DND5E": {
          "StatusBleeding": "Bleeding",
          "StatusBloodied": "Bloodied",
          "StatusBurning": "Burning",
          "StatusBurrowing": "Burrowing",
          "StatusConcentrating": "Concentrating",
          "StatusCursed": "Cursed",
          "StatusDead": "Dead",
          "StatusDehydration": "Dehydration",
          "StatusDodging": "Dodging",
          "StatusEncumbered": "Encumbered",
          "StatusEthereal": "Ethereal",
          "StatusExceedingCarryingCapacity": "Exceeding Carrying Capacity",
          "StatusFalling": "Falling",
          "StatusFlying": "Flying",
          "StatusHalfCover": "Half Cover",
          "StatusHeavilyEncumbered": "Heavily Encumbered",
          "StatusHiding": "Hiding",
          "StatusHovering": "Hovering",
          "StatusMalnutrition": "Malnutrition",
          "StatusMarked": "Marked",
          "StatusSilenced": "Silenced",
          "StatusSleeping": "Sleeping",
          "StatusStable": "Stable",
          "StatusSuffocation": "Suffocation",
          "StatusSurprised": "Surprised",
          "StatusThreeQuartersCover": "Three-Quarters Cover",
          "StatusTotalCover": "Total Cover",
          "StatusTransformed": "Transformed"
        },
        "TYPES.JournalEntryPage.class": "Class Summary",
        "TYPES.JournalEntryPage.map": "Map Location",
        "TYPES.JournalEntryPage.rule": "Rule",
        "TYPES.JournalEntryPage.spells": "Spell List",
        "TYPES.JournalEntryPage.subclass": "Subclass Summary",
        "JOURNALENTRYPAGE.DND5E": {
          "Class": {
            "FIELDS": {
              "description": {
                "additionalEquipment": {
                  "label": "Additional Equipment Description",
                  "hint": "Additional descriptive text displayed beneath the starting equipment section."
                },
                "additionalHitPoints": {
                  "label": "Additional Hit Points Description",
                  "hint": "Additional descriptive text displayed beneath the auto-generated hit points section."
                },
                "additionalTraits": {
                  "label": "Additional Proficiencies Description",
                  "hint": "Additional descriptive text displayed beneath list of proficiencies granted by this class."
                },
                "subclass": {
                  "label": "Subclass Introduction",
                  "hint": "Introduction that will be displayed before this class's subclasses."
                },
                "value": {
                  "label": "Introduction",
                  "hint": "Primary description of the class that will appear first."
                }
              },
              "item": {
                "label": "Selected Class"
              },
              "style": {
                "label": "Style",
                "hint": "Force the page style to use modern or legacy formatting, rather than what is specified by the class."
              },
              "subclassHeader": {
                "label": "Subclass Header"
              },
              "subclassItems": {
                "label": "Subclasses"
              }
            },
            "EquipmentHeader": "Equipment",
            "EquipmentDescription": "You start with the following equipment, in addition to the equipment granted by your background:",
            "Features": {
              "DescriptionLegacy": "As a {lowercaseName}, you gain the following class features, which are summarized in the {name} table.",
              "DescriptionModern": "As a {name}, you gain the following class features when you reach the specified {name} levels. These features are listed in the {name} Features table.",
              "Header": "Class Features",
              "Name": "Level {level}: {name}"
            },
            "HitPoints": {
              "Header": "Hit Points",
              "HitDiceLegacy": "<strong>Hit Dice:</strong> {dice} per {class} level",
              "HitDiceModern": "{dice} per {class} level",
              "Level1": "<strong>Hit Points at 1st Level:</strong> {max} + your Constitution modifier",
              "LevelX": "<strong>Hit Points at Higher Levels:</strong> {dice} (or {average}) + your Constitution modifier per {class} level after 1st"
            },
            "ItemHint": "Drop a class here",
            "NoValidClass": "No valid class selected, press the edit button to add a class.",
            "OptionalFeaturesCaption": "Optional Class Features",
            "OptionalFeaturesDescription": "The following section contains options {class} features. These features are not granted automatically, and you can choose one, some, or all of them at your DM's discretion.",
            "SpellSlotLevel": "Slot Level",
            "SpellSlots": "Spell Slots",
            "SpellSlotsPerSpellLevel": "\u2014Spell Slots per Spell Level\u2014",
            "Style": {
              "Inferred": "Inferred from Source",
              "Legacy": "Legacy",
              "Modern": "Modern"
            },
            "SubclassHint": "Drop subclasses here",
            "TableCaption": "The {class}",
            "TableOptionalCaption": "Optional {class} Features",
            "Traits": {
              "Caption": "Core {class} Traits",
              "Header": "Proficiencies"
            }
          },
          "EditDescription": "Edit",
          "TableTOC": "Table: {caption}",
          "SpellList": {
            "DropHint": "Drop spells or folders of spells here to add to the list",
            "Grouping": {
              "Label": "Grouping Mode",
              "Hint": "Controls how the spells will be grouped by default in the spell list.",
              "Alphabetical": "By First Letter",
              "Level": "By Level",
              "None": "No Grouping",
              "School": "By School"
            },
            "IdentifierHint": "Identifier should match that defined on the associated document, if applicable. For example, when creating a spell list for the Wizard class, the identifier should be 'wizard'.",
            "Type": {
              "Label": "Spell List Type",
              "Other": "Uncategorized"
            },
            "UnlinkedSpells": {
              "Label": "Unlinked Spells",
              "Add": "Add Unlinked Spell",
              "Configuration": "Spell Configuration",
              "Edit": "Edit Unlinked Spell"
            }
          },
          "Subclass": {
            "FIELDS": {
              "description": {
                "value": {
                  "label": "Introduction",
                  "hint": "Description of the subclass that will appear before any listed features."
                }
              },
              "item": {
                "label": "Selected Subclass"
              },
              "style": {
                "label": "Style",
                "hint": "Force the page style to use modern or legacy formatting, rather than what is specified by the subclass."
              }
            },
            "ItemHint": "Drop a subclass here",
            "NoValidSubclass": "No valid subclass selected, press the edit button to add a subclass."
          }
        },
        "KEYBINDINGS.DND5E.DragCopy": "Force Copy when Dragging Document",
        "KEYBINDINGS.DND5E.DragMove": "Force Move when Dragging Document",
        "KEYBINDINGS.DND5E.SkipDialogNormal": "Skip Dialog",
        "KEYBINDINGS.DND5E.SkipDialogAdvantage": "Skip Dialog (roll with Advantage/Critical)",
        "KEYBINDINGS.DND5E.SkipDialogDisadvantage": "Skip Dialog (roll with Disadvantage/Non-Critical)",
        "MACRO.5eMissingTargetWarn": "Your controlled actor '{actor}' does not have an {type} with name '{name}'.",
        "MACRO.5eMultipleTargetsWarn": "Your controlled actor '{actor}' has more than one {type} with name '{name}'. The first match will be chosen.",
        "MACRO.5eNoActorSelected": "No selected or assigned actor could be found to target with macro.",
        "MACRO.5eUnownedWarn": "You can only create macro buttons for owned Items",
        "MIGRATION.5eBegin": "Applying D&D 5e System Migration for version {version}. Please be patient and do not close your game or shut down your server.",
        "MIGRATION.5eComplete": "D&D 5e System Migration to version {version} completed!",
        "MIGRATION.5eVersionTooOldWarning": "Your D&D 5e system data is from too old a Foundry version and cannot be reliably migrated to the latest version. The process will be attempted, but errors may occur.",
        "SETTINGS.5eAutoCollapseCardL": "Automatically collapse Item Card descriptions in the Chat Log",
        "SETTINGS.5eAutoCollapseCardN": "Collapse Item Cards in Chat",
        "SETTINGS.5eAutoSpellTemplateL": "When a spell is cast, defaults to begin the process to create the corresponding Measured Template if any (requires TRUSTED or higher player role)",
        "SETTINGS.5eAutoSpellTemplateN": "Always place Spell Template",
        "SETTINGS.5eNoAdvancementsN": "Disable level-up automation",
        "SETTINGS.5eNoAdvancementsL": "Do not prompt for level-up or character creation choices.",
        "SETTINGS.5eNoConcentrationN": "Disable concentration tracking",
        "SETTINGS.5eNoConcentrationL": "Disable the system's automated tracking of concentration.",
        "SETTINGS.5eGridAlignedSquareTemplatesL": "When square templates are created as the result of casting a spell or using an item, they will be locked to the grid alignment and unable to be rotated.",
        "SETTINGS.5eGridAlignedSquareTemplatesN": "Grid-Aligned Square Templates",
        "SETTINGS.DND5E": {
          "AUTOMATION": {
            "Movement": {
              "Name": "Disable Movement Automation",
              "Hint": "Do not apply difficult terrain movement penalties, or prevent creatures from moving through each other according to the rules version."
            }
          },
          "BLOODIED": {
            "Name": "Bloodied Status",
            "Hint": "Configure whether the bloodied status is tracked automatically and its visibility.",
            "All": "Display for Allies & Enemies",
            "Player": "Only Display for Allies",
            "None": "Never Display"
          },
          "COLLAPSETRAYS": {
            "Name": "Collapse Trays in Chat",
            "Hint": "Automatically collapse damage, hit, and effect trays that appear in chat cards.",
            "Always": "Collapse All",
            "Older": "Collapse Older Trays",
            "Never": "Collapse After Use",
            "Manual": "Never Collapse"
          },
          "COMBAT": {
            "Hint": "Various configuration options that affect combat.",
            "Label": "Configure Combat",
            "Name": "Combat",
            "DexTiebreaker": {
              "Name": "Dexterity Tiebreaker",
              "Hint": "Append the raw Dexterity ability score to break ties in Initiative."
            },
            "InitiativeScore": {
              "Name": "Initiative Score",
              "Hint": "Use a creature's initiative score (10 + bonus) rather than rolling for initiative.",
              "All": "Use Score for Everyone",
              "None": "Always Roll for Initiative",
              "NPCs": "Use Score for GM NPCs"
            }
          },
          "CRITICAL": {
            "Name": "Critical Damage",
            "MaxDice": {
              "Name": "Maximize Dice",
              "Hint": "Make critical hits more deadly by maximizing the values of base damage dice."
            },
            "MultiplyModifiers": {
              "Name": "Multiply Modifiers",
              "Hint": "Make critical hits more deadly by multiplying non-dice modifiers in addition to rolled dice."
            }
          },
          "DEFAULTSKILLS": {
            "Name": "Default Skills",
            "Hint": "The default skills that appear on NPC sheets regardless of level of proficiency."
          },
          "General": "General",
          "LOYALTY": {
            "Hint": "Enable optional Loyalty tracking.",
            "Name": "Loyalty Score"
          },
          "METRIC": {
            "LengthUnits": {
              "Name": "Use Metric Length Units",
              "Hint": "Defaults to using meters instead of feet for movement and senses."
            },
            "VolumeUnits": {
              "Name": "Use Metric Volume Units",
              "Hint": "Defaults to using liters instead of cubic feet for container capacity."
            },
            "WeightUnits": {
              "Name": "Use Metric Weight Units",
              "Hint": "Replaces all reference to lbs with kgs and updates the encumbrance calculations to use metric weight units."
            }
          },
          "NPCS": {
            "Name": "NPCs",
            "AutoRecharge": {
              "Name": "Recharge Abilities",
              "Hint": "Roll to recharge NPC abilities automatically at the start of the NPC's turn.",
              "No": "Do not recharge automatically",
              "Silent": "Recharge without creating chat card",
              "Yes": "Recharge and display chat card"
            },
            "AutoRollNPCHP": {
              "Name": "Hit Points",
              "Hint": "Configure whether to roll for NPC max HP whenever a new token is created.",
              "No": "Do not roll",
              "Silent": "Roll without creating chat card",
              "Yes": "Roll and create chat card"
            }
          },
          "THEME": {
            "Name": "Theme",
            "Hint": "Theme that will apply to the UI and all sheets by default. Automatic will be determined by your browser or operating system settings."
          },
          "PERMISSIONS": {
            "AllowRests": {
              "Hint": "Allow players to rest directly from their characters' sheets. When disabled, players will only be able to rest when the GM makes a request from the party.",
              "Name": "Allow Individual Rests"
            },
            "AllowSummoning": {
              "Hint": "Allow players to use summoning abilities to summon actors. Players must also have the Create Tokens core permission.",
              "Name": "Allow Summoning"
            },
            "AllowTransformation": {
              "Hint": "Allow players to transform their own actors. Players must also have the Create Actors & Create Tokens core permissions.",
              "Name": "Allow Transformation"
            }
          },
          "RULESVERSION": {
            "Name": "Rules Version",
            "Hint": "Change handling of various rules between the 2024 and 2014 rule sets.",
            "Legacy": "Legacy Rules (2014)",
            "Modern": "Modern Rules (2024)"
          },
          "VARIANT": {
            "Hint": "Enable and configure rules variations offered by the system.",
            "Label": "Configure Variant Rules",
            "Name": "Variant Rules",
            "AllowFeats": {
              "Hint": "Allow players to choose a feat rather than taking an ability score improvement during class advancement when using the Legacy rules.",
              "Name": "Allow Feats"
            },
            "CurrencyWeight": {
              "Hint": "Carried currency affects character encumbrance.",
              "Name": "Track Currency Weight"
            },
            "Encumbrance": {
              "Hint": "Enable automatic tracking of encumbrance and the application of status effects for characters carrying too much.",
              "Name": "Encumbrance Tracking",
              "None": "None",
              "Normal": "Normal (max carrying capacity)",
              "Variant": "Variant (encumbered & heavily encumbered)"
            },
            "HonorScore": {
              "Hint": "Enable the use of the optional Honor ability score.",
              "Name": "Honor Ability Score"
            },
            "LevelingMode": {
              "Hint": "Determine how the players gain new levels.",
              "Name": "Leveling Mode",
              "NoXP": "Level Advancement without XP",
              "XP": "Experience Points",
              "XPBoons": "Experience Points with Epic Boons"
            },
            "ProficiencyModifier": {
              "Bonus": "PHB: Bonus (+2, +3, +4, +5, +6)",
              "Dice": "DMG: Dice (1d4, 1d6, 1d8, 1d10, 1d12)",
              "Hint": "Configure proficiency modifier to use a fixed bonus or a dice roll.",
              "Name": "Proficiency Variant"
            },
            "Rest": {
              "Epic": "Epic Heroism (LR: 1 hour, SR: 1 min)",
              "Gritty": "Gritty Realism (LR: 7 days, SR: 8 hours)",
              "Hint": "Configure which rest variant should be used for games within this system.",
              "Name": "Rest Variant",
              "Normal": "Player's Handbook (LR: 8 hours, SR: 1 hour)"
            },
            "SanityScore": {
              "Hint": "Enable the use of the optional Sanity ability score.",
              "Name": "Sanity Ability Score"
            }
          },
          "VISIBILITY": {
            "Hint": "Various configuration options that affect player visibility of certain information that the DM may wish to keep secret.",
            "Label": "Configure Visibility",
            "Name": "Visibility",
            "Attack": {
              "Name": "Attack Result Visibility",
              "Hint": "Control visibility of attack roll results in chat cards for players.",
              "All": "Show results & target ACs",
              "HideAC": "Show only results",
              "None": "Hide all"
            },
            "Challenge": {
              "All": "Show all",
              "Hint": "Control what roll DCs are visible to the players and whether successes/failures are highlighted.",
              "Name": "Challenge Visibility",
              "None": "Hide all",
              "Player": "Show only from other players"
            },
            "ItemDescriptions": {
              "Hint": "Hide the descriptions of NPC items from players when posted to chat by the DM. Will only hide the descriptions for items without a Chat Description set.",
              "Name": "Conceal NPC Descriptions"
            }
          }
        },
        "SHEETS.DND5E": {
          "THEME": {
            "Label": "Theme",
            "Automatic": "Automatic",
            "Dark": "Dark Mode",
            "Light": "Light Mode"
          }
        },
        "SOURCE.BOOK.FreeRules": "Free Rules",
        "SOURCE.BOOK.SRD51": "System Reference Document 5.1",
        "SOURCE.BOOK.SRD52": "System Reference Document 5.2",
        "SIDEBAR.SortModePriority": "Sort by priority"
      }
    },
    "source_code_analysis": {
      "module/data/advancement/item-grant.mjs": "import SpellConfigurationData from \"./spell-config.mjs\";\n\nconst { ArrayField, BooleanField, EmbeddedDataField, SchemaField, StringField } = foundry.data.fields;\n\n/**\n * Configuration data for an individual item provided by item grant.\n *\n * @typedef {object} ItemGrantItemConfiguration\n * @property {string} uuid       UUID of the item to grant.\n * @property {boolean} optional  Is this item optional? Has no effect if whole advancement is optional.\n */\n\n/**\n * Configuration data for the Item Grant advancement.\n *\n * @property {ItemGrantItemConfiguration[]} items  Data for the items to be granted.\n * @property {boolean} optional                    Should user be able to de-select any individual option?\n * @property {SpellConfigurationData} spell        Data used to modify any granted spells.\n */\nexport default class ItemGrantConfigurationData extends foundry.abstract.DataModel {\n\n  /* -------------------------------------------- */\n  /*  Model Configuration                         */\n  /* -------------------------------------------- */\n\n  /** @override */\n  static LOCALIZATION_PREFIXES = [\"DND5E.ADVANCEMENT.ItemGrant\", \"DND5E.ADVANCEMENT.SPELLCONFIG\"];\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static defineSchema() {\n    return {\n      items: new ArrayField(new SchemaField({\n        uuid: new StringField(),\n        optional: new BooleanField()\n      }), { required: true }),\n      optional: new BooleanField({ required: true }),\n      spell: new EmbeddedDataField(SpellConfigurationData, { required: true, nullable: true, initial: null })\n    };\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Migrations                             */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static migrateData(source) {\n    if ( \"items\" in source ) {\n      source.items = source.items.map(i => foundry.utils.getType(i) === \"string\" ? { uuid: i } : i);\n    }\n    if ( source.spell ) SpellConfigurationData.migrateData(source.spell);\n    return source;\n  }\n}\n",
      "module/documents/item.mjs": "import ActivityChoiceDialog from \"../applications/activity/activity-choice-dialog.mjs\";\nimport AdvancementManager from \"../applications/advancement/advancement-manager.mjs\";\nimport AdvancementConfirmationDialog from \"../applications/advancement/advancement-confirmation-dialog.mjs\";\nimport ContextMenu5e from \"../applications/context-menu.mjs\";\nimport CreateScrollDialog from \"../applications/item/create-scroll-dialog.mjs\";\nimport ClassData from \"../data/item/class.mjs\";\nimport ContainerData from \"../data/item/container.mjs\";\nimport EquipmentData from \"../data/item/equipment.mjs\";\nimport SpellData from \"../data/item/spell.mjs\";\nimport ActivitiesTemplate from \"../data/item/templates/activities.mjs\";\nimport PhysicalItemTemplate from \"../data/item/templates/physical-item.mjs\";\nimport { staticID } from \"../utils.mjs\";\nimport Scaling from \"./scaling.mjs\";\nimport Proficiency from \"./actor/proficiency.mjs\";\nimport SelectChoices from \"./actor/select-choices.mjs\";\nimport Advancement from \"./advancement/advancement.mjs\";\nimport SystemDocumentMixin from \"./mixins/document.mjs\";\n\nconst TextEditor = foundry.applications.ux.TextEditor.implementation;\n\n/**\n * Override and extend the basic Item implementation.\n */\nexport default class Item5e extends SystemDocumentMixin(Item) {\n\n  /**\n   * Caches an item linked to this one, such as a subclass associated with a class.\n   * @type {Item5e}\n   * @private\n   */\n  _classLink;\n\n  /* -------------------------------------------- */\n\n  /**\n   * An object that tracks which tracks the changes to the data model which were applied by active effects\n   * @type {object}\n   */\n  overrides = this.overrides ?? {};\n\n  /* -------------------------------------------- */\n\n  /**\n   * Types that can be selected within the compendium browser.\n   * @param {object} [options={}]\n   * @param {Set<string>} [options.chosen]  Types that have been selected.\n   * @returns {SelectChoices}\n   */\n  static compendiumBrowserTypes({ chosen=new Set() }={}) {\n    const [generalTypes, physicalTypes] = Item.TYPES.reduce(([g, p], t) => {\n      if ( ![CONST.BASE_DOCUMENT_TYPE, \"backpack\"].includes(t) ) {\n        if ( \"inventorySection\" in (CONFIG.Item.dataModels[t] ?? {}) ) p.push(t);\n        else g.push(t);\n      }\n      return [g, p];\n    }, [[], []]);\n\n    const makeChoices = (types, categoryChosen) => types.reduce((obj, type) => {\n      obj[type] = {\n        label: CONFIG.Item.typeLabels[type],\n        chosen: chosen.has(type) || categoryChosen\n      };\n      return obj;\n    }, {});\n    const choices = makeChoices(generalTypes);\n    choices.physical = {\n      label: game.i18n.localize(\"DND5E.ITEM.Category.Physical\"),\n      children: makeChoices(physicalTypes, chosen.has(\"physical\"))\n    };\n    return new SelectChoices(choices);\n  }\n\n  /* -------------------------------------------- */\n  /*  Migrations                                  */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  _initializeSource(data, options={}) {\n    if ( data instanceof foundry.abstract.DataModel ) data = data.toObject();\n\n    // Migrate backpack -> container.\n    if ( data.type === \"backpack\" ) {\n      data.type = \"container\";\n      foundry.utils.setProperty(data, \"flags.dnd5e.persistSourceMigration\", true);\n    }\n\n    /**\n     * A hook event that fires before source data is initialized for an Item in a compendium.\n     * @function dnd5e.initializeItemSource\n     * @memberof hookEvents\n     * @param {Item5e} item     Item for which the data is being initialized.\n     * @param {object} data     Source data being initialized.\n     * @param {object} options  Additional data initialization options.\n     */\n    if ( options.pack || options.parent?.pack ) Hooks.callAll(\"dnd5e.initializeItemSource\", this, data, options);\n\n    if ( data.type === \"spell\" ) {\n      return super._initializeSource(new Proxy(data, {\n        set(target, prop, value, receiver) {\n          if ( prop === \"preparation\" ) console.trace(value);\n          return Reflect.set(target, prop, value, receiver);\n        },\n\n        defineProperty(target, prop, attributes) {\n          if ( prop === \"preparation\" ) console.trace(attributes);\n          return Reflect.defineProperty(target, prop, attributes);\n        }\n      }), options);\n    }\n\n    return super._initializeSource(data, options);\n  }\n\n  /* -------------------------------------------- */\n  /*  Item Properties                             */\n  /* -------------------------------------------- */\n\n  /**\n   * Which ability score modifier is used by this item?\n   * @type {string|null}\n   * @see {@link ActionTemplate#abilityMod}\n   */\n  get abilityMod() {\n    return this.system.abilityMod ?? null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should deletion of this item be allowed? Doesn't prevent programatic deletion, but affects UI controls.\n   * @type {boolean}\n   */\n  get canDelete() {\n    return !this.flags.dnd5e?.cachedFor;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should duplication of this item be allowed? Doesn't prevent programatic duplication, but affects UI controls.\n   * @type {boolean}\n   */\n  get canDuplicate() {\n    return !this.system.metadata?.singleton && ![\"class\", \"subclass\"].includes(this.type)\n      && !this.flags.dnd5e?.cachedFor;\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * The item that contains this item, if it is in a container. Returns a promise if the item is located\n   * in a compendium pack.\n   * @type {Item5e|Promise<Item5e>|void}\n   */\n  get container() {\n    if ( !this.system.container ) return;\n    if ( this.isEmbedded ) return this.actor.items.get(this.system.container);\n    if ( this.pack ) return game.packs.get(this.pack).getDocument(this.system.container);\n    return game.items.get(this.system.container);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * What is the critical hit threshold for this item, if applicable?\n   * @type {number|null}\n   * @see {@link ActionTemplate#criticalThreshold}\n   */\n  get criticalThreshold() {\n    return this.system.criticalThreshold ?? null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does this item support advancement and have advancements defined?\n   * @type {boolean}\n   */\n  get hasAdvancement() {\n    return !!this.system.advancement?.length;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement an attack roll as part of its usage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#hasAttack}\n   */\n  get hasAttack() {\n    return this.system.hasAttack ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this Item limited in its ability to be used by charges or by recharge?\n   * @type {boolean}\n   * @see {@link ActivatedEffectTemplate#hasLimitedUses}\n   * @see {@link FeatData#hasLimitedUses}\n   */\n  get hasLimitedUses() {\n    return this.system.hasLimitedUses ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement a saving throw as part of its usage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#hasSave}\n   */\n  get hasSave() {\n    return this.system.hasSave ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Return an item's identifier.\n   * @type {string}\n   */\n  get identifier() {\n    if ( this.system.identifier ) return this.system.identifier;\n    const identifier = this.name.replaceAll(/(\\w+)([\\\\|/])(\\w+)/g, \"$1-$3\");\n    return identifier.slugify({ strict: true });\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * Is this Item an activatable item?\n   * @type {boolean}\n   */\n  get isActive() {\n    return this.system.isActive ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this item any of the armor subtypes?\n   * @type {boolean}\n   * @see {@link EquipmentTemplate#isArmor}\n   */\n  get isArmor() {\n    return this.system.isArmor ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the item provide an amount of healing instead of conventional damage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#isHealing}\n   */\n  get isHealing() {\n    return this.system.isHealing ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this item a separate large object like a siege engine or vehicle component that is\n   * usually mounted on fixtures rather than equipped, and has its own AC and HP?\n   * @type {boolean}\n   * @see {@link EquipmentData#isMountable}\n   * @see {@link WeaponData#isMountable}\n   */\n  get isMountable() {\n    return this.system.isMountable ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this class item the original class for the containing actor? If the item is not a class or it is not\n   * embedded in an actor then this will return `null`.\n   * @type {boolean|null}\n   */\n  get isOriginalClass() {\n    if ( this.type !== \"class\" || !this.isEmbedded || !this.parent.system.details?.originalClass ) return null;\n    return this.id === this.parent.system.details.originalClass;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement a versatile damage roll as part of its usage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#isVersatile}\n   */\n  get isVersatile() {\n    return this.system.isVersatile ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is the item rechargeable?\n   * @type {boolean}\n   */\n  get hasRecharge() {\n    return this.hasLimitedUses && (this.system.uses?.recovery[0]?.period === \"recharge\");\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * Is the item on recharge cooldown?\n   * @type {boolean}\n   */\n  get isOnCooldown() {\n    return this.hasRecharge && (this.system.uses.value < 1);\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * Does this item require concentration?\n   * @type {boolean}\n   */\n  get requiresConcentration() {\n    if ( this.system.validProperties.has(\"concentration\") && this.system.properties.has(\"concentration\") ) return true;\n    return this.system.activities?.contents[0]?.duration.concentration ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Class associated with this subclass. Always returns null on non-subclass or non-embedded items.\n   * @type {Item5e|null}\n   */\n  get class() {\n    if ( !this.isEmbedded || (this.type !== \"subclass\") ) return null;\n    const cid = this.system.classIdentifier;\n    return this._classLink ??= this.parent.items.find(i => (i.type === \"class\") && (i.identifier === cid));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Subclass associated with this class. Always returns null on non-class or non-embedded items.\n   * @type {Item5e|null}\n   */\n  get subclass() {\n    if ( !this.isEmbedded || (this.type !== \"class\") ) return null;\n    const items = this.parent.items;\n    const cid = this.identifier;\n    return this._classLink ??= items.find(i => (i.type === \"subclass\") && (i.system.classIdentifier === cid));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Retrieve scale values for current level from advancement data.\n   * @type {Record<string, ScaleValueType>}\n   */\n  get scaleValues() {\n    if ( !this.advancement.byType.ScaleValue ) return {};\n    const item = [\"class\", \"subclass\"].includes(this.advancementRootItem?.type) ? this.advancementRootItem : this;\n    const level = item.type === \"class\" ? item.system.levels : item.type === \"subclass\" ? item.class?.system.levels\n      : this.parent?.system.details.level ?? 0;\n    return this.advancement.byType.ScaleValue.reduce((obj, advancement) => {\n      obj[advancement.identifier] = advancement.valueForLevel(level);\n      return obj;\n    }, {});\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Scaling increase for this item based on flag or item-type specific details.\n   * @type {number}\n   */\n  get scalingIncrease() {\n    return this.system?.scalingIncrease ?? this.getFlag(\"dnd5e\", \"scaling\") ?? 0;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Spellcasting details for a class or subclass.\n   *\n   * @typedef {object} SpellcastingDescription\n   * @property {string} type              Spellcasting method as defined in `CONFIG.DND5E.spellcasting`.\n   * @property {string|null} progression  Progression within the specified spellcasting type if supported.\n   * @property {string} ability           Ability used when casting spells from this class or subclass.\n   * @property {number|null} levels       Number of levels of this class or subclass's class if embedded.\n   */\n\n  /**\n   * Retrieve the spellcasting for a class or subclass. For classes, this will return the spellcasting\n   * of the subclass if it overrides the class. For subclasses, this will return the class's spellcasting\n   * if no spellcasting is defined on the subclass.\n   * @type {SpellcastingDescription|null}  Spellcasting object containing progression & ability.\n   */\n  get spellcasting() {\n    const spellcasting = this.system.spellcasting;\n    if ( !spellcasting ) return null;\n    const isSubclass = this.type === \"subclass\";\n    const classSC = isSubclass ? this.class?.system.spellcasting : spellcasting;\n    const subclassSC = isSubclass ? spellcasting : this.subclass?.system.spellcasting;\n    const finalSC = foundry.utils.deepClone(\n      ( subclassSC && (subclassSC.progression !== \"none\") ) ? subclassSC : classSC\n    );\n    return finalSC ?? null;\n  }\n\n  /* -------------------------------------------- */\n  /*  Active Effects                              */\n  /* -------------------------------------------- */\n\n  /**\n   * Get all ActiveEffects that may apply to this Item.\n   * @yields {ActiveEffect5e}\n   * @returns {Generator<ActiveEffect5e, void, void>}\n   */\n  *allApplicableEffects() {\n    for ( const effect of this.effects ) {\n      if ( effect.isAppliedEnchantment ) yield effect;\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Apply any transformation to the Item data which are caused by enchantment Effects.\n   */\n  applyActiveEffects() {\n    const overrides = {};\n\n    // Organize non-disabled effects by their application priority\n    const changes = [];\n    for ( const effect of this.allApplicableEffects() ) {\n      if ( !effect.active ) continue;\n      changes.push(...effect.changes.map(change => {\n        const c = foundry.utils.deepClone(change);\n        c.effect = effect;\n        c.priority ??= c.mode * 10;\n        return c;\n      }));\n    }\n    changes.sort((a, b) => a.priority - b.priority);\n\n    // Apply all changes\n    for ( const change of changes ) {\n      if ( !change.key ) continue;\n      const changes = change.effect.apply(this, change);\n      Object.assign(overrides, changes);\n    }\n\n    // Expand the set of final overrides\n    this.overrides = foundry.utils.expandObject(overrides);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should this item's active effects be suppressed.\n   * @type {boolean}\n   */\n  get areEffectsSuppressed() {\n    const requireEquipped = (this.type !== \"consumable\")\n      || [\"rod\", \"trinket\", \"wand\"].includes(this.system.type.value);\n    if ( requireEquipped && (this.system.equipped === false) ) return true;\n    return !this.system.attuned && (this.system.attunement === \"required\");\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Initialization                         */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  clone(data={}, options={}) {\n    if ( options.save ) return super.clone(data, options);\n    if ( this.parent ) this.parent._embeddedPreparation = true;\n    const item = super.clone(data, options);\n    if ( item.parent ) {\n      delete item.parent._embeddedPreparation;\n      item.prepareFinalAttributes();\n    }\n    return item;\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Preparation                            */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareBaseData() {\n    this.labels = {};\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareEmbeddedDocuments() {\n    super.prepareEmbeddedDocuments();\n    for ( const activity of this.system.activities ?? [] ) activity.prepareData();\n    for ( const advancement of this.system.advancement ?? [] ) {\n      if ( !(advancement instanceof Advancement) ) continue;\n      advancement.prepareData();\n    }\n    if ( !this.actor || this.actor._embeddedPreparation ) this.applyActiveEffects();\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareDerivedData() {\n    this.labels ??= {};\n    super.prepareDerivedData();\n\n    // Clear out linked item cache\n    this._classLink = undefined;\n\n    // Advancement\n    this._prepareAdvancement();\n\n    // Item Properties\n    if ( this.system.properties ) {\n      this.labels.properties = this.system.properties.reduce((acc, prop) => {\n        if ( (prop === \"concentration\") && !this.requiresConcentration ) return acc;\n        acc.push({\n          abbr: prop,\n          label: CONFIG.DND5E.itemProperties[prop]?.label,\n          icon: CONFIG.DND5E.itemProperties[prop]?.icon\n        });\n        return acc;\n      }, []);\n    }\n\n    // Un-owned items can have their final preparation done here, otherwise this needs to happen in the owning Actor\n    if ( !this.isOwned ) this.prepareFinalAttributes();\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare advancement objects from stored advancement data.\n   * @protected\n   */\n  _prepareAdvancement() {\n    const minAdvancementLevel = [\"class\", \"subclass\"].includes(this.type) ? 1 : 0;\n    this.advancement = {\n      byId: {},\n      byLevel: Object.fromEntries(\n        Array.fromRange(CONFIG.DND5E.maxLevel + 1).slice(minAdvancementLevel).map(l => [l, []])\n      ),\n      byType: {},\n      needingConfiguration: []\n    };\n    for ( const advancement of this.system.advancement ?? [] ) {\n      if ( !(advancement instanceof Advancement) ) continue;\n      this.advancement.byId[advancement.id] = advancement;\n      this.advancement.byType[advancement.type] ??= [];\n      this.advancement.byType[advancement.type].push(advancement);\n      advancement.levels.forEach(l => this.advancement.byLevel[l]?.push(advancement));\n      if ( !advancement.levels.length\n        || ((advancement.levels.length === 1) && (advancement.levels[0] < minAdvancementLevel)) ) {\n        this.advancement.needingConfiguration.push(advancement);\n      }\n    }\n    Object.entries(this.advancement.byLevel).forEach(([lvl, data]) => data.sort((a, b) => {\n      return a.sortingValueForLevel(lvl).localeCompare(b.sortingValueForLevel(lvl), game.i18n.lang);\n    }));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Determine an item's proficiency level based on its parent actor's proficiencies.\n   * @protected\n   */\n  _prepareProficiency() {\n    if ( ![\"spell\", \"weapon\", \"equipment\", \"tool\", \"feat\", \"consumable\"].includes(this.type) ) return;\n    if ( !this.actor?.system.attributes?.prof ) {\n      this.system.prof = new Proficiency(0, 0);\n      return;\n    }\n\n    this.system.prof = new Proficiency(this.actor.system.attributes.prof, this.system.proficiencyMultiplier ?? 0);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Compute item attributes which might depend on prepared actor data. If this item is embedded this method will\n   * be called after the actor's data is prepared.\n   * Otherwise, it will be called at the end of `Item5e#prepareDerivedData`.\n   */\n  prepareFinalAttributes() {\n    this._prepareProficiency();\n    this.system.prepareFinalData?.();\n    this._prepareLabels();\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare top-level summary labels based on configured activities.\n   * @protected\n   */\n  _prepareLabels() {\n    const activations = this.labels.activations = [];\n    const attacks = this.labels.attacks = [];\n    const damages = this.labels.damages = [];\n    if ( !this.system.activities?.size ) return;\n    for ( const activity of this.system.activities ) {\n      if ( !(\"activation\" in activity) ) continue;\n      const activationLabels = activity.activationLabels;\n      if ( activationLabels ) activations.push({\n        ...activationLabels,\n        concentrationDuration: activity.labels.concentrationDuration,\n        ritualActivation: activity.labels.ritualActivation\n      });\n      if ( activity.type === \"attack\" ) {\n        const { toHit, modifier } = activity.labels;\n        attacks.push({ toHit, modifier });\n      }\n      if ( activity.labels?.damage?.length ) damages.push(...activity.labels.damage);\n    }\n    if ( activations.length ) {\n      Object.assign(this.labels, activations[0]);\n      delete activations[0].concentrationDuration;\n      delete activations[0].ritualActivation;\n    }\n    if ( attacks.length ) Object.assign(this.labels, attacks[0]);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Render a rich tooltip for this item.\n   * @param {EnrichmentOptions} [enrichmentOptions={}]  Options for text enrichment.\n   * @returns {Promise<{content: string, classes: string[]}>|null}\n   */\n  richTooltip(enrichmentOptions={}) {\n    return this.system.richTooltip?.() ?? null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Configuration data for an item usage being prepared.\n   *\n   * @typedef {object} ItemUseConfiguration\n   * @property {boolean} createMeasuredTemplate     Should this item create a template?\n   * @property {boolean} createSummons              Should this item create a summoned creature?\n   * @property {boolean} consumeResource            Should this item consume a (non-ammo) resource?\n   * @property {boolean} consumeSpellSlot           Should this item (a spell) consume a spell slot?\n   * @property {boolean} consumeUsage               Should this item consume its limited uses or recharge?\n   * @property {string} enchantmentProfile          ID of the enchantment to apply.\n   * @property {boolean} promptEnchantment          Does an enchantment profile need to be selected?\n   * @property {string|number|null} slotLevel       The spell slot type or level to consume by default.\n   * @property {string|null} summonsProfile         ID of the summoning profile to use.\n   * @property {number|null} resourceAmount         The amount to consume by default when scaling with consumption.\n   * @property {boolean} beginConcentrating         Should this item initiate concentration?\n   * @property {string|null} endConcentration       The id of the active effect to end concentration on, if any.\n   */\n\n  /**\n   * Additional options used for configuring item usage.\n   *\n   * @typedef {object} ItemUseOptions\n   * @property {boolean} configureDialog  Display a configuration dialog for the item usage, if applicable?\n   * @property {string} rollMode          The roll display mode with which to display (or not) the card.\n   * @property {boolean} createMessage    Whether to automatically create a chat message (if true) or simply return\n   *                                      the prepared chat message data (if false).\n   * @property {object} flags             Additional flags added to the chat message.\n   * @property {Event} event              The browser event which triggered the item usage, if any.\n   */\n\n  /**\n   * Trigger an Item usage, optionally creating a chat message with followup actions.\n   * @param {ActivityUseConfiguration} config       Configuration info for the activation.\n   * @param {boolean} [config.chooseActivity=false] Force the activity selection prompt unless the fast-forward modifier\n   *                                                is held.\n   * @param {ActivityDialogConfiguration} dialog    Configuration info for the usage dialog.\n   * @param {ActivityMessageConfiguration} message  Configuration info for the created chat message.\n   * @returns {Promise<ActivityUsageResults|ChatMessage|object|void>}  Returns the usage results for the triggered\n   *                                                                   activity, or the chat message if the Item had no\n   *                                                                   activities and was posted directly to chat.\n   */\n  async use(config={}, dialog={}, message={}) {\n    if ( this.pack ) return;\n\n    let event = config.event;\n    const activities = this.system.activities?.filter(a => a.canUse);\n    if ( activities?.length ) {\n      const { chooseActivity, ...activityConfig } = config;\n      let usageConfig = activityConfig;\n      let dialogConfig = dialog;\n      let messageConfig = message;\n      let activity = activities[0];\n      if ( ((activities.length > 1) || chooseActivity) && !event?.shiftKey ) {\n        activity = await ActivityChoiceDialog.create(this);\n      }\n      if ( !activity ) return;\n      return activity.use(usageConfig, dialogConfig, messageConfig);\n    }\n    if ( this.actor ) return this.displayCard(message);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Display the chat card for an Item as a Chat Message\n   * @param {Partial<ActivityMessageConfiguration>} [message]  Configuration info for the created chat message.\n   * @returns {Promise<ChatMessage5e|object|void>}\n   */\n  async displayCard(message={}) {\n    const context = {\n      actor: this.actor,\n      config: CONFIG.DND5E,\n      tokenId: this.actor.token?.uuid || null,\n      item: this,\n      data: await this.system.getCardData(),\n      isSpell: this.type === \"spell\"\n    };\n\n    const messageConfig = foundry.utils.mergeObject({\n      create: message?.createMessage ?? true,\n      data: {\n        content: await foundry.applications.handlebars.renderTemplate(\n          \"systems/dnd5e/templates/chat/item-card.hbs\", context\n        ),\n        flags: {\n          \"dnd5e.item\": { id: this.id, uuid: this.uuid, type: this.type }\n        },\n        speaker: ChatMessage.getSpeaker({ actor: this.actor, token: this.actor.token }),\n        title: this.name\n      },\n      rollMode: game.settings.get(\"core\", \"rollMode\")\n    }, message);\n\n    // Merge in the flags from options\n    if ( foundry.utils.getType(message.flags) === \"Object\" ) {\n      foundry.utils.mergeObject(messageConfig.data.flags, message.flags);\n      delete messageConfig.flags;\n    }\n\n    /**\n     * A hook event that fires before an item chat card is created without using an activity.\n     * @function dnd5e.preDisplayCard\n     * @memberof hookEvents\n     * @param {Item5e} item                           Item for which the card will be created.\n     * @param {ActivityMessageConfiguration} message  Configuration for the roll message.\n     * @returns {boolean}                             Return `false` to prevent the card from being displayed.\n     */\n    if ( Hooks.call(\"dnd5e.preDisplayCard\", this, messageConfig) === false ) return;\n    if ( Hooks.call(\"dnd5e.preDisplayCardV2\", this, messageConfig) === false ) return;\n\n    ChatMessage.applyRollMode(messageConfig.data, messageConfig.rollMode);\n    const card = messageConfig.create === false ? messageConfig.data : await ChatMessage.create(messageConfig.data);\n\n    /**\n     * A hook event that fires after an item chat card is created.\n     * @function dnd5e.displayCard\n     * @memberof hookEvents\n     * @param {Item5e} item                Item for which the chat card is being displayed.\n     * @param {ChatMessage5e|object} card  The created ChatMessage instance or ChatMessageData depending on whether\n     *                                     options.createMessage was set to `true`.\n     */\n    Hooks.callAll(\"dnd5e.displayCard\", this, card);\n\n    return card;\n  }\n\n  /* -------------------------------------------- */\n  /*  Chat Cards                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare an object of chat data used to display a card for the Item in the chat log.\n   * @param {object} htmlOptions    Options used by the TextEditor.enrichHTML function.\n   * @returns {object}              An object of chat data to render.\n   */\n  async getChatData(htmlOptions={}) {\n    const context = {};\n    let { identified, unidentified, description } = this.system;\n\n    // Rich text description\n    const isIdentified = identified !== false;\n    description = game.user.isGM || isIdentified ? description.value : unidentified?.description;\n    context.description = await TextEditor.enrichHTML(description ?? \"\", {\n      relativeTo: this,\n      rollData: this.getRollData(),\n      ...htmlOptions\n    });\n\n    // Type specific properties\n    context.properties = [\n      ...this.system.chatProperties ?? [],\n      ...this.system.equippableItemCardProperties ?? [],\n      ...Object.values(this.labels.activations?.[0] ?? {})\n    ].filter(p => p);\n\n    return context;\n  }\n\n  /* -------------------------------------------- */\n  /*  Item Rolls - Attack, Damage, Saves, Checks  */\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare data needed to roll a tool check and then pass it off to `d20Roll`.\n   * @param {D20RollConfiguration} [options]  Roll configuration options provided to the d20Roll function.\n   * @returns {Promise<Roll>}                 A Promise which resolves to the created Roll instance.\n   */\n  async rollToolCheck(options={}) {\n    if ( this.type !== \"tool\" ) throw new Error(\"Wrong item type!\");\n    return this.actor?.rollToolCheck({\n      ability: this.system.ability,\n      bonus: this.system.bonus,\n      prof: this.system.prof,\n      item: this,\n      tool: this.system.type.baseItem,\n      ...options\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * @inheritdoc\n   * @param {object} [options]\n   * @param {boolean} [options.deterministic] Whether to force deterministic values for data properties that could be\n   *                                          either a die term or a flat term.\n   */\n  getRollData({ deterministic=false }={}) {\n    let data;\n    if ( this.system.getRollData ) data = this.system.getRollData({ deterministic });\n    else data = { ...(this.actor?.getRollData({ deterministic }) ?? {}), item: { ...this.system } };\n    if ( data?.item ) {\n      data.item.flags = { ...this.flags };\n      data.item.name = this.name;\n    }\n    data.scaling = new Scaling(this.scalingIncrease);\n    return data;\n  }\n\n  /* -------------------------------------------- */\n  /*  Chat Message Helpers                        */\n  /* -------------------------------------------- */\n\n  /**\n   * Apply listeners to chat messages.\n   * @param {HTMLElement} html  Rendered chat message.\n   */\n  static chatListeners(html) {\n    html.addEventListener(\"click\", event => {\n      if ( event.target.closest(\"[data-context-menu]\") ) ContextMenu5e.triggerEvent(event);\n      else if ( event.target.closest(\".collapsible\") ) this._onChatCardToggleContent(event);\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle toggling the visibility of chat card content when the name is clicked\n   * @param {Event} event   The originating click event\n   * @private\n   */\n  static _onChatCardToggleContent(event) {\n    const header = event.target.closest(\".collapsible\");\n    if ( !event.target.closest(\".collapsible-content.card-content\") ) {\n      event.preventDefault();\n      header.classList.toggle(\"collapsed\");\n\n      // Clear the height from the chat popout container so that it appropriately resizes.\n      const popout = header.closest(\".chat-popout\");\n      if ( popout ) popout.style.height = \"\";\n    }\n  }\n\n  /* -------------------------------------------- */\n  /*  Activities & Advancements                   */\n  /* -------------------------------------------- */\n\n  /**\n   * Create a new activity of the specified type.\n   * @param {string} type                          Type of activity to create.\n   * @param {object} [data]                        Data to use when creating the activity.\n   * @param {object} [options={}]\n   * @param {boolean} [options.renderSheet=true]  Should the sheet be rendered after creation?\n   * @returns {Promise<ActivitySheet|null>}\n   */\n  async createActivity(type, data={}, { renderSheet=true }={}) {\n    if ( !this.system.activities ) return;\n\n    const config = CONFIG.DND5E.activityTypes[type];\n    if ( !config ) throw new Error(`${type} not found in CONFIG.DND5E.activityTypes`);\n    const cls = config.documentClass;\n\n    const createData = foundry.utils.deepClone(data);\n    const activity = new cls({ type, ...data }, { parent: this });\n    if ( activity._preCreate(createData) === false ) return;\n\n    await this.update({ [`system.activities.${activity.id}`]: activity.toObject() });\n    const created = this.system.activities.get(activity.id);\n    if ( renderSheet ) return created.sheet?.render({ force: true });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Update an activity belonging to this item.\n   * @param {string} id          ID of the activity to update.\n   * @param {object} updates     Updates to apply to this activity.\n   * @returns {Promise<Item5e>}  This item with the changes applied.\n   */\n  updateActivity(id, updates) {\n    if ( !this.system.activities ) return this;\n    if ( !this.system.activities.has(id) ) throw new Error(`Activity of ID ${id} could not be found to update`);\n    return this.update({ [`system.activities.${id}`]: updates });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Remove an activity from this item.\n   * @param {string} id          ID of the activity to remove.\n   * @returns {Promise<Item5e>}  This item with the changes applied.\n   */\n  async deleteActivity(id) {\n    const activity = this.system.activities?.get(id);\n    if ( !activity ) return this;\n    await Promise.allSettled(activity.constructor._apps.get(activity.uuid)?.map(a => a.close()) ?? []);\n    return this.update({ [`system.activities.-=${id}`]: null });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a new advancement of the specified type.\n   * @param {string} type                          Type of advancement to create.\n   * @param {object} [data]                        Data to use when creating the advancement.\n   * @param {object} [options]\n   * @param {boolean} [options.showConfig=true]    Should the new advancement's configuration application be shown?\n   * @param {boolean} [options.source=false]       Should a source-only update be performed?\n   * @returns {Promise<AdvancementConfig>|Item5e}  Promise for advancement config for new advancement if local\n   *                                               is `false`, or item with newly added advancement.\n   */\n  createAdvancement(type, data={}, { showConfig=true, source=false }={}) {\n    if ( !this.system.advancement ) return this;\n\n    const config = CONFIG.DND5E.advancementTypes[type];\n    if ( !config ) throw new Error(`${type} not found in CONFIG.DND5E.advancementTypes`);\n    const cls = config.documentClass;\n\n    if ( !config.validItemTypes.has(this.type) || !cls.availableForItem(this) ) {\n      throw new Error(`${type} advancement cannot be added to ${this.name}`);\n    }\n\n    const createData = foundry.utils.deepClone(data);\n    const advancement = new cls(data, {parent: this});\n    if ( advancement._preCreate(createData) === false ) return;\n\n    const advancementCollection = this.toObject().system.advancement;\n    advancementCollection.push(advancement.toObject());\n    if ( source ) return this.updateSource({\"system.advancement\": advancementCollection});\n    return this.update({ \"system.advancement\": advancementCollection }).then(() => {\n      if ( showConfig ) return this.advancement.byId[advancement.id]?.sheet?.render(true);\n      return this;\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Update an advancement belonging to this item.\n   * @param {string} id                       ID of the advancement to update.\n   * @param {object} updates                  Updates to apply to this advancement.\n   * @param {object} [options={}]\n   * @param {boolean} [options.source=false]  Should a source-only update be performed?\n   * @returns {Promise<Item5e>|Item5e}        This item with the changes applied, promised if source is `false`.\n   */\n  updateAdvancement(id, updates, { source=false }={}) {\n    if ( !this.system.advancement ) return this;\n    const idx = this.system.advancement.findIndex(a => a._id === id);\n    if ( idx === -1 ) throw new Error(`Advancement of ID ${id} could not be found to update`);\n\n    const advancement = this.advancement.byId[id];\n    if ( source ) {\n      advancement.updateSource(updates);\n      advancement.render();\n      return this;\n    }\n\n    const advancementCollection = this.toObject().system.advancement;\n    const clone = new advancement.constructor(advancementCollection[idx], { parent: advancement.parent });\n    clone.updateSource(updates);\n    advancementCollection[idx] = clone.toObject();\n    return this.update({\"system.advancement\": advancementCollection}).then(r => {\n      advancement.render(false, { height: \"auto\" });\n      return r;\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Remove an advancement from this item.\n   * @param {string} id                       ID of the advancement to remove.\n   * @param {object} [options={}]\n   * @param {boolean} [options.source=false]  Should a source-only update be performed?\n   * @returns {Promise<Item5e>|Item5e}        This item with the changes applied.\n   */\n  deleteAdvancement(id, { source=false }={}) {\n    if ( !this.system.advancement ) return this;\n\n    const advancementCollection = this.toObject().system.advancement.filter(a => a._id !== id);\n    if ( source ) return this.updateSource({\"system.advancement\": advancementCollection});\n    return this.update({\"system.advancement\": advancementCollection});\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Duplicate an advancement, resetting its value to default and giving it a new ID.\n   * @param {string} id                             ID of the advancement to duplicate.\n   * @param {object} [options]\n   * @param {boolean} [options.showConfig=true]     Should the new advancement's configuration application be shown?\n   * @param {boolean} [options.source=false]        Should a source-only update be performed?\n   * @returns {Promise<AdvancementConfig>|Item5e}   Promise for advancement config for duplicate advancement if source\n   *                                                is `false`, or item with newly duplicated advancement.\n   */\n  duplicateAdvancement(id, options) {\n    const original = this.advancement.byId[id];\n    if ( !original ) return this;\n    const duplicate = original.toObject();\n    delete duplicate._id;\n    if ( original.constructor.metadata.dataModels?.value ) {\n      duplicate.value = (new original.constructor.metadata.dataModels.value()).toObject();\n    } else {\n      duplicate.value = original.constructor.metadata.defaults?.value ?? {};\n    }\n    return this.createAdvancement(original.constructor.typeName, duplicate, options);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  getEmbeddedDocument(embeddedName, id, options) {\n    let doc;\n    switch ( embeddedName ) {\n      case \"Activity\": doc = this.system.activities?.get(id); break;\n      case \"Advancement\": doc = this.advancement.byId[id]; break;\n      default: return super.getEmbeddedDocument(embeddedName, id, options);\n    }\n    if ( options?.strict && (advancement === undefined) ) {\n      throw new Error(`The key ${id} does not exist in the ${embeddedName} Collection`);\n    }\n    return doc;\n  }\n\n  /* -------------------------------------------- */\n  /*  Event Handlers                              */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _preCreate(data, options, user) {\n    if ( (await super._preCreate(data, options, user)) === false ) return false;\n\n    const isPhysical = this.system.constructor._schemaTemplates?.includes(PhysicalItemTemplate);\n    if ( this.parent?.system?.isGroup && !isPhysical ) return false;\n\n    // Create identifier based on name\n    if ( this.system.hasOwnProperty(\"identifier\") && !data.system?.identifier ) {\n      this.updateSource({ \"system.identifier\": this.identifier });\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _onCreate(data, options, userId) {\n    super._onCreate(data, options, userId);\n    await this.system.onCreateActivities?.(data, options, userId);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _preUpdate(changed, options, user) {\n    if ( (await super._preUpdate(changed, options, user)) === false ) return false;\n    await this.system.preUpdateActivities?.(changed, options, user);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _onUpdate(changed, options, userId) {\n    super._onUpdate(changed, options, userId);\n    await this.system.onUpdateActivities?.(changed, options, userId);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _onDelete(options, userId) {\n    super._onDelete(options, userId);\n    await this.system.onDeleteActivities?.(options, userId);\n    if ( game.user.isActiveGM ) this.effects.forEach(e => e.getDependents().forEach(e => e.delete()));\n    if ( userId !== game.user.id ) return;\n    this.parent?.endConcentration?.(this);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async deleteDialog(options={}) {\n    // If item has advancement, handle it separately\n    if ( this.actor?.system.metadata?.supportsAdvancement && !game.settings.get(\"dnd5e\", \"disableAdvancements\") ) {\n      const manager = AdvancementManager.forDeletedItem(this.actor, this.id);\n      if ( manager.steps.length ) {\n        try {\n          const shouldRemoveAdvancements = await AdvancementConfirmationDialog.forDelete(this);\n          if ( shouldRemoveAdvancements ) return manager.render(true);\n          return this.delete({ shouldRemoveAdvancements });\n        } catch(err) {\n          return;\n        }\n      }\n    }\n\n    // Display custom delete dialog when deleting a container with contents\n    const count = await this.system.contentsCount;\n    if ( count ) {\n      return Dialog.confirm({\n        title: `${game.i18n.format(\"DOCUMENT.Delete\", {type: game.i18n.localize(\"DND5E.Container\")})}: ${this.name}`,\n        content: `<h4>${game.i18n.localize(\"AreYouSure\")}</h4>\n          <p>${game.i18n.format(\"DND5E.ContainerDeleteMessage\", {count})}</p>\n          <label>\n            <input type=\"checkbox\" name=\"deleteContents\">\n            ${game.i18n.localize(\"DND5E.ContainerDeleteContents\")}\n          </label>`,\n        yes: html => {\n          const deleteContents = html.querySelector('[name=\"deleteContents\"]').checked;\n          this.delete({ deleteContents });\n        },\n        options: { ...options, jQuery: false }\n      });\n    }\n\n    return super.deleteDialog(options);\n  }\n\n  /* -------------------------------------------- */\n  /*  Factory Methods                             */\n  /* -------------------------------------------- */\n\n  /**\n   * Add additional system-specific sidebar directory context menu options for Item documents.\n   * @param {ItemDirectory} app      The sidebar application.\n   * @param {object[]} entryOptions  The default array of context menu options.\n   */\n  static addDirectoryContextOptions(app, entryOptions) {\n    entryOptions.push({\n      name: \"DND5E.Scroll.CreateScroll\",\n      icon: '<i class=\"fa-solid fa-scroll\"></i>',\n      callback: async li => {\n        let spell = game.items.get(li.dataset.entryId);\n        if ( app.collection instanceof foundry.documents.collections.CompendiumCollection ) {\n          spell = await app.collection.getDocument(li.dataset.entryId);\n        }\n        const scroll = await Item5e.createScrollFromSpell(spell);\n        if ( scroll ) Item5e.create(scroll);\n      },\n      condition: li => {\n        let item = game.items.get(li.dataset.documentId ?? li.dataset.entryId);\n        if ( app.collection instanceof foundry.documents.collections.CompendiumCollection ) {\n          item = app.collection.index.get(li.dataset.entryId);\n        }\n        return (item.type === \"spell\") && game.user.hasPermission(\"ITEM_CREATE\");\n      },\n      group: \"system\"\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * @callback ItemContentsTransformer\n   * @param {Item5e|object} item        Data for the item to transform.\n   * @param {object} options\n   * @param {string} options.container  ID of the container to create the items.\n   * @param {number} options.depth      Current depth of the item being created.\n   * @returns {Item5e|object|void}\n   */\n\n  /**\n   * Prepare creation data for the provided items and any items contained within them. The data created by this method\n   * can be passed to `createDocuments` with `keepId` always set to true to maintain links to container contents.\n   * @param {Item5e[]} items                     Items to create.\n   * @param {object} [context={}]                Context for the item's creation.\n   * @param {Item5e} [context.container]         Container in which to create the item.\n   * @param {boolean} [context.keepId=false]     Should IDs be maintained?\n   * @param {ItemContentsTransformer} [context.transformAll]    Method called on provided items and their contents.\n   * @param {ItemContentsTransformer} [context.transformFirst]  Method called only on provided items.\n   * @returns {Promise<object[]>}                Data for items to be created.\n   */\n  static async createWithContents(items, { container, keepId=false, transformAll, transformFirst }={}) {\n    let depth = 0;\n    if ( container ) {\n      depth = 1 + (await container.system.allContainers()).length;\n      if ( depth > PhysicalItemTemplate.MAX_DEPTH ) {\n        ui.notifications.warn(game.i18n.format(\"DND5E.ContainerMaxDepth\", { depth: PhysicalItemTemplate.MAX_DEPTH }));\n        return;\n      }\n    }\n\n    const createItemData = async (item, containerId, depth) => {\n      const o = { container: containerId, depth };\n      let newItemData = transformAll ? await transformAll(item, o) : item;\n      if ( transformFirst && (depth === 0) ) newItemData = await transformFirst(newItemData, o);\n      if ( !newItemData ) return;\n      if ( newItemData instanceof Item ) newItemData = game.items.fromCompendium(newItemData, {\n        clearSort: false, keepId: true, clearOwnership: false\n      });\n      foundry.utils.mergeObject(newItemData, {\"system.container\": containerId} );\n      if ( !keepId ) newItemData._id = foundry.utils.randomID();\n\n      created.push(newItemData);\n\n      const contents = await item.system.contents;\n      if ( contents && (depth < PhysicalItemTemplate.MAX_DEPTH) ) {\n        for ( const doc of contents ) await createItemData(doc, newItemData._id, depth + 1);\n      }\n    };\n\n    const created = [];\n    for ( const item of items ) await createItemData(item, container?.id, depth);\n    return created;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Configuration options for spell scroll creation.\n   *\n   * @typedef {object} SpellScrollConfiguration\n   * @property {boolean} [dialog=true]                           Present scroll creation dialog?\n   * @property {\"full\"|\"reference\"|\"none\"} [explanation=\"full\"]  Length of spell scroll rules text to include.\n   * @property {number} [level]                                  Level at which the spell should be cast.\n   * @property {Partial<SpellScrollValues>} [values]             Spell scroll DC and attack bonus.\n   */\n\n  /**\n   * Create a consumable spell scroll Item from a spell Item.\n   * @param {Item5e|object} spell                   The spell or item data to be made into a scroll.\n   * @param {object} [options]                      Additional options that modify the created scroll.\n   * @param {SpellScrollConfiguration} [config={}]  Configuration options for scroll creation.\n   * @returns {Promise<Item5e|void>}                The created scroll consumable item.\n   */\n  static async createScrollFromSpell(spell, options={}, config={}) {\n    if ( spell.pack ) return this.createScrollFromCompendiumSpell(spell.uuid, config);\n\n    const values = {};\n    if ( (spell instanceof Item5e) && spell.isOwned && (game.settings.get(\"dnd5e\", \"rulesVersion\") === \"modern\") ) {\n      const spellcastingClass = spell.actor.spellcastingClasses?.[spell.system.sourceClass];\n      if ( spellcastingClass ) {\n        values.bonus = spellcastingClass.spellcasting.attack;\n        values.dc = spellcastingClass.spellcasting.save;\n      } else {\n        values.bonus = spell.actor.system.attributes?.spell?.mod;\n        values.dc = spell.actor.system.attributes?.spell?.dc;\n      }\n    }\n\n    config = foundry.utils.mergeObject({\n      explanation: game.user.getFlag(\"dnd5e\", \"creation.scrollExplanation\") ?? \"reference\",\n      level: spell.system.level,\n      values\n    }, config);\n\n    if ( config.dialog !== false ) {\n      const result = await CreateScrollDialog.create(spell, config);\n      if ( !result ) return;\n      foundry.utils.mergeObject(config, result);\n      await game.user.setFlag(\"dnd5e\", \"creation.scrollExplanation\", config.explanation);\n    }\n\n    // Get spell data\n    const itemData = (spell instanceof Item5e) ? spell.toObject() : spell;\n    const flags = itemData.flags ?? {};\n    if ( Number.isNumeric(config.level) ) {\n      flags.dnd5e ??= {};\n      flags.dnd5e.scaling = Math.max(0, config.level - spell.system.level);\n      flags.dnd5e.spellLevel = {\n        value: config.level,\n        base: spell.system.level\n      };\n      itemData.system.level = config.level;\n    }\n\n    /**\n     * A hook event that fires before the item data for a scroll is created.\n     * @function dnd5e.preCreateScrollFromSpell\n     * @memberof hookEvents\n     * @param {object} itemData                  The initial item data of the spell to convert to a scroll.\n     * @param {object} options                   Additional options that modify the created scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     * @returns {boolean}                        Explicitly return false to prevent the scroll to be created.\n     */\n    if ( Hooks.call(\"dnd5e.preCreateScrollFromSpell\", itemData, options, config) === false ) return;\n\n    let { activities, level, properties, source } = itemData.system;\n\n    // Get scroll data\n    let scrollUuid;\n    const id = CONFIG.DND5E.spellScrollIds[level];\n    if ( foundry.data.validators.isValidId(id) ) {\n      scrollUuid = game.packs.get(CONFIG.DND5E.sourcePacks.ITEMS).index.get(id).uuid;\n    } else {\n      scrollUuid = id;\n    }\n    const scrollItem = await fromUuid(scrollUuid);\n    const scrollData = game.items.fromCompendium(scrollItem);\n\n    // Create a composite description from the scroll description and the spell details\n    const desc = this._createScrollDescription(scrollItem, itemData, null, config);\n\n    for ( const level of Array.fromRange(itemData.system.level + 1).reverse() ) {\n      const values = CONFIG.DND5E.spellScrollValues[level];\n      if ( values ) {\n        config.values.bonus ??= values.bonus;\n        config.values.dc ??= values.dc;\n        break;\n      }\n    }\n\n    // Apply inferred spell activation, duration, range, and target data to activities\n    for ( const activity of Object.values(activities) ) {\n      for ( const key of [\"activation\", \"duration\", \"range\", \"target\"] ) {\n        if ( activity[key]?.override !== false ) continue;\n        activity[key].override = true;\n        foundry.utils.mergeObject(activity[key], itemData.system[key]);\n      }\n      activity.consumption.targets.push({ type: \"itemUses\", target: \"\", value: \"1\" });\n      if ( activity.type === \"attack\" ) {\n        activity.attack.flat = true;\n        activity.attack.bonus = values.bonus;\n      } else if ( activity.type === \"save\" ) {\n        activity.save.dc.calculation = \"\";\n        activity.save.dc.formula = values.dc;\n      }\n    }\n\n    // Create the spell scroll data\n    const spellScrollData = foundry.utils.mergeObject(scrollData, {\n      name: `${game.i18n.localize(\"DND5E.SpellScroll\")}: ${itemData.name}`,\n      effects: itemData.effects ?? [],\n      flags,\n      system: {\n        activities, description: { value: desc.trim() }, properties, source\n      }\n    });\n    foundry.utils.mergeObject(spellScrollData, options);\n    spellScrollData.system.properties = [\n      \"mgc\",\n      ...scrollData.system.properties,\n      ...properties ?? [],\n      ...options.system?.properties ?? []\n    ];\n\n    /**\n     * A hook event that fires after the item data for a scroll is created but before the item is returned.\n     * @function dnd5e.createScrollFromSpell\n     * @memberof hookEvents\n     * @param {Item5e|object} spell              The spell or item data to be made into a scroll.\n     * @param {object} spellScrollData           The final item data used to make the scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     */\n    Hooks.callAll(\"dnd5e.createScrollFromSpell\", spell, spellScrollData, config);\n\n    return new this(spellScrollData);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a consumable spell scroll Item from a spell Item.\n   * @param {string} uuid                           UUID of the spell to add to the scroll.\n   * @param {SpellScrollConfiguration} [config={}]  Configuration options for scroll creation.\n   * @returns {Promise<Item5e|void>}                The created scroll consumable item.\n   */\n  static async createScrollFromCompendiumSpell(uuid, config={}) {\n    const spell = await fromUuid(uuid);\n    if ( !spell ) return;\n\n    const values = {};\n\n    config = foundry.utils.mergeObject({\n      explanation: game.user.getFlag(\"dnd5e\", \"creation.scrollExplanation\") ?? \"reference\",\n      level: spell.system.level,\n      values\n    }, config);\n\n    if ( config.dialog !== false ) {\n      const result = await CreateScrollDialog.create(spell, config);\n      if ( !result ) return;\n      foundry.utils.mergeObject(config, result);\n      await game.user.setFlag(\"dnd5e\", \"creation.scrollExplanation\", config.explanation);\n    }\n\n    /**\n     * A hook event that fires before the item data for a scroll is created for a compendium spell.\n     * @function dnd5e.preCreateScrollFromCompendiumSpell\n     * @memberof hookEvents\n     * @param {Item5e} spell                     Spell to add to the scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     * @returns {boolean}                        Explicitly return `false` to prevent the scroll to be created.\n     */\n    if ( Hooks.call(\"dnd5e.preCreateScrollFromCompendiumSpell\", spell, config) === false ) return;\n\n    // Get scroll data\n    let scrollUuid;\n    const id = CONFIG.DND5E.spellScrollIds[spell.system.level];\n    if ( foundry.data.validators.isValidId(id) ) {\n      scrollUuid = game.packs.get(CONFIG.DND5E.sourcePacks.ITEMS).index.get(id).uuid;\n    } else {\n      scrollUuid = id;\n    }\n    const scrollItem = await fromUuid(scrollUuid);\n    const scrollData = game.items.fromCompendium(scrollItem);\n\n    for ( const level of Array.fromRange(spell.system.level + 1).reverse() ) {\n      const values = CONFIG.DND5E.spellScrollValues[level];\n      if ( values ) {\n        config.values.bonus ??= values.bonus;\n        config.values.dc ??= values.dc;\n        break;\n      }\n    }\n\n    const activity = {\n      _id: staticID(\"dnd5escrollspell\"),\n      type: \"cast\",\n      consumption: {\n        targets: [{ type: \"itemUses\", value: \"1\" }]\n      },\n      spell: {\n        challenge: {\n          attack: config.values.bonus,\n          save: config.values.dc,\n          override: true\n        },\n        level: config.level,\n        uuid\n      }\n    };\n\n    // Create the spell scroll data\n    const spellScrollData = foundry.utils.mergeObject(scrollData, {\n      name: `${game.i18n.localize(\"DND5E.SpellScroll\")}: ${spell.name}`,\n      system: {\n        activities: { ...(scrollData.system.activities ?? {}), [activity._id]: activity },\n        description: {\n          value: this._createScrollDescription(scrollItem, spell, `<p>@Embed[${uuid} inline]</p>`, config).trim()\n        }\n      }\n    });\n\n    /**\n     * A hook event that fires after the item data for a scroll is created but before the item is returned.\n     * @function dnd5e.createScrollFromSpell\n     * @memberof hookEvents\n     * @param {Item5e} spell                     The spell or item data to be made into a scroll.\n     * @param {object} spellScrollData           The final item data used to make the scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     */\n    Hooks.callAll(\"dnd5e.createScrollFromSpell\", spell, spellScrollData, config);\n\n    return new this(spellScrollData);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create the description for a spell scroll.\n   * @param {Item5e} scroll                         Base spell scroll.\n   * @param {Item5e|object} spell                   Spell being added to the scroll.\n   * @param {string} [spellDescription]             Description from the spell being added.\n   * @param {SpellScrollConfiguration} [config={}]  Configuration options for scroll creation.\n   * @returns {string}\n   * @protected\n   */\n  static _createScrollDescription(scroll, spell, spellDescription, config={}) {\n    spellDescription ??= spell.system.description.value;\n    const isConc = spell.system.properties[spell instanceof Item5e ? \"has\" : \"includes\"](\"concentration\");\n    const level = spell.system.level;\n    switch ( config.explanation ) {\n      case \"full\":\n        // Split the scroll description into an intro paragraph and the remaining details\n        const scrollDescription = scroll.system.description.value;\n        const pdel = \"</p>\";\n        const scrollIntroEnd = scrollDescription.indexOf(pdel);\n        const scrollIntro = scrollDescription.slice(0, scrollIntroEnd + pdel.length);\n        const scrollDetails = scrollDescription.slice(scrollIntroEnd + pdel.length);\n        return [\n          scrollIntro,\n          `<h3>${spell.name} (${game.i18n.format(\"DND5E.LevelNumber\", { level })})</h3>`,\n          isConc ? `<p><em>${game.i18n.localize(\"DND5E.Scroll.RequiresConcentration\")}</em></p>` : null,\n          spellDescription,\n          `<h3>${game.i18n.localize(\"DND5E.Scroll.Details\")}</h3>`,\n          scrollDetails\n        ].filterJoin(\"\");\n      case \"reference\":\n        return [\n          \"<p><em>\",\n          CONFIG.DND5E.spellLevels[level] ?? level,\n          \" &Reference[Spell Scroll]\",\n          isConc ? `, ${game.i18n.localize(\"DND5E.Scroll.RequiresConcentration\")}` : null,\n          \"</em></p>\",\n          spellDescription\n        ].filterJoin(\"\");\n    }\n    return spellDescription;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Spawn a dialog for creating a new Item.\n   * @param {object} [data]  Data to pre-populate the Item with.\n   * @param {object} [context]\n   * @param {Actor5e} [context.parent]       A parent for the Item.\n   * @param {string|null} [context.pack]     A compendium pack the Item should be placed in.\n   * @param {string[]|null} [context.types]  A list of types to restrict the choices to, or null for no restriction.\n   * @returns {Promise<Item5e|null>}\n   */\n  static async createDialog(data={}, { parent=null, pack=null, types=null, ...options }={}) {\n    types ??= game.documentTypes[this.documentName].filter(t => (t !== CONST.BASE_DOCUMENT_TYPE) && (t !== \"backpack\"));\n    if ( !types.length ) return null;\n    const collection = parent ? null : pack ? game.packs.get(pack) : game.collections.get(this.documentName);\n    const folders = collection?._formatFolderSelectOptions() ?? [];\n    const label = game.i18n.localize(this.metadata.label);\n    const title = game.i18n.format(\"DOCUMENT.Create\", { type: label });\n    const name = data.name || game.i18n.format(\"DOCUMENT.New\", { type: label });\n    let type = data.type || CONFIG[this.documentName]?.defaultType;\n    const content = await foundry.applications.handlebars.renderTemplate(\n      \"systems/dnd5e/templates/apps/document-create.hbs\",\n      {\n        folders, name, type,\n        folder: data.folder,\n        hasFolders: folders.length > 0,\n        types: types.map(type => {\n          const label = CONFIG[this.documentName]?.typeLabels?.[type] ?? type;\n          const data = {\n            type,\n            label: game.i18n.has(label) ? game.i18n.localize(label) : type,\n            icon: this.getDefaultArtwork({ type })?.img ?? \"icons/svg/item-bag.svg\"\n          };\n          data.svg = data.icon?.endsWith(\".svg\");\n          return data;\n        }).sort((a, b) => a.label.localeCompare(b.label, game.i18n.lang))\n      }\n    );\n    return Dialog.prompt({\n      title, content,\n      label: title,\n      render: html => {\n        const app = html.closest(\".app\");\n        const folder = app.querySelector(\"select\");\n        if ( folder ) app.querySelector(\".dialog-buttons\").insertAdjacentElement(\"afterbegin\", folder);\n        app.querySelectorAll(\".window-header .header-button\").forEach(btn => {\n          const label = btn.innerText;\n          const icon = btn.querySelector(\"i\");\n          btn.innerHTML = icon.outerHTML;\n          btn.dataset.tooltip = label;\n          btn.setAttribute(\"aria-label\", label);\n        });\n        app.querySelector(\".document-name\").select();\n      },\n      callback: html => {\n        const form = html.querySelector(\"form\");\n        const fd = new foundry.applications.ux.FormDataExtended(form);\n        const createData = foundry.utils.mergeObject(data, fd.object, { inplace: false });\n        if ( !createData.folder ) delete createData.folder;\n        if ( !createData.name?.trim() ) createData.name = this.defaultName();\n        return this.create(createData, { parent, pack, renderSheet: true });\n      },\n      rejectClose: false,\n      options: { ...options, jQuery: false, width: 350, classes: [\"dnd5e2\", \"create-document\", \"dialog\"] }\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static getDefaultArtwork(itemData={}) {\n    const { type } = itemData;\n    const { img } = super.getDefaultArtwork(itemData);\n    return { img: CONFIG.DND5E.defaultArtwork.Item[type] ?? img };\n  }\n\n  /* -------------------------------------------- */\n  /*  Migrations & Deprecations                   */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static migrateData(source) {\n    source = super.migrateData(source);\n    ActivitiesTemplate.initializeActivities(source);\n    if ( source.type === \"class\" ) ClassData._migrateTraitAdvancement(source);\n    else if ( source.type === \"container\" ) ContainerData._migrateWeightlessData(source);\n    else if ( source.type === \"equipment\" ) EquipmentData._migrateStealth(source);\n    else if ( source.type === \"spell\" ) SpellData._migrateComponentData(source);\n    return source;\n  }\n}\n",
      "module/applications/advancement/item-grant-config.mjs": "import AdvancementConfig from \"./advancement-config-v2.mjs\";\n\n/**\n * Configuration application for item grants.\n */\nexport default class ItemGrantConfig extends AdvancementConfig {\n  /** @override */\n  static DEFAULT_OPTIONS = {\n    classes: [\"item-grant\"],\n    dropKeyPath: \"items\"\n  };\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static PARTS = {\n    ...super.PARTS,\n    details: {\n      template: \"systems/dnd5e/templates/advancement/item-grant-config-details.hbs\"\n    },\n    spellConfig: {\n      template: \"systems/dnd5e/templates/advancement/advancement-spell-config-section.hbs\"\n    },\n    items: {\n      template: \"systems/dnd5e/templates/advancement/item-grant-config-items.hbs\"\n    }\n  };\n\n  /* -------------------------------------------- */\n  /*  Rendering                                   */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _prepareContext(options) {\n    const context = await super._prepareContext(options);\n\n    context.items = this.advancement.configuration.items.map(data => ({\n      data,\n      fields: this.advancement.configuration.schema.fields.items.element.fields,\n      index: fromUuidSync(data.uuid)\n    }));\n\n    context.abilityOptions = Object.entries(CONFIG.DND5E.abilities).map(([value, { label }]) => ({ value, label }));\n    context.showContainerWarning = context.items.some(i => i.index?.type === \"container\");\n    context.showSpellConfig = context.items.some(i => i.index?.type === \"spell\");\n\n    const { spell } = this.advancement.configuration;\n    const model = CONFIG.DND5E.spellcasting[spell?.method];\n    context.showRequireSpellSlot = !spell?.method || model?.slots;\n    context.canPrepare = model?.prepares;\n    context.spellcastingMethods = Object.values(CONFIG.DND5E.spellcasting).map(({ key, label }) => {\n      return { label, value: key };\n    });\n    if ( spell?.method && !(spell.method in CONFIG.DND5E.spellcasting) ) {\n      context.spellcastingMethods.push({ label: spell.method, value: spell.method });\n    }\n\n    return context;\n  }\n\n  /* -------------------------------------------- */\n  /*  Form Handling                               */\n  /* -------------------------------------------- */\n\n  /** @override */\n  async prepareConfigurationUpdate(configuration) {\n    if ( configuration.spell ) configuration.spell.ability ??= [];\n    return configuration;\n  }\n\n  /* -------------------------------------------- */\n  /*  Drag & Drop                                 */\n  /* -------------------------------------------- */\n\n  /** @override */\n  _validateDroppedItem(event, item) {\n    this.advancement._validateItemType(item);\n  }\n}\n"
    }
  },
  "spell_progression": {
    "spellcasting_configurations": {
      "lang/en.json": {
        "DOCUMENT.DND5E": {
          "Activity": "Activity",
          "Advancement": "Advancement",
          "Warning": {
            "SelectType": "{name} type must be selected for creation."
          }
        },
        "TYPES.Actor.character": "Player Character",
        "TYPES.Actor.characterPl": "Player Characters",
        "TYPES.Actor.encounter": "Encounter",
        "TYPES.Actor.encounterPl": "Encounters",
        "TYPES.Actor.group": "Group",
        "TYPES.Actor.groupPl": "Groups",
        "TYPES.Actor.npc": "Non-Player Character",
        "TYPES.Actor.npcPl": "Non-Player Characters",
        "TYPES.Actor.vehicle": "Vehicle",
        "TYPES.Actor.vehiclePl": "Vehicles",
        "TYPES.ActiveEffect.enchantment": "Enchantment",
        "TYPES.ActiveEffect.enchantmentPl": "Enchantments",
        "TYPES.ChatMessage": {
          "request": "Request Message",
          "rest": "Rest Message",
          "turn": "Combat Turn Message"
        },
        "TYPES.Item.background": "Background",
        "TYPES.Item.backgroundPl": "Backgrounds",
        "TYPES.Item.container": "Container",
        "TYPES.Item.containerPl": "Containers",
        "TYPES.Item.class": "Class",
        "TYPES.Item.classPl": "Classes",
        "TYPES.Item.consumable": "Consumable",
        "TYPES.Item.consumablePl": "Consumables",
        "TYPES.Item.equipment": "Equipment",
        "TYPES.Item.equipmentPl": "Equipment",
        "TYPES.Item.facility": "Facility",
        "TYPES.Item.facilityPl": "Facilities",
        "TYPES.Item.feat": "Feature",
        "TYPES.Item.featurePl": "Features",
        "TYPES.Item.loot": "Loot",
        "TYPES.Item.lootPl": "Loot",
        "TYPES.Item.race": "Species",
        "TYPES.Item.racePl": "Species",
        "TYPES.Item.raceLegacy": "Race",
        "TYPES.Item.raceLegacyPl": "Races",
        "TYPES.Item.spell": "Spell",
        "TYPES.Item.spellPl": "Spells",
        "TYPES.Item.subclass": "Subclass",
        "TYPES.Item.subclassPl": "Subclasses",
        "TYPES.Item.tool": "Tool",
        "TYPES.Item.toolPl": "Tools",
        "TYPES.Item.weapon": "Weapon",
        "TYPES.Item.weaponPl": "Weapons",
        "TYPES.RegionBehavior": {
          "dnd5e.difficultTerrain": "Difficult Terrain",
          "dnd5e.rotateArea": "Rotate Area"
        },
        "DND5E.title": "Dungeon & Dragons Fifth Edition",
        "DND5E.AbbreviationCR": "CR",
        "DND5E.AbbreviationConc": "Conc.",
        "DND5E.AbbreviationDC": "DC",
        "DND5E.AbbreviationKg": "kg",
        "DND5E.AbbreviationLR": "LR",
        "DND5E.AbbreviationLevel": "Lvl",
        "DND5E.AbbreviationLbs": "lbs.",
        "DND5E.AbbreviationSR": "SR",
        "DND5E.ABILITY": {
          "Configure": {
            "CheckLabel": "{ability} Check",
            "SaveLabel": "{ability} Save",
            "Title": "Configure {ability}"
          },
          "SECTIONS": {
            "Bonuses": {
              "Label": "{ability} Bonuses",
              "Hint": "These bonuses apply to checks & saves made with {ability}."
            },
            "Global": {
              "Label": "Global Bonuses",
              "Hint": "These bonuses apply to checks & saves made with any ability."
            },
            "Score": "{ability} Score"
          }
        },
        "DND5E.Ability": "Ability",
        "DND5E.Abilities": "Abilities",
        "DND5E.AbilityStr": "Strength",
        "DND5E.AbilityStrAbbr": "str",
        "DND5E.AbilityCon": "Constitution",
        "DND5E.AbilityConAbbr": "con",
        "DND5E.AbilityDex": "Dexterity",
        "DND5E.AbilityDexAbbr": "dex",
        "DND5E.AbilityInt": "Intelligence",
        "DND5E.AbilityIntAbbr": "int",
        "DND5E.AbilityWis": "Wisdom",
        "DND5E.AbilityWisAbbr": "wis",
        "DND5E.AbilityCha": "Charisma",
        "DND5E.AbilityChaAbbr": "cha",
        "DND5E.AbilityHon": "Honor",
        "DND5E.AbilityHonAbbr": "hon",
        "DND5E.AbilitySan": "Sanity",
        "DND5E.AbilitySanAbbr": "san",
        "DND5E.AbilityScore": "Ability Score",
        "DND5E.AbilityScoreShort": "Score",
        "DND5E.AbilityScorePl": "Ability Scores",
        "DND5E.AbilityScoreL": "{ability} Score",
        "DND5E.AbilityScoreMax": "Maximum Ability Score",
        "DND5E.AbilityScoreMaxShort": "Maximum",
        "DND5E.AbilityModifier": "Ability Modifier",
        "DND5E.AbilityModifierShort": "Mod",
        "DND5E.AbilityPromptText": "What type of {ability} check?",
        "DND5E.AbilityPromptTitle": "{ability} Ability Check",
        "DND5E.AbilityUseChargesLabel": "{value} Charges",
        "DND5E.AbilityUseConsumableLabel": "{max} per {per}",
        "DND5E.AbilityUseCast": "Cast Spell",
        "DND5E.AbilityUseUse": "Use Ability",
        "DND5E.AbilityUseConfig": "Usage Configuration",
        "DND5E.AbilityBonuses": "Ability Bonuses",
        "DND5E.AbilityConfigure": "Configure {ability}",
        "DND5E.AbilityConfigureTitle": "Configure {ability} Saving Throws and Checks",
        "DND5E.AbilitySaveConfigure": "{ability} Saving Throws",
        "DND5E.AbilityCheckConfigure": "{ability} Ability Checks",
        "DND5E.AbilityCheckConfigurationHint": "Configure check bonuses.",
        "DND5E.AbilityConfigurationHint": "Configure ability saving throw proficiency, saving throw bonuses, and check bonuses.",
        "DND5E.AbilityCheckBonus": "Check Bonus",
        "DND5E.AbilityCheckGlobalBonusHint": "This bonus applies to all ability checks made by this actor.",
        "DND5E.Action": "Action",
        "DND5E.ActionAbbr": "A",
        "DND5E.ActionPl": "Actions",
        "DND5E.ActionAbil": "Ability Check",
        "DND5E.ActionEnch": "Enchant",
        "DND5E.ActionHeal": "Heal",
        "DND5E.ActionMSAK": "Melee Spell Attack",
        "DND5E.ActionMWAK": "Melee Weapon Attack",
        "DND5E.ActionOther": "Other",
        "DND5E.ActionRSAK": "Ranged Spell Attack",
        "DND5E.ActionRWAK": "Ranged Weapon Attack",
        "DND5E.ActionSave": "Saving Throw",
        "DND5E.ActionSumm": "Summon",
        "DND5E.ActionUtil": "Utility",
        "DND5E.ActionWarningNoItem": "The requested item {item} no longer exists on Actor {name}",
        "DND5E.ActionWarningNoToken": "You must have one or more controlled Tokens in order to use this option.",
        "DND5E.ACTIVATION": {
          "FIELDS": {
            "activation": {
              "label": "Activation",
              "condition": {
                "label": "Activation Condition",
                "hint": "Condition required to activate this activity."
              },
              "override": {
                "label": "Override Activation",
                "hint": "Use these activation values instead of the item's when using this activity."
              },
              "type": {
                "label": "Activation Cost",
                "hint": "Activation type (e.g. action, legendary action, minutes)."
              },
              "value": {
                "label": "Activation Value",
                "hint": "Scalar value associated with the activation."
              }
            }
          },
          "Category": {
            "Combat": "Combat",
            "Monster": "Monster",
            "Rest": "Rest",
            "Standard": "Standard",
            "Time": "Time",
            "Vehicle": "Vehicle"
          },
          "Type": {
            "Action": {
              "Header": "Actions",
              "Label": "Action"
            },
            "BonusAction": {
              "Header": "Bonus Actions",
              "Label": "Bonus Action"
            },
            "Crew": {
              "Header": "Crew Actions",
              "Label": "Crew Action"
            },
            "Day": {
              "Header": "Days",
              "Label": "Day"
            },
            "Encounter": {
              "Label": "Start of Encounter"
            },
            "Hour": {
              "Header": "Hours",
              "Label": "Hour"
            },
            "Lair": {
              "Header": "Lair Actions",
              "Label": "Lair Action"
            },
            "Legendary": {
              "Counted": {
                "one": "{number} legendary action",
                "other": "{number} legendary actions"
              },
              "Header": "Legendary Actions",
              "Label": "Legendary Action"
            },
            "LongRest": {
              "Label": "End of a Long Rest"
            },
            "Minute": {
              "Header": "Minutes",
              "Label": "Minute"
            },
            "Mythic": {
              "Header": "Mythic Actions",
              "Label": "Mythic Action"
            },
            "Reaction": {
              "Header": "Reactions",
              "Label": "Reaction"
            },
            "ShortRest": {
              "Label": "End of a Short Rest"
            },
            "TurnEnd": {
              "Label": "End of Turn"
            },
            "TurnStart": {
              "Label": "Start of Turn"
            }
          },
          "Warning": {
            "NoActions": "No {type} are available, but activating this requires at least {required}.",
            "NotEnoughActions": "Not enough {type} to activate, {required} required but only {available} available."
          }
        },
        "DND5E.ACTIVEEFFECT": {
          "AttributeKeyTooltip": "For a list of common keys, see <a href=\"{url}\">the wiki</a>.",
          "FIELDS": {
            "statuses": {
              "label": "Status Conditions",
              "hint": "While affected by this Active Effect, the target will be treated as having these additional status conditions."
            }
          }
        },
        "DND5E.ACTIVITY": {
          "Action": {
            "Create": "Create Activity",
            "Delete": "Delete Activity"
          },
          "Title": {
            "one": "Activity",
            "other": "Activities"
          },
          "FIELDS": {
            "description": {
              "label": "Description",
              "chatFlavor": {
                "label": "Chat Flavor",
                "hint": "Additional text displayed in the activation chat message."
              }
            },
            "effects": {
              "label": "Applied Effects"
            },
            "img": {
              "label": "Icon"
            },
            "name": {
              "label": "Name"
            }
          },
          "SECTIONS": {
            "Activation": "Activation",
            "Behavior": "Behavior",
            "Effect": "Effect",
            "Identity": "Identity",
            "Time": "Time"
          },
          "Warning": {
            "UsageNotAllowed": "Using this activity isn't currently possible."
          }
        },
        "DND5E.ACTOR": {
          "Warning": {
            "CreateActor": "You must have 'Create New Actors' permission in order to summon directly from a compendium.",
            "InvalidItem": "{itemType} items cannot be added to a {actorType}.",
            "NoActor": "Actor cannot be found with UUID '{uuid}' to summon.",
            "Singleton": "Only a single {itemType} can be added to a {actorType}."
          }
        },
        "DND5E.ActiveEffectOverrideWarning": "This value is being modified by an Active Effect and cannot be edited. Disable the effect to edit it.",
        "DND5E.Add": "Add",
        "DND5E.AdditionalControls": "Additional Controls",
        "DND5E.AdditionalSettings": "Additional Settings",
        "DND5E.AddEmbeddedItemPromptHint": "Do you want to add these items to your character sheet?",
        "DND5E.Advanced": "Advanced",
        "DND5E.ADVANCEMENT": {
          "AbilityScoreImprovement": {
            "Action": {
              "Select": "Select Feat"
            },
            "CapDisplay": {
              "one": "Max {points} point per score",
              "other": "Max {points} points per score"
            },
            "Details": "Improvement Details",
            "Feat": {
              "ASIName": "Ability Score Improvement Feat",
              "Hint": "Drop a feat here to choose one instead of an ability score improvement."
            },
            "FIELDS": {
              "cap": {
                "hint": "Maximum number of points a player can assign to a single score.",
                "label": "Point Cap"
              },
              "fixed": {
                "hint": "Abilities that are improved by a fixed amount and cannot be manually improved during the process.",
                "label": "Fixed Improvement"
              },
              "locked": {
                "hint": "Ability cannot be improved.",
                "label": "Locked",
                "locked": "Ability cannot be improved.",
                "unlocked": "Ability may be improved."
              },
              "max": {
                "hint": "Increase the maximum score from what is allowed on the actor.",
                "label": "Maximum"
              },
              "points": {
                "decrease": "Decrease Points",
                "hint": "Number of points that can be assigned to any unlocked ability score.",
                "increase": "Increase Points",
                "label": "Points"
              },
              "recommendation": {
                "hint": "Epic Boon feat recommended by this class.",
                "label": "Recommendation"
              }
            },
            "Hint": "Allow the player to increase one or more ability scores or take an optional feat.",
            "Journal": {
              "DescriptionEpic": "<p>You gain an Epic Boon feat or another feat of your choice for which you qualify. {recommendation} is recommended.</p>",
              "DescriptionLegacy": "<p>When you reach {firstLevelOrdinal} level, and again at {otherLevelsOrdinal} level, you can increase one ability score of your choice by 2, or you can increase two ability scores of your choice by 1. As normal, you can\u2019t increase an ability score above {maxAbilityScore} using this feature.</p><p>Using the optional feats rule, you can forgo taking this feature to take a feat of your choice instead.</p>",
              "DescriptionModern": "<p>You gain the Ability Score Improvement feat or another feat of your choice for which you qualify. You gain this feature again at {class} levels {otherLevels}.</p>",
              "Name": "Ability Score Improvement"
            },
            "LockedHint": "Scores cannot be modified with a feat selected.",
            "PointsRemaining": {
              "one": "{points} Point Remaining",
              "other": "{points} Points Remaining"
            },
            "Title": "Ability Score Improvement",
            "TitleEpic": "Epic Boon",
            "Warning": {
              "Type": "Only features with the \"feat\" type can be selected."
            }
          },
          "Action": {
            "Create": "Create Advancement",
            "Delete": "Delete Advancement",
            "Duplicate": "Duplicate Advancement",
            "Edit": "Edit Advancement",
            "View": "View Advancement"
          },
          "Config": {
            "AnyLevel": "Any",
            "Details": "Advancement Details"
          },
          "Defaults": {
            "BackgroundFeat": "Background Feat",
            "BackgroundFeature": "Background Feature",
            "BackgroundProficiencies": "Background Proficiencies",
            "ChooseLanguages": "Choose Languages"
          },
          "HitPoints": {
            "Action": {
              "Roll": "Roll {die}"
            },
            "Average": "Average",
            "Hint": "Track the player's hit points for each level in the class.",
            "MaxAtFirstLevel": "Max at 1st Level: <strong>{max}</strong>",
            "Roll": "Roll {class} Hit Points",
            "Starting": "Hit Points at 1st Level",
            "TakeAverage": "Take Average",
            "Title": "Hit Points",
            "Warning": {
              "Empty": "Hit points must be rolled or the average value must be taken.",
              "Invalid": "Hit points must be a valid whole number."
            }
          },
          "ItemChoice": {
            "Action": {
              "SelectGeneric": "Select Item",
              "SelectSpecific": "Select {type}"
            },
            "Choose": "choose {count}",
            "Chosen": "Chosen: {current} of {max}",
            "Details": "Choice Details",
            "DropHint": "Drop Items here to add them to the list that can be chosen with this advancement.",
            "FIELDS": {
              "allowDrops": {
                "hint": "Allow players to be able to drop their own choices into this advancement.",
                "label": "Allow Drops"
              },
              "choices": {
                "hint": "Specify how many choices are allowed at each level.",
                "label": "Choices",
                "FIELDS": {
                  "count": {
                    "label": "Count"
                  },
                  "replacement": {
                    "label": "Allow Replacement"
                  }
                }
              },
              "pool": {
                "label": "Item Options"
              },
              "restriction": {
                "level": {
                  "Available": "Any Available Level",
                  "hint": "Only allow choices from spells of this level.",
                  "label": "Spell Level"
                },
                "list": {
                  "hint": "Only allow spells from these lists.",
                  "label": "Spell Lists"
                },
                "subtype": {
                  "label": "Subtype"
                },
                "type": {
                  "label": "Type"
                }
              },
              "type": {
                "Any": "Anything",
                "hint": "Restrict what Item types can be chosen.",
                "label": "Item Type"
              }
            },
            "Hint": "Present the player with a choice of items (such as equipment, features, or spells) that they can choose for their character at one or more levels.",
            "Replacement": {
              "None": "No Replacement",
              "Title": "replace"
            },
            "Title": "Choose Items",
            "Warning": {
              "InvalidType": "Only {type} items can be selected for this choice.",
              "MaxSelected": "No additional items can be selected, uncheck items before selecting more.",
              "NoOriginal": "Previously selected choice no longer available for replacement.",
              "SpellLevelAvailable": "Only {level} or lower spells can be chosen for this advancement.",
              "SpellLevelSpecific": "Only {level} spells can be chosen for this advancement.",
              "SpellList": "Only spells available on the {lists} spell list can be chosen for this advancement."
            }
          },
          "ItemGrant": {
            "Details": "Grant Details",
            "DropHint": "Drop Items here to add them to the list granted by this advancement.",
            "FIELDS": {
              "items": {
                "label": "Items"
              },
              "optional": {
                "label": "Optional",
                "hint": "If the whole advancement is marked optional, players may opt out of any of the following items, otherwise all non-optional items are granted."
              }
            },
            "Hint": "Grant the character items (such as equipment, features, or spells) when they reach a certain level.",
            "Title": "Grant Items",
            "Warning": {
              "Container": "Container contents will not be added with containers.",
              "Duplicate": "That item already exists on this advancement.",
              "Recursive": "You cannot grant an item in its own advancement."
            }
          },
          "Manager": {
            "Action": {
              "Complete": "Complete",
              "NextStep": "Next",
              "PreviousStep": "Previous",
              "Restart": "Restart"
            },
            "ClosePrompt": {
              "Action": {
                "Continue": "Continue",
                "Stop": "Stop Advancement"
              },
              "Message": "<p>If the advancement process is cancelled, choices made so far will be discarded and no changes will be made to the actor.</p>",
              "Title": "Stop Advancement"
            },
            "RestartPrompt": {
              "Message": "Are you sure you wish to undo all choices so far?",
              "Title": "Restart Advancement Choices"
            },
            "Steps": "Step {current} of {total}",
            "Title": {
              "Default": "Advancement",
              "LevelIncreased": "Level Up Character",
              "LevelNewClass": "Add Class",
              "ModifyChoices": "Modify Choices"
            }
          },
          "Migration": {
            "Action": {
              "Confirm": "Apply Migrations"
            },
            "Hint": "Select which of the following advancements will be added to {name}.",
            "Selection": "Advancement Selection",
            "Title": "Migrate Advancement"
          },
          "ScaleValue": {
            "Action": {
              "CopyFormula": "Copy Formula"
            },
            "Details": "Scale Value Details",
            "FIELDS": {
              "distance": {
                "units": {
                  "label": "Distance Units"
                }
              },
              "identifier": {
                "label": "Identifier"
              },
              "scale": {
                "label": "Scale"
              },
              "type": {
                "label": "Scale Type"
              }
            },
            "Hint": "A single value that changes as a class increases in level that is made available in roll formulas (such as a Monk's martial arts die).",
            "Title": "Scale Value",
            "Type": {
              "CR": {
                "FIELDS": {
                  "value": {
                    "label": "CR"
                  }
                },
                "Hint": "Use this for representing creature challenge ratings for features like Wild Shape",
                "Label": "Challenge Rating"
              },
              "Dice": {
                "FIELDS": {
                  "faces": {
                    "label": "Faces"
                  },
                  "number": {
                    "label": "Number"
                  }
                },
                "Hint": "Use this for dice values like bardic inspiration, sneak attack, or superiority dice.",
                "Identifier": "This scale value for the current level will be available in a formula using:<br><copyable-text>@scale.{class}.{identifier}</copyable-text> - whole formula (<code>4d6</code>)<br><copyable-text>@scale.{class}.{identifier}.die</copyable-text> - whole die (<code>d6</code>)<br><copyable-text>@scale.{class}.{identifier}.number</copyable-text> - number of dice (<code>4</code>)<br><copyable-text>@scale.{class}.{identifier}.faces</copyable-text> - number of faces (<code>6</code>)",
                "Label": "Dice"
              },
              "Distance": {
                "Hint": "Use this for numerical values that represent a distance, such as unarmored movement speed, or aura of protection radius.",
                "Label": "Distance"
              },
              "Number": {
                "Hint": "Use this for purely numerical values like rage damage bonus or number of uses per day.",
                "Label": "Numeric"
              },
              "String": {
                "FIELDS": {
                  "value": {
                    "label": "Value"
                  }
                },
                "Hint": "Use this if you are unsure of the type of the scale values, or if the type does not matter.",
                "Identifier": "This scale value for the current level will be available in a formula using:<br><copyable-text>@scale.{class}.{identifier}</copyable-text>",
                "Label": "Anything"
              }
            }
          },
          "Size": {
            "DefaultHint": {
              "Multiple": "Choose your size from either {sizes}.",
              "Single": "Your size is {size}."
            },
            "FIELDS": {
              "sizes": {
                "label": "Sizes"
              }
            },
            "Hint": "Set a character's size.",
            "Title": "Size"
          },
          "SPELLCONFIG": {
            "FIELDS": {
              "spell": {
                "label": "Spell Details",
                "ability": {
                  "label": "Ability"
                },
                "method": {
                  "label": "Spellcasting Method"
                },
                "prepared": {
                  "label": "Preparation"
                },
                "uses": {
                  "max": {
                    "label": "Uses"
                  },
                  "per": {
                    "label": "Period"
                  },
                  "requireSlot": {
                    "label": "Require Slot",
                    "hint": "Require a spell slot to be spent when using the limited uses. If not checked then the uses will be additional free uses that don't consume a slot."
                  }
                }
              }
            },
            "FreeCasting": "Free Casting"
          },
          "Subclass": {
            "Action": {
              "Select": "Select Subclass"
            },
            "Hint": "Specify what level this class receives its subclass.",
            "Title": "Subclass",
            "Warning": {
              "InvalidType": "Only subclasses may be selected."
            }
          },
          "Trait": {
            "Action": {
              "AddChoice": "Add Choice",
              "RemoveChoice": "Remove Choice"
            },
            "ChoicesRemaining": "Select {count} more {type}",
            "Details": "Trait Details",
            "FIELDS": {
              "allowReplacements": {
                "hint": "If a trait is already set on the actor, allow the player to choose from any other trait as a replacement.",
                "label": "Allow Replacements"
              },
              "choices": {
                "hint": "The following traits will be presented as a choice to the player.",
                "label": "Choices",
                "FIELDS": {
                  "count": {
                    "label": "Count"
                  },
                  "pool": {
                    "label": "Traits"
                  }
                }
              },
              "grants": {
                "hint": "The following traits will be granted to the character as long as they don't already possess that trait.",
                "label": "Guaranteed"
              },
              "mode": {
                "label": "Mode"
              }
            },
            "Hint": "Grant a character certain traits or give them an option to select traits (such as proficiencies, skills, languages).",
            "Mode": {
              "Default": {
                "Hint": "Gain a trait or proficiency.",
                "Label": "Default"
              },
              "Expertise": {
                "Hint": "Gain expertise in a trait in which you already have proficiency.",
                "Label": "Expertise"
              },
              "Force": {
                "Hint": "Gain expertise in a trait regardless of your previous proficiency level.",
                "Label": "Forced Expertise"
              },
              "Mastery": {
                "Hint": "Gain mastery with a weapon in which you already have proficiency.",
                "Label": "Mastery"
              },
              "Upgrade": {
                "Hint": "Gain proficiency in a trait unless you already have it, otherwise gain expertise.",
                "Label": "Upgrade"
              }
            },
            "TraitType": "Trait Type",
            "Title": "Traits"
          }
        },
        "DND5E.AdvancementChoices": "choices",
        "DND5E.AdvancementClassRestriction": "Class Restriction",
        "DND5E.AdvancementClassRestrictionNone": "All Classes",
        "DND5E.AdvancementClassRestrictionPrimary": "Original Class Only",
        "DND5E.AdvancementClassRestrictionSecondary": "Multiclass Only",
        "DND5E.AdvancementConfigurationActionDisable": "Disable Configuration",
        "DND5E.AdvancementConfigurationActionEnable": "Enable Configuration",
        "DND5E.AdvancementConfigurationModeDisabled": "Configuration Disabled",
        "DND5E.AdvancementConfigurationModeEnabled": "Configuration Enabled",
        "DND5E.AdvancementConfigureTitle": "Configure {item} Advancement",
        "DND5E.AdvancementConfigureAllowDrops": "Allow Drops",
        "DND5E.AdvancementConfigureAllowDropsHint": "Should players be able to drop their own choices into this advancement?",
        "DND5E.AdvancementConfigureDropAreaHint": "Drop Items here to add them to the pool from which a player can choose.",
        "DND5E.AdvancementConfiguredComplete": "Fully Configured",
        "DND5E.AdvancementConfiguredIncomplete": "Not Configured",
        "DND5E.AdvancementCustomIcon": "Custom Icon",
        "DND5E.AdvancementCustomTitle": "Custom Title",
        "DND5E.AdvancementDeleteConfirmationLabel": "Remove advancement changes",
        "DND5E.AdvancementDeleteConfirmationMessage": "Deleting this item will also delete all advancement choices made for it. These changes will be removed from your character as long as the checkbox below is checked.",
        "DND5E.AdvancementDeleteConfirmationTitle": "Confirm Deletion",
        "DND5E.AdvancementFlowDropAreaHint": "Drop an Item here to choose it.",
        "DND5E.AdvancementHint": "Hint",
        "DND5E.AdvancementItemTypeInvalidWarning": "{type} items cannot be added with this advancement type.",
        "DND5E.AdvancementLevelHeader": "Level {level}",
        "DND5E.AdvancementLevelAnyHeader": "Any Level",
        "DND5E.AdvancementLevelNoneHeader": "No Level",
        "DND5E.AdvancementLevelDownConfirmationMessage": "Leveling this class down will also undo all advancement choices made for it. These changes will be removed from your character as long as the checkbox below is checked.",
        "DND5E.AdvancementLevelDownConfirmationTitle": "Confirm Leveling Down",
        "DND5E.AdvancementModifyChoices": "Modify Choices",
        "DND5E.AdvancementSaveButton": "Save Advancement",
        "DND5E.AdvancementSelectionCreateButton": "Create Advancement",
        "DND5E.AdvancementSelectionTitle": "Select Advancement Type",
        "DND5E.AdvancementTitle": "Advancement",
        "DND5E.Advantage": "Advantage",
        "DND5E.AdvantageMode": "Advantage Mode",
        "DND5E.Age": "Age",
        "DND5E.Alignment": "Alignment",
        "DND5E.AlignmentCE": "Chaotic Evil",
        "DND5E.AlignmentCG": "Chaotic Good",
        "DND5E.AlignmentCN": "Chaotic Neutral",
        "DND5E.AlignmentLE": "Lawful Evil",
        "DND5E.AlignmentLG": "Lawful Good",
        "DND5E.AlignmentLN": "Lawful Neutral",
        "DND5E.AlignmentNE": "Neutral Evil",
        "DND5E.AlignmentNG": "Neutral Good",
        "DND5E.AlignmentTN": "True Neutral",
        "DND5E.Amount": "Amount",
        "DND5E.Appearance": "Appearance",
        "DND5E.Apply": "Apply",
        "DND5E.Attunement": "Attunement",
        "DND5E.AttunementMax": "Maximum Attuned Items",
        "DND5E.AttunementNone": "Attunement Not Required",
        "DND5E.AttunementOptional": "Optional Attunement",
        "DND5E.AttunementRequired": "Attunement Required",
        "DND5E.AttunementAttuned": "Attuned",
        "DND5E.AttunementOverride": "Override attunement",
        "DND5E.Attuned": "Attuned",
        "DND5E.AreaOfEffect": {
          "Label": "Area of Effect",
          "Size": {
            "Label": "Size",
            "Height": "Height",
            "Length": "Length",
            "Radius": "Radius",
            "Thickness": "Thickness",
            "Width": "Width"
          }
        },
        "DND5E.Armor": "Armor",
        "DND5E.ArmorClass": "Armor Class",
        "DND5E.ArmorClassEquipment": "Equipped Armor",
        "DND5E.ArmorClassFlat": "Flat",
        "DND5E.ArmorClassUnarmored": "Unarmored",
        "DND5E.ArmorClassNatural": "Natural Armor",
        "DND5E.ArmorClassMage": "Mage Armor",
        "DND5E.ArmorClassMotionless": "Armor Class while Motionless",
        "DND5E.ArmorClassDraconic": "Draconic Resilience",
        "DND5E.ArmorClassUnarmoredMonk": "Unarmored Defense (Monk)",
        "DND5E.ArmorClassUnarmoredBarbarian": "Unarmored Defense (Barbarian)",
        "DND5E.ArmorClassUnarmoredBard": "Unarmored Defense (Bard)",
        "DND5E.ArmorClassCustom": "Custom Formula",
        "DND5E.ArmorConfig": "Configure Armor",
        "DND5E.ArmorConfigHint": "Fill in the above box to override automatically calculated armor class.",
        "DND5E.ArmorClassCalculation": "Calculation",
        "DND5E.ArmorClassFormula": "Formula",
        "DND5E.ArmorHeavyProficiency": "Heavy",
        "DND5E.ArmorLightProficiency": "Light",
        "DND5E.ArmorMediumProficiency": "Medium",
        "DND5E.ArmorValue": "Armor Value",
        "DND5E.AC": "AC",
        "DND5E.ATTACK": {
          "Title": {
            "one": "Attack",
            "other": "Attacks"
          },
          "FIELDS": {
            "attack": {
              "label": "Attack Details",
              "ability": {
                "label": "Attack Ability",
                "hint": "Ability used for make the attack and determine damage. Available using @mod in formulas."
              },
              "bonus": {
                "label": "To Hit Bonus",
                "hint": "Bonus added to the to hit roll for the attack."
              },
              "critical": {
                "threshold": {
                  "label": "Critical Threshold",
                  "hint": "Minimum value on the D20 needed to roll a critical hit."
                }
              },
              "flat": {
                "label": "Flat To Hit",
                "hint": "Ignore the ability modifier, proficiency, and any other bonuses from the actor and only use the bonus defined by the activity when calculating to hit."
              },
              "type": {
                "label": "Attack Type",
                "value": {
                  "label": "Attack Type",
                  "hint": "Is this a melee or ranged attack?"
                },
                "classification": {
                  "label": "Attack Classification",
                  "hint": "Is this an unarmed, weapon, or spell attack?"
                }
              }
            },
            "damage": {
              "label": "Attack Damage",
              "critical": {
                "bonus": {
                  "label": "Extra Critical Damage",
                  "hint": "Extra damage applied when a critical is rolled. Added to the base damage or first damage part."
                }
              },
              "includeBase": {
                "label": "Include Base Damage",
                "hint": "Include the item's base damage with any additional damage parts."
              },
              "parts": {
                "label": "Damage Parts",
                "hint": "Individual damage parts to include with the roll."
              }
            }
          },
          "Attack": {
            "mwak": "Melee Attack",
            "rwak": "Ranged Attack"
          },
          "Classification": {
            "Spell": "Spell",
            "Unarmed": "Unarmed",
            "Weapon": "Weapon"
          },
          "Formatted": {
            "2014": "{type} {classification} Attack",
            "2024": "{type} Attack Roll"
          },
          "Mode": {
            "Label": "Attack Mode",
            "Offhand": "Offhand",
            "OneHanded": "One-Handed",
            "Ranged": "Ranged",
            "Thrown": "Thrown",
            "ThrownOffhand": "Offhand Throw",
            "TwoHanded": "Two-Handed"
          },
          "Type": {
            "Melee": "Melee",
            "Ranged": "Ranged"
          },
          "Warning": {
            "NoQuantity": "Attempting to attack with a weapon with a quantity of zero."
          },
          "Weapon": {
            "Melee": "Melee Weapon",
            "Ranged": "Ranged Weapon"
          }
        },
        "DND5E.Attack": "Attack",
        "DND5E.AttackPl": "Attacks",
        "DND5E.AttackRoll": "Attack Roll",
        "DND5E.Attributes": "Attributes",
        "DND5E.AttrConcentration": {
          "Limit": "Limit"
        },
        "DND5E.Automatic": "Automatic",
        "DND5E.AutomaticValue": "Automatic ({value})",
        "DND5E.Award": {
          "Title": "Distribute Award",
          "Action": "Award",
          "Distribution": {
            "Split": "Split",
            "Each": "Each"
          },
          "Message": "{name} has been awarded {award}.",
          "NoDestinations": "No Destinations Available",
          "NoPrimaryParty": "No primary party set, displaying characters assigned to players instead.",
          "NotGMError": "The /award command is only available to GMs.",
          "UnrecognizedWarning": "Unable to parse {commands}. The /award command should be used with XP & currencies values such as '/award 10gp 50xp'."
        },
        "DND5E.Background": "Background",
        "DND5E.BackgroundAdd": "Add Background",
        "DND5E.BackgroundName": "Background Name",
        "DND5E.Bastion": {
          "Action": {
            "BastionTurn": "Advance Bastion Turn"
          },
          "Attack": {
            "Automatic": "Resolve Automatically",
            "Formula": "Attack Formula",
            "NoActorWarning": "No character selected as target of the attack. Either select a token, or open their character sheet.",
            "Resolve": "Resolve Attack",
            "Result": {
              "Damaged": "{link} damaged in the attack.",
              "Deaths": {
                "one": "<strong>{deaths}</strong> defender was slain in an attack on their bastion!",
                "other": "<strong>{deaths}</strong> defenders were slain in an attack on their bastion!"
              },
              "NoDeaths": "Fended off an attack on their bastion with no casualties!",
              "Undefended": "Undefended bastion attacked!"
            },
            "Title": "Bastion Attack"
          },
          "Button": {
            "Label": "Show Bastion Turn Button",
            "Hint": "Display a button for advancing bastion turns in the main game interface."
          },
          "Configuration": {
            "Name": "Bastions",
            "Label": "Configure Bastions",
            "Hint": "Various configuration options for the Bastion system as presented in the DMG 2024."
          },
          "Confirm": "Advance one bastion turn?",
          "Duration": {
            "Label": "Bastion Turn Duration (days)"
          },
          "Enabled": {
            "Label": "Enable Bastion Functionality",
            "Hint": "When enabled, player characters will have access to a new Bastion tab on their character sheets when reaching level 5, and will be able to build facilities and issue orders to them."
          },
          "Gold": {
            "Claim": "Claim Income",
            "Claimed": "claimed",
            "Unclaimed": "unclaimed"
          },
          "Label": "Bastion",
          "Summary": {
            "Gold": "{value} ({claimed})",
            "NoOrders": "No orders issued to special facilities this turn.",
            "Order": "{link} completed the <strong>{order}</strong> order."
          },
          "Trade": {
            "Cancel": "Cancel Pending Trade",
            "Invalid": "Removing a pending trade will invalidate your trade order.",
            "Pending": "Pending trade"
          }
        },
        "DND5E.Biography": "Biography",
        "DND5E.BiographyPublic": "Public Biography",
        "DND5E.BiopgrahyPublicEdit": "Edit Public Biography",
        "DND5E.Bonds": "Bonds",
        "DND5E.Bonus": "Bonus",
        "DND5E.BonusAction": "Bonus Action",
        "DND5E.BonusActionAbbr": "BA",
        "DND5E.BonusAttack": "Attack Bonus",
        "DND5E.BonusDamage": "Damage Bonus",
        "DND5E.BonusSaveForm": "Update Bonuses",
        "DND5E.BonusTitle": "Configure Actor Bonuses",
        "DND5E.BONUSES": {
          "FIELDS": {
            "bonuses": {
              "label": "Global Bonuses",
              "hint": "Global bonuses as formulas which are added to certain rolls.",
              "abilities": {
                "label": "Global Ability Bonuses",
                "check": {
                  "label": "Global Ability Check Bonus"
                },
                "save": {
                  "label": "Global Saving Throw Bonus"
                },
                "skill": {
                  "label": "Global Skill Check Bonus"
                }
              },
              "msak": {
                "label": "Melee Spell Bonuses",
                "attack": {
                  "label": "Melee Spell Attack Bonus"
                },
                "damage": {
                  "label": "Melee Spell Damage Bonus"
                }
              },
              "mwak": {
                "label": "Melee Weapon Bonuses",
                "attack": {
                  "label": "Melee Weapon Attack Bonus"
                },
                "damage": {
                  "label": "Melee Weapon Damage Bonus"
                }
              },
              "rsak": {
                "label": "Ranged Spell Bonuses",
                "attack": {
                  "label": "Ranged Spell Attack Bonus"
                },
                "damage": {
                  "label": "Ranged Spell Damage Bonus"
                }
              },
              "rwak": {
                "label": "Ranged Weapon Bonuses",
                "attack": {
                  "label": "Ranged Weapon Attack Bonus"
                },
                "damage": {
                  "label": "Ranged Weapon Damage Bonus"
                }
              },
              "spell": {
                "label": "Global Spell Bonuses",
                "dc": {
                  "label": "Global Spell DC Bonus"
                }
              }
            }
          }
        },
        "DND5E.CAST": {
          "Title": "Cast",
          "FIELDS": {
            "spell": {
              "label": "Casting Details",
              "ability": {
                "label": "Casting Ability",
                "hint": "Ability to override the creature's normal spellcasting ability."
              },
              "challenge": {
                "attack": {
                  "label": "Attack Bonus",
                  "hint": "Flat to hit bonus in place of the spell's normal attack bonus."
                },
                "save": {
                  "label": "Save DC",
                  "hint": "Flat DC to use in place of the spell's normal save DC."
                },
                "override": {
                  "label": "Override Values",
                  "hint": "Override the spell's normal attack bonus & DC when casting."
                }
              },
              "level": {
                "label": "Casting Level",
                "hint": "Base level to cast the spell, if different than the spell's level."
              },
              "properties": {
                "label": "Ignored Properties",
                "hint": "Spell components & tags to ignore while casting."
              },
              "spellbook": {
                "label": "Display in Spellbook",
                "hint": "Display spell in the Spells tab of the character sheet."
              },
              "uuid": {
                "label": "Spell to Cast"
              }
            }
          },
          "SECTIONS": {
            "Spell": "Spell",
            "Spellbook": "Additional Spells"
          },
          "Action": {
            "RemoveSpell": "Remove Spell"
          },
          "Enchantment": {
            "Name": "Spell Changes"
          }
        },
        "DND5E.Casting": "Casting",
        "DND5E.Conditions": "Conditions",
        "DND5E.CONTAINER": {
          "Details": "Container Details",
          "FIELDS": {
            "capacity": {
              "label": "Capacity",
              "count": {
                "label": "Item Count"
              },
              "volume": {
                "label": "Volume Capacity",
                "units": {
                  "label": "Volume Units"
                },
                "value": {
                  "label": "Maximum Volume"
                }
              },
              "weight": {
                "label": "Weight Capacity",
                "units": {
                  "label": "Weight Units"
                },
                "value": {
                  "label": "Maximum Weight"
                }
              }
            },
            "properties": {
              "label": "Container Properties"
            }
          }
        },
        "DND5E.Controls": {
          "Hint": "Enable various hints throughout the UI for certain mouse and keyboard controls.",
          "LeftClick": "Left Click",
          "LockHint": "Middle-click to lock",
          "MiddleClick": "Middle Click",
          "Name": "Enable Control Hints",
          "Activity": {
            "FastForwardHint": "<kbd>Shift</kbd> + <left-click> the item to skip this dialog"
          }
        },
        "DND5E.Challenge": "Challenge",
        "DND5E.ChallengeRating": "Challenge Rating",
        "DND5E.Charged": "Charged",
        "DND5E.Charges": "Charges",
        "DND5E.ChatContextDamage": "Apply As Damage",
        "DND5E.ChatContextHealing": "Apply As Healing",
        "DND5E.ChatContextTempHP": "Apply As Temporary HP",
        "DND5E.ChatContextDoubleDamage": "Apply Double As Damage",
        "DND5E.ChatContextHalfDamage": "Apply Half As Damage",
        "DND5E.ChatContextSelectHit": "Select Hit Targets",
        "DND5E.ChatContextSelectMiss": "Select Missed Targets",
        "DND5E.ChatFlavor": "Chat Message Flavor",
        "DND5E.CHATMESSAGE": {
          "Activities": "Activities",
          "Deltas": {
            "Recovery": "Recovery"
          },
          "REQUEST": {
            "Action": {
              "Handle": "Handle Request"
            },
            "Complete": "Request Fulfilled",
            "PartyMembers": "Party Members"
          },
          "TURN": {
            "NoCombatant": "Combatant no longer exists!"
          }
        },
        "DND5E.CHECK": {
          "Title": "Check",
          "FIELDS": {
            "check": {
              "label": "Check Details",
              "ability": {
                "label": "Check Ability",
                "hint": "Ability to use when making the check."
              },
              "associated": {
                "label": "Associated Skills or Tools",
                "hint": "Present ability checks using proficiency and bonuses with these skills or tools."
              },
              "dc": {
                "label": "Difficulty Class",
                "calculation": {
                  "label": "DC Calculation",
                  "hint": "Method or ability used to calculate the difficulty class."
                },
                "formula": {
                  "label": "DC Formula",
                  "hint": "Custom formula or flat value for defining the check DC."
                }
              }
            }
          },
          "ThisTool": "This Tool"
        },
        "DND5E.CheckBonus": "Check Bonus",
        "DND5E.CLASS": {
          "Multiclass": {
            "Title": "Multiclassing"
          },
          "FIELDS": {
            "hd": {
              "label": "Hit Point Die",
              "additional": {
                "label": "Additional Hit Dice",
                "hint": "Formula for hit dice that are available for this class beyond the normal amount."
              },
              "spent": {
                "label": "Spent Hit Dice"
              }
            },
            "levels": {
              "label": "Class Levels"
            },
            "primaryAbility": {
              "all": {
                "label": "Require All",
                "hint": "Require all primary abilities to meet the minimum in order to multi-class."
              },
              "value": {
                "label": "Primary Ability",
                "hint": "Abilities used most by this class. Used to determine multi-classing restrictions."
              }
            },
            "properties": {
              "label": "Class Properties"
            }
          }
        },
        "DND5E.ClassAdd": "Add Class",
        "DND5E.ClassIdentifier": "Class Identifier",
        "DND5E.ClassIdentifierHint": "This class's data will be accessible using <strong>@classes.{identifier}</strong> in roll formulas.",
        "DND5E.ClassLevels": "Class Levels",
        "DND5E.ClassMakeOriginal": "Original Class",
        "DND5E.ClassMakeOriginalHint": "First class taken by character used to determine certain class traits when multiclassing.",
        "DND5E.ClassName": "Class Name",
        "DND5E.ClassOriginal": "Original Class",
        "DND5E.ClassSaves": "Saving Throws",
        "DND5E.Confirm": "Confirm",
        "DND5E.COMBAT": {
          "Group": {
            "ActiveCount": "{current} of {combatants}",
            "Title": "{name} Group"
          }
        },
        "DND5E.COMBATANT": {
          "Counted": {
            "one": "{number} combatant",
            "other": "{number} combatants"
          }
        },
        "DND5E.CompendiumBrowser": {
          "Title": "Compendium Browser",
          "Action": {
            "Open": "Open Compendium Browser"
          },
          "Column": {
            "Icon": "Icon",
            "Name": "Name",
            "Results": "Results",
            "Source": "Source"
          },
          "Filters": {
            "Label": "Filters",
            "Grouped": "{type} ({group})",
            "HasDarkvision": "Has Darkvision",
            "HasSpellcasting": "Has Spellcasting",
            "SearchResults": "Search results"
          },
          "Selection": {
            "Label": "Selected: {summary}",
            "Select": "Select",
            "Summary": {
              "Max": "<span class=\"value\">{value}</span> of up to {max}",
              "Min": "<span class=\"value\">{value}</span> of at least {min}",
              "Range": "<span class=\"value\">{value}</span> of {min} to {max}",
              "Single": "<span class=\"value\">{value}</span> of {max}"
            },
            "Warning": {
              "Document": {
                "one": "document",
                "other": "documents"
              },
              "Max": "Must select at most {max} {document}, {value} selected.",
              "Min": "Must select at least {min} {document}, {value} selected.",
              "Range": "Must select between {min} and {max} documents, {value} selected.",
              "Single": "Must select {max} {document}, {value} selected."
            }
          },
          "Sources": {
            "Name": "Compendium Browser Sources",
            "Label": "Configure Sources",
            "FilterPackages": "Filter Packages",
            "Hint": "Configure which compendium packs have their content available in the compendium browser."
          },
          "Tabs": {
            "Feat.other": "Feats",
            "Item.other": "Items",
            "Monster.other": "Monsters"
          },
          "Types": {
            "Label": "Types"
          },
          "Locked": "Locked"
        },
        "DND5E.ComponentMaterial": "Material",
        "DND5E.ComponentMaterialAbbr": "M",
        "DND5E.ComponentSomatic": "Somatic",
        "DND5E.ComponentSomaticAbbr": "S",
        "DND5E.ComponentVerbal": "Verbal",
        "DND5E.ComponentVerbalAbbr": "V",
        "DND5E.Components": "Components",
        "DND5E.Container": "Container",
        "DND5E.ContainerDeleteMessage": "This container will be permanently deleted and cannot be recovered and the {count} items contained within will be moved out.",
        "DND5E.ContainerDeleteContents": "Also delete all items within the container.",
        "DND5E.ContainerMaxDepth": "Containers cannot be nested more than {depth} levels deep.",
        "DND5E.ContainerRecursiveError": "Containers cannot contain themselves.",
        "DND5E.Contents": "Contents",
        "DND5E.ContextMenuActionEdit": "Edit",
        "DND5E.ContextMenuActionDuplicate": "Duplicate",
        "DND5E.ContextMenuActionDelete": "Delete",
        "DND5E.ContextMenuActionEquip": "Equip",
        "DND5E.ContextMenuActionUnequip": "Unequip",
        "DND5E.ContextMenuActionPrepare": "Prepare",
        "DND5E.ContextMenuActionExpendCharge": "Uncharge",
        "DND5E.ContextMenuActionCharge": "Charge",
        "DND5E.ContextMenuActionUnprepare": "Unprepare",
        "DND5E.ContextMenuActionAttune": "Attune",
        "DND5E.ContextMenuActionUnattune": "Unattune",
        "DND5E.ContextMenuActionEnable": "Enable",
        "DND5E.ContextMenuActionDisable": "Disable",
        "DND5E.ContextMenuActionView": "View",
        "DND5E.Contiguous": "Contiguous",
        "DND5E.ConBlinded": "Blinded",
        "DND5E.ConCharmed": "Charmed",
        "DND5E.ConDeafened": "Deafened",
        "DND5E.ConDiseased": "Diseased",
        "DND5E.CONDITIONS": {
          "RiderConditions": {
            "label": "Separate Status Conditions",
            "hint": "When this Active Effect is applied, these additional status conditions will be applied separately."
          }
        },
        "DND5E.ConExhaustion": "Exhaustion",
        "DND5E.ConFrightened": "Frightened",
        "DND5E.ConGrappled": "Grappled",
        "DND5E.ConImm": "Condition Immunities",
        "DND5E.ConIncapacitated": "Incapacitated",
        "DND5E.ConInvisible": "Invisible",
        "DND5E.ConParalyzed": "Paralyzed",
        "DND5E.ConPetrified": "Petrified",
        "DND5E.ConPoisoned": "Poisoned",
        "DND5E.ConProne": "Prone",
        "DND5E.ConRestrained": "Restrained",
        "DND5E.ConStunned": "Stunned",
        "DND5E.ConUnconscious": "Unconscious",
        "DND5E.Concentration": "Concentration",
        "DND5E.ConcentrationAbbr": "C",
        "DND5E.ConcentrationBreak": "Break Concentration",
        "DND5E.ConcentrationBreakWarning": "Breaking concentration on an effect that is active on other creatures requires an active GM to be present.",
        "DND5E.ConcentrationBonus": "Concentration Bonus",
        "DND5E.ConcentrationDuration": "Concentration, up to {duration}",
        "DND5E.ConcentratingOn": "You are maintaining concentration on the effects of the '{name}' {type}.",
        "DND5E.ConcentratingEndChoice": "You are concentrating on effects from more than one source. Pick which effect to end.",
        "DND5E.ConcentratingMissingItem": "The effect that is concentrated on and to be replaced does not exist.",
        "DND5E.ConcentratingLimited": "You are not able to begin concentrating on an additional effect.",
        "DND5E.ConcentrationLimit": "Concentration Limit",
        "DND5E.ConcentratingEnd": "End Concentration",
        "DND5E.ConcentratingItemless": "Concentration With No Source",
        "DND5E.ConcentratingWarnLimit": "You cannot maintain concentration on more effects!",
        "DND5E.ConcentratingWarnLimitOptional": "You may end concentration on one of your maintained effects to use this item.",
        "DND5E.ConcentratingWarnLimitZero": "You are not able to maintain concentration on any effects!",
        "DND5E.ConcentrationConfigurationHint": "Configure concentration modifiers and bonuses which apply to this creature.",
        "DND5E.ConsumeTitle": "Resource Consumption",
        "DND5E.ConsumeAmount": "Consumption Amount",
        "DND5E.ConsumeHint": {
          "Attribute": "Attribute to consume (e.g. currency.gp)",
          "Item": "UUID of target in compendium"
        },
        "DND5E.ConsumeTarget": "Consumption Target",
        "DND5E.ConsumeType": "Consumption Category",
        "DND5E.ConsumeAmmunition": "Ammunition",
        "DND5E.ConsumeAttribute": "Attribute",
        "DND5E.ConsumeHitDice": "Hit Dice",
        "DND5E.ConsumeHitDiceLargest": "Largest Available",
        "DND5E.ConsumeHitDiceLargestLong": "Largest Hit Dice Available",
        "DND5E.ConsumeHitDiceSmallest": "Smallest Available",
        "DND5E.ConsumeHitDiceSmallestLong": "Smallest Hit Dice Available",
        "DND5E.ConsumeMaterial": "Material",
        "DND5E.ConsumeCharges": "Item Uses",
        "DND5E.ConsumeResource": "Consume Resource?",
        "DND5E.ConsumeRecharge": "Consume Recharge?",
        "DND5E.ConsumeScaling": "Resource Scaling",
        "DND5E.ConsumeScalingLabel": "Use Resources",
        "DND5E.ConsumeScalingTooltip": "If checked, consuming additional resources will increase the level the spell is cast at.",
        "DND5E.CONSUMABLE": {
          "FIELDS": {
            "damage": {
              "label": "Ammunition Damage",
              "replace": {
                "label": "Replace Weapon Damage",
                "hint": "Replace base weapon damage with this damage rather than augmenting it."
              }
            },
            "magicalBonus": {
              "label": "Magical Bonus"
            },
            "properties": {
              "label": "Consumable Properties"
            },
            "uses": {
              "autoDestroy": {
                "label": "Destroy on Empty",
                "hint": "Reduce the item's quantity by 1 whenever all of its limited uses are expended."
              }
            }
          },
          "Category": {
            "Poison": "Poison"
          },
          "Type": {
            "Ammunition": {
              "Label": "Ammunition",
              "Arrow": "Arrow",
              "Bolt": "Bolt",
              "BulletFirearm": "Bullet, Firearm",
              "BulletSling": "Bullet, Sling",
              "EnergyCell": "Energy Cell",
              "Needle": "Needle"
            },
            "Food": {
              "Label": "Food"
            },
            "Poison": {
              "Label": "Poison",
              "Contact": "Contact",
              "Ingested": "Ingested",
              "Inhaled": "Inhaled",
              "Injury": "Injury"
            },
            "Potion": {
              "Label": "Potion"
            },
            "Rod": {
              "Label": "Rod"
            },
            "Scroll": {
              "Label": "Scroll"
            },
            "Trinket": {
              "Label": "Trinket"
            },
            "Wand": {
              "Label": "Wand"
            }
          }
        },
        "DND5E.ConsumableUseWarnStart": "This consumable has",
        "DND5E.ConsumableUseWarnEnd": "of the current unit",
        "DND5E.ConsumableUnitWarn": "units remaining",
        "DND5E.ConsumableLastChargeWarn": "This is the last charge of this unit and consuming it will also reduce the item's quantity by 1",
        "DND5E.ConsumableWithoutCharges": "available units to use",
        "DND5E.CONSUMPTION": {
          "FIELDS": {
            "consumption": {
              "label": "Consumption",
              "scaling": {
                "abbr": "Scaling",
                "label": "Consumption Scaling",
                "allowed": {
                  "label": "Allow Scaling",
                  "hint": "Can an activity not on a spell be activated at higher levels?"
                },
                "max": {
                  "label": "Max Scaling",
                  "hint": "Maximum number of scaling levels for this item, including the base level."
                }
              },
              "spellSlot": {
                "label": "Consume Spell Slot",
                "hint": "Should using this activity consume a slot for this spell?"
              },
              "targets": {
                "label": "Consumption Targets",
                "hint": "Targets of possible consumption when this activity is activated.",
                "FIELDS": {
                  "type": {
                    "label": "Consumption Type",
                    "hint": "Type of consumption target."
                  },
                  "target": {
                    "label": "Consumption Target",
                    "hint": "Specific target to be consumed."
                  },
                  "value": {
                    "label": "Consumption Amount",
                    "hint": "Enter a negative value to restore rather than consume."
                  },
                  "scaling": {
                    "label": "Consumption Scaling",
                    "mode": {
                      "label": "Scaling Mode",
                      "hint": "How consumption should be scaled."
                    },
                    "formula": {
                      "label": "Scaling Formula",
                      "hint": "Custom scaling of consumption amount per level."
                    }
                  }
                }
              }
            }
          },
          "Action": {
            "ConsumeResource": "Consume Resource",
            "Create": "Create Consumption Target",
            "Delete": "Delete Consumption Target",
            "RefundResource": "Refund Resource"
          },
          "Scaling": {
            "Amount": "Amount",
            "Automatic": "Automatic",
            "None": "No Scaling",
            "SlotLevel": "Slot Level"
          },
          "Target": {
            "ThisItem": "This Item"
          },
          "Type": {
            "Action": {
              "Prompt": "Consume {type}?",
              "PromptHint": "Spend {cost} ({available} available)."
            },
            "ActivityUses": {
              "Label": "Activity Uses",
              "PromptDecrease": "Consume Activity Use?",
              "PromptIncrease": "Restore Activity Use?",
              "PromptHintDecrease": "Spend <strong>{cost}</strong> {use} of this activity ({available} {availableUse} available).",
              "PromptHintIncrease": "Recover <strong>{cost}</strong> {use} of this activity.",
              "Warning": "uses on {item}'s activity {activity}"
            },
            "Attribute": {
              "Label": "Attribute",
              "PromptDecrease": "Consume Attribute?",
              "PromptIncrease": "Restore Attribute?",
              "PromptHintDecrease": "Decrease <code>{attribute}</code> by <strong>{cost}</strong> (currently {current}).",
              "PromptHintIncrease": "Increase <code>{attribute}</code> by <strong>{cost}</strong> (currently {current}).",
              "Warning": "{attribute} amount"
            },
            "HitDice": {
              "Label": "Hit Dice",
              "PromptDecrease": "Consume Hit Die?",
              "PromptIncrease": "Restore Hit Die?",
              "PromptHintDecrease": "Spend <strong>{cost}</strong> {denomination} {die} ({available} remaining).",
              "PromptHintIncrease": "Recover <strong>{cost}</strong> {denomination} {die}.",
              "Warning": "{denomination} hit dice"
            },
            "HitDie": {
              "one": "hit die",
              "other": "hit dice"
            },
            "ItemUses": {
              "Label": "Item Uses",
              "PromptDecrease": "Consume Item Use?",
              "PromptIncrease": "Restore Item Use?",
              "PromptHintDecrease": "Spend <strong>{cost}</strong> {use} of {item} ({available} {availableUse} available).",
              "PromptHintIncrease": "Recover <strong>{cost}</strong> {use} of {item}.",
              "Warning": "uses on {name}"
            },
            "Material": {
              "Label": "Material",
              "PromptDecrease": "Consume Material?",
              "PromptIncrease": "Restore Material?",
              "PromptHintDecrease": "Reduce quantity of {item} by <strong>{cost}</strong> ({quantity} remaining).",
              "PromptHintIncrease": "Increase quantity of {item} by <strong>{cost}</strong>.",
              "Warning": "of {name}"
            },
            "SpellSlot": {
              "one": "{level} slot",
              "other": "{level} slots"
            },
            "SpellSlots": {
              "Label": "Spell Slots",
              "PromptDecrease": "Consume Spell Slot?",
              "PromptIncrease": "Restore Spell Slot?",
              "PromptHintDecrease": "Spend <strong>{cost}</strong> {slot} ({available} remaining).",
              "PromptHintIncrease": "Recover <strong>{cost}</strong> {slot}.",
              "Warning": "{level} slots"
            },
            "Use": {
              "one": "use",
              "other": "uses"
            }
          },
          "Warning": {
            "MissingAttribute": "Attribute {attribute} configured to be consumed by {activity} activity on {item} could not be found.",
            "MissingHitDice": "Actor does not have a class with a {denomination} hit die.",
            "MissingItem": "Item configured to be consumed by {activity} activity on {item} could not be found.",
            "MissingSpellSlot": "No {level} slots available.",
            "None": "No {type} available to spend, {cost} required.",
            "NotEnough": "Not enough {type} available to spend, {cost} required and only {available} available.",
            "WillDestroy": "Consuming {item} will spend its final use and it will be destroyed."
          }
        },
        "DND5E.Consumed": "Consumed",
        "DND5E.Copy": "Copy Text",
        "DND5E.Copied": "Copied {value}",
        "DND5E.Cover": "Cover",
        "DND5E.CoverHalf": "Half",
        "DND5E.CoverThreeQuarters": "Three Quarters",
        "DND5E.CoverTotal": "Total",
        "DND5E.Cost": "Cost",
        "DND5E.CostGP": "Cost (GP)",
        "DND5E.CreatureAberration": "Aberration",
        "DND5E.CreatureAberrationPl": "Aberrations",
        "DND5E.CreatureBeast": "Beast",
        "DND5E.CreatureBeastPl": "Beasts",
        "DND5E.CreatureCelestial": "Celestial",
        "DND5E.CreatureCelestialPl": "Celestials",
        "DND5E.CreatureConstruct": "Construct",
        "DND5E.CreatureConstructPl": "Constructs",
        "DND5E.CreatureDragon": "Dragon",
        "DND5E.CreatureDragonPl": "Dragons",
        "DND5E.CreatureElemental": "Elemental",
        "DND5E.CreatureElementalPl": "Elementals",
        "DND5E.CreatureFey": "Fey",
        "DND5E.CreatureFeyPl": "Fey",
        "DND5E.CreatureFiend": "Fiend",
        "DND5E.CreatureFiendPl": "Fiends",
        "DND5E.CreatureGiant": "Giant",
        "DND5E.CreatureGiantPl": "Giants",
        "DND5E.CreatureHumanoid": "Humanoid",
        "DND5E.CreatureHumanoidPl": "Humanoids",
        "DND5E.CreatureMonstrosity": "Monstrosity",
        "DND5E.CreatureMonstrosityPl": "Monstrosities",
        "DND5E.CreatureOoze": "Ooze",
        "DND5E.CreatureOozePl": "Oozes",
        "DND5E.CreaturePlant": "Plant",
        "DND5E.CreaturePlantPl": "Plants",
        "DND5E.CreatureType": "Creature Type",
        "DND5E.CreatureTypeTitle": "Configure Creature Type",
        "DND5E.CreatureSwarm": "Swarm",
        "DND5E.CreatureSwarmSize": "Swarm Size",
        "DND5E.CreatureSwarmPhrase": "Swarm of {size} {type}",
        "DND5E.CreatureTag": "{size} {type}, {alignment}",
        "DND5E.CreatureTypeConfig": "Configure Creature Type",
        "DND5E.CreatureTypeSelectorCustom": "Custom Type",
        "DND5E.CreatureTypeSelectorSubtype": "Subtype",
        "DND5E.CreatureUndead": "Undead",
        "DND5E.CreatureUndeadPl": "Undead",
        "DND5E.Crewed": "Crewed",
        "DND5E.Critical": "Critical",
        "DND5E.CriticalHit": "Critical Hit",
        "DND5E.PowerfulCritical": "Powerful Critical",
        "DND5E.CRLabel": "CR {cr}",
        "DND5E.Currency": "Currency",
        "DND5E.CurrencyAbbrCP": "cp",
        "DND5E.CurrencyAbbrEP": "ep",
        "DND5E.CurrencyAbbrGP": "gp",
        "DND5E.CurrencyAbbrPP": "pp",
        "DND5E.CurrencyAbbrSP": "sp",
        "DND5E.CurrencyCP": "Copper",
        "DND5E.CurrencyEP": "Electrum",
        "DND5E.CurrencyGP": "Gold",
        "DND5E.CurrencyPP": "Platinum",
        "DND5E.CurrencySP": "Silver",
        "DND5E.CurrencyManager": {
          "Title": "Manage Currency",
          "Convert": {
            "Label": "Convert",
            "Action": "Convert All Currency",
            "Hint": "Convert all carried currency to the highest possible denomination to reduce the amount of coinage carried by the character. Be wary, this action cannot be undone."
          },
          "Error": {
            "InsufficientFunds": "Failed to deduct {amount}{denomination} from {name}. Insufficient funds."
          },
          "Transfer": {
            "Label": "Transfer",
            "Action": "Transfer Selected",
            "All": "All",
            "Half": "Half"
          }
        },
        "DND5E.Current": "Current",
        "DND5E.DAMAGE": {
          "Title": "Damage",
          "FIELDS": {
            "damage": {
              "label": "Damage",
              "critical": {
                "allow": {
                  "label": "Allow Critical",
                  "hint": "Should the creature be able to roll critical damage?"
                },
                "bonus": {
                  "label": "Extra Critical Damage",
                  "hint": "Extra damage applied to the first damage part when a critical is rolled."
                }
              },
              "parts": {
                "label": "Damage Parts",
                "hint": "Individual damage parts to include with the roll.",
                "FIELDS": {
                  "bonus": {
                    "label": "Damage Bonus",
                    "hint": "Bonus added to the damage roll."
                  },
                  "custom": {
                    "label": "Custom Damage Formula",
                    "enabled": {
                      "label": "Enable Custom Formula",
                      "hint": "Use a custom formula rather than the default dice."
                    },
                    "formula": {
                      "label": "Damage Formula",
                      "hint": "Custom damage formula."
                    }
                  },
                  "denomination": {
                    "label": "Die Denomination",
                    "hint": "Denomination of the dice to roll."
                  },
                  "number": {
                    "label": "Die Number",
                    "hint": "Number of dice to roll."
                  },
                  "scaling": {
                    "label": "Damage Scaling",
                    "abbr": "Scaling",
                    "mode": {
                      "label": "Scaling Mode",
                      "abbr": "Mode",
                      "hint": "Method by which the scaling increase is calculated."
                    },
                    "number": {
                      "label": "Dice Scaling",
                      "abbr": "Dice",
                      "hint": "Number of dice to increase for each scaling step. Will be applied to the first die found in the damage formula if more than one is present."
                    },
                    "formula": {
                      "label": "Scaling Formula",
                      "hint": "Arbitrary scaling formula that will be multiplied for each scaling step and added to the original formula."
                    }
                  },
                  "types": {
                    "label": "Damage Types",
                    "hint": "Type of damage inflicted or multiple for the user to select from."
                  }
                }
              }
            }
          },
          "Part": {
            "Action": {
              "Create": "Create Damage Part",
              "Delete": "Delete Damage Part"
            }
          },
          "Scaling": {
            "Half": "Every Other Level",
            "HalfCantrip": "Half Cantrip Scaling",
            "None": "No Scaling",
            "Whole": "Every Level",
            "WholeCantrip": "Cantrip Scaling"
          }
        },
        "DND5E.DamImm": "Damage Immunities",
        "DND5E.DamMod": "Damage Modification",
        "DND5E.DamRes": "Damage Resistances",
        "DND5E.DamVuln": "Damage Vulnerabilities",
        "DND5E.Damage": "Damage",
        "DND5E.DamageAcid": "Acid",
        "DND5E.DamageAll": "All Damage",
        "DND5E.DamageApplication": {
          "Change": {
            "Modification": "{type} Modification",
            "Immunity": "{type} Immunity",
            "Resistance": "{type} Resistance",
            "Vulnerability": "{type} Vulnerability"
          },
          "Downgrading": "Downgrading {source} to Resistance",
          "Ignoring": "Ignoring {source}"
        },
        "DND5E.DamageBludgeoning": "Bludgeoning",
        "DND5E.DamageCold": "Cold",
        "DND5E.DamageFire": "Fire",
        "DND5E.DamageForce": "Force",
        "DND5E.DamageLightning": "Lightning",
        "DND5E.DamageModification": {
          "Label": "Damage Modification",
          "Hint": "Formulas for amounts that will be added to typed damage applied to this actor. Negative values will reduce the damage taken.",
          "BypassHint": "These weapon properties will bypass damage modification for physical damage."
        },
        "DND5E.DamageNecrotic": "Necrotic",
        "DND5E.DamagePiercing": "Piercing",
        "DND5E.DamagePhysical": "Non-Magical Physical",
        "DND5E.DamagePhysicalBypass": "Physical Bypasses",
        "DND5E.DamagePhysicalBypassHint": "These weapon properties will bypass damage resistance for physical damage.",
        "DND5E.DamagePhysicalBypasses": "{damageTypes} from attacks that are not {bypassTypes}",
        "DND5E.DamagePhysicalBypassesShort": "Bypassed by {type} Sources",
        "DND5E.DamagePoison": "Poison",
        "DND5E.DamagePsychic": "Psychic",
        "DND5E.DamageRadiant": "Radiant",
        "DND5E.DamageRoll": "Damage Roll",
        "DND5E.DamageSlashing": "Slashing",
        "DND5E.DamageThreshold": "Damage Threshold",
        "DND5E.DamageThunder": "Thunder",
        "DND5E.DamageType": "Damage Type",
        "DND5E.DamageTypes": "Damage Types",
        "DND5E.Dawn": "Dawn",
        "DND5E.Day": "Day",
        "DND5E.DeathSave": "Death Saves",
        "DND5E.DeathSaveBonus": "Death Save Bonus",
        "DND5E.DeathSaveConfigure": "Configure Death Saves",
        "DND5E.DeathSaveCriticalSuccess": "{name} critically succeeded on a death saving throw and has regained 1 Hit Point!",
        "DND5E.DeathSaveHide": "Hide Death Saves",
        "DND5E.DeathSaveShow": "Show Death Saves",
        "DND5E.DeathSaveSuccess": "{name} has survived with 3 death save successes and is now stable!",
        "DND5E.DeathSaveSuccessLabel": "Death Save Success",
        "DND5E.DeathSaveSuccessLabelN.one": "1st death save success",
        "DND5E.DeathSaveSuccessLabelN.two": "2nd death save success",
        "DND5E.DeathSaveSuccessLabelN.few": "3rd death save success",
        "DND5E.DeathSaveSuccesses": "Successes",
        "DND5E.DeathSaveFailure": "{name} has died with 3 death save failures!",
        "DND5E.DeathSaveFailureLabel": "Death Save Failure",
        "DND5E.DeathSaveFailureLabelN.one": "1st death save failure",
        "DND5E.DeathSaveFailureLabelN.two": "2nd death save failure",
        "DND5E.DeathSaveFailureLabelN.few": "3rd death save failure",
        "DND5E.DeathSaveFailures": "Failures",
        "DND5E.DeathSaveRoll": "Roll a Death Saving Throw",
        "DND5E.DeathSavingThrow": "Death Saving Throw",
        "DND5E.DeathSaveUnnecessary": "You do not need to roll death saves because you have a positive number of hit points or have already reached 3 successes or failures.",
        "DND5E.Default": "Default",
        "DND5E.DefaultSpecific": "Default ({default})",
        "DND5E.DefaultAbilityCheck": "Default Ability Check",
        "DND5E.Denomination": "Denomination",
        "DND5E.Description": "Description",
        "DND5E.DescriptionChat": "Chat Description",
        "DND5E.DescriptionEdit": "Edit {description}",
        "DND5E.DescriptionSummary": "Summary Description",
        "DND5E.DescriptionUnidentified": "Unidentified Description",
        "DND5E.Details": "Details",
        "DND5E.DetailsEdit": "Edit Details",
        "DND5E.Die": "Die",
        "DND5E.Dimensions": "Dimensions",
        "DND5E.Disadvantage": "Disadvantage",
        "DND5E.Discord": "Discord",
        "DND5E.Disclaimer": "Disclaimer",
        "DND5E.DisplayCard": "Display in Chat",
        "DND5E.DistAny": "Any",
        "DND5E.DistFt": "Feet",
        "DND5E.DistFtAbbr": "ft",
        "DND5E.DistKm": "Kilometers",
        "DND5E.DistKmAbbr": "km",
        "DND5E.DistM": "Meters",
        "DND5E.DistMAbbr": "m",
        "DND5E.DistMi": "Miles",
        "DND5E.DistMiAbbr": "mi",
        "DND5E.DistSelf": "Self",
        "DND5E.DistTouch": "Touch",
        "DND5E.DocumentUseWarn": "You lack permission to use an item on this document.",
        "DND5E.DocumentViewWarn": "You lack permission to view this document.",
        "DND5E.DURATION": {
          "FIELDS": {
            "duration": {
              "label": "Duration",
              "concentration": {
                "label": "Concentration",
                "hint": "Creature must maintain concentration while active."
              },
              "override": {
                "label": "Override Duration",
                "hint": "Use these duration values instead of the item's when using this activity."
              },
              "special": {
                "label": "Special Duration",
                "hint": "Description of any special duration details."
              },
              "units": {
                "label": "Duration Units",
                "hint": "Units used to measure duration."
              },
              "value": {
                "label": "Duration Value",
                "hint": "Value of the duration in the specified units, if applicable."
              }
            }
          }
        },
        "DND5E.Duration": "Duration",
        "DND5E.DurationPermanent": "Permanent",
        "DND5E.DurationTime": "Time",
        "DND5E.DurationType": "Duration Type",
        "DND5E.DurationUnits": "Duration Units",
        "DND5E.DurationValue": "Duration Value",
        "DND5E.Dusk": "Dusk",
        "DND5E.Effect": "Effect",
        "DND5E.Effects": "Effects",
        "DND5E.EFFECT": {
          "Action": {
            "Create": "Create Effect",
            "Delete": "Delete Effect",
            "Dissociate": "Dissociate Effect"
          },
          "Empty": "No associated effects. Use the <i class=\"fas fa-plus\"></i> button above to create one, or select an existing effect from the drop-down.",
          "Label": "Available Effects"
        },
        "DND5E.EffectsApplyTokens": "Apply to selected tokens",
        "DND5E.EffectApplyWarningConcentration": "Applying an effect that is being concentrated on by another character requires GM permissions.",
        "DND5E.EffectApplyWarningOwnership": "Effects cannot be applied to tokens you are not the owner of.",
        "DND5E.EffectsSearch": "Search effects",
        "DND5E.ENCHANT": {
          "Title": "Enchant",
          "FIELDS": {
            "effects.element": {
              "level": {
                "label": "Level Limit",
                "hint": "Range of levels required to use this enchantment.",
                "max": {
                  "label": "Maximum Level"
                },
                "min": {
                  "label": "Minimum Level"
                }
              },
              "riders": {
                "label": "Attached",
                "activity": {
                  "label": "Additional Activities",
                  "hint": "These additional activities will be added to the enchanted item when this enchantment is applied, and removed when the enchantment is removed."
                },
                "effect": {
                  "label": "Additional Effects",
                  "hint": "These additional effects will be added to the enchanted item when this enchantment is applied, and removed when the enchantment is removed."
                },
                "item": {
                  "label": "Additional Items",
                  "hint": "These additional items will be added to the creature when one of its items is enchanted, and will be removed if the enchantment is ever removed."
                }
              }
            },
            "enchant": {
              "label": "Enchantment Configuration",
              "identifier": {
                "label": "Class Identifier",
                "hint": "Identifier used to determine whether the character level or a specific class level should be used for enchantment level limits."
              },
              "self": {
                "label": "Automatically Enchant Self",
                "hint": "Automatically apply selected enchantment to the item containing this activity when it is used, and remove it when the activity is used again."
              }
            },
            "restrictions": {
              "label": "Restrictions",
              "hint": "Restrictions on the type of item to which this enchantment can be applied.",
              "allowMagical": {
                "label": "Allow Magical",
                "hint": "Allow physical items that are already magical to be enchanted."
              },
              "categories": {
                "label": "Valid Categories",
                "hint": "Specific item categories to which this enchantment can be applied."
              },
              "properties": {
                "label": "Valid Properties",
                "hint": "Specific item properties which must be present for this enchantment to be applied."
              },
              "type": {
                "label": "Item Type",
                "hint": "Type of item to which this enchantment can be applied.",
                "Any": "Any Enchantable Type"
              }
            }
          },
          "SECTIONS": {
            "Enchanting": "Enchanting",
            "Enchantments": "Enchantments",
            "Restrictions": "Restrictions"
          },
          "DropArea": "Place item here to enchant it\u2026",
          "Enchanted": "{current} &sol; {max} enchanted",
          "Enchantment": {
            "Action": {
              "Create": "Create Enchantment",
              "Delete": "Delete Enchantment"
            },
            "Active": "{name} (active)",
            "Empty": "No associated enchantments. Use the <i class=\"fas fa-plus\"></i> button above to create one, or select an existing enchantment from the drop-down."
          },
          "Warning": {
            "ConcentrationEnded": "Cannot apply this enchantment because concentration has ended.",
            "MissingProperty": "Item must have one of these properties to be enchanted: {validProperties}.",
            "NoMagicalItems": "Items that are already magical cannot be enchanted.",
            "NoSubtype": "Only {allowedType} items can be enchanted by this enchantment, but this item doesn't have a sub-type.",
            "WrongType": "{incorrectType} items cannot be enchanted by this enchantment, only {allowedType} items are allowed."
          }
        },
        "DND5E.ENCHANTMENT": {
          "Action": {
            "Apply": "Apply Enchantment",
            "Disable": "Disable Enchantment",
            "Edit": "Edit Enchantment",
            "Enable": "Enable Enchantment",
            "Remove": "Remove Enchantment"
          },
          "Category": {
            "Active": "Active Enchantments",
            "General": "Enchantments",
            "Inactive": "Inactive Enchantments"
          },
          "FIELDS": {
            "enchantment": {
              "label": "Enchantment Configuration",
              "items": {
                "max": {
                  "label": "Item Limit",
                  "hint": "Formula for the maximum number of enchantments of this type that can be active at a time."
                },
                "period": {
                  "label": "Replacement Period",
                  "hint": "How frequently the enchantments of this type can be re-bound to different items."
                }
              }
            }
          },
          "Items": {
            "Entry": "{item} on <em>{actor}</em>"
          },
          "Label": "Enchantment",
          "Period": {
            "AtWill": "At Will",
            "LongRest": "Long Rest",
            "Never": "Never",
            "ShortRest": "Short Rest"
          },
          "Warning": {
            "NotOnActor": "Enchantments can only be added to items, not directly to actors.",
            "Override": "This value is being modified by an Enchantment and cannot be edited. Disable the enchantment in the effects tab to edit it."
          }
        },
        "DND5E.ENCOUNTER": {
          "Action": {
            "Award": "Award XP & Currency"
          },
          "Difficulty": {
            "high": "High Difficulty",
            "low": "Low Difficulty",
            "moderate": "Moderate Difficulty"
          },
          "DropCreature": "Drop Creature",
          "Tab": {
            "Description": "Description",
            "Loot": "Loot",
            "Members": "Members"
          }
        },
        "DND5E.Environment": "Environment",
        "DND5E.EQUIPMENT": {
          "Type": {
            "Clothing": {
              "Label": "Clothing"
            },
            "Ring": {
              "Label": "Ring"
            },
            "Rod": {
              "Label": "Rod"
            },
            "Trinket": {
              "Label": "Trinket"
            },
            "Vehicle": {
              "Label": "Vehicle Equipment"
            },
            "Wand": {
              "Label": "Wand"
            },
            "Wondrous": {
              "Label": "Wondrous Item"
            }
          }
        },
        "DND5E.EquipmentBonus": "Magical Bonus",
        "DND5E.EquipmentHeavy": "Heavy Armor",
        "DND5E.EquipmentLight": "Light Armor",
        "DND5E.EquipmentMedium": "Medium Armor",
        "DND5E.EquipmentNatural": "Natural Armor",
        "DND5E.EquipmentShield": "Shield",
        "DND5E.EquipmentShieldProficiency": "Shields",
        "DND5E.Equipped": "Equipped",
        "DND5E.Exhaustion": "Exhaustion",
        "DND5E.ExhaustionLevel": "Exhaustion Level {n}",
        "DND5E.ExperiencePoints": {
          "Abbreviation": "XP",
          "Boons": {
            "one": "{number} Boon",
            "other": "{number} Boons"
          },
          "Current": "Current XP",
          "Format": "{value} XP",
          "Label": "Experience Points",
          "Pool": "XP Pool",
          "Progress": "Progress to next Level",
          "StatBlock": {
            "Standard": "XP {value}",
            "Lair": "XP {value}, or {lair} in lair"
          },
          "Value": "XP Value"
        },
        "DND5E.Expertise": "Expertise",
        "DND5E.FACILITY": {
          "Action": {
            "DeleteDefender": "Delete Defender",
            "DeleteOccupant": "Delete Occupant",
            "RemoveCraft": "Remove Craft"
          },
          "AvailableFacility": {
            "basic": {
              "build": "Build Facility",
              "free": "Free Facility"
            },
            "special": {
              "free": "Add Facility"
            }
          },
          "Build": {
            "Unbuilt": "Unbuilt"
          },
          "Costs": {
            "Automatic": "Deduct Automatically",
            "Days": "{days} days",
            "Label": "Costs",
            "Manual": "Mark as Paid",
            "Paid": "paid",
            "Unpaid": "unpaid"
          },
          "Craft": {
            "BaseItem": {
              "Label": "Purchase Base Item",
              "Hint": "If checked, the base item will be purchased at full price instead of crafted."
            },
            "Hint": "The items that this facility is currently in the process of crafting or harvesting, if any."
          },
          "Description": "Description",
          "FIELDS": {
            "building": {
              "built": {
                "label": "Built",
                "hint": "Basic facilities must be built first before they can be used."
              }
            },
            "defenders": {
              "max": {
                "label": "Defenders"
              }
            },
            "disabled": {
              "hint": "Disabled facilities cannot be issued orders and are repaired at the beginning of the next turn.",
              "label": "Disabled"
            },
            "enlargeable": {
              "hint": "Certain special facilities may have their size categories increased for a cost.",
              "label": "Can Be Enlarged"
            },
            "free": {
              "hint": "Free facilities do not count towards your special facilities cap.",
              "label": "Free Facility"
            },
            "hirelings": {
              "max": {
                "label": "Hirelings"
              }
            },
            "level": {
              "label": "Level Requirement"
            },
            "order": {
              "label": "Order"
            },
            "progress": {
              "max": {
                "label": "Total"
              },
              "order": {
                "label": "Executing"
              },
              "value": {
                "label": "Current"
              }
            },
            "size": {
              "label": "Size"
            },
            "trade": {
              "creatures": {
                "max": {
                  "label": "Creature Capacity"
                }
              },
              "profit": {
                "label": "Profit Factor"
              },
              "stock": {
                "stocked": {
                  "hint": "Appropriate for facilities that do not store a variable value of goods, but are instead considered either stocked or empty.",
                  "label": "Stocked"
                },
                "value": {
                  "label": "Value"
                },
                "max": {
                  "label": "Max"
                }
              }
            },
            "type": {
              "subtype": {
                "label": "Type"
              },
              "value": {
                "label": "Category"
              }
            }
          },
          "Goods": "Goods",
          "NoDefenders": "Bastion is undefended.",
          "Occupants": "Occupants",
          "Order": {
            "Execute": "Execute Order",
            "Issue": "Issue Order: {order}"
          },
          "Orders": {
            "Label": "Orders",
            "build": {
              "inf": "Build",
              "present": "Building"
            },
            "change": {
              "inf": "Change",
              "present": "Changing"
            },
            "craft": {
              "inf": "Craft",
              "present": "Crafting"
            },
            "empower": {
              "inf": "Empower",
              "present": "Empowering"
            },
            "enlarge": {
              "inf": "Enlarge",
              "present": "Enlarging"
            },
            "harvest": {
              "inf": "Harvest",
              "present": "Harvesting"
            },
            "maintain": {
              "inf": "Maintain",
              "present": "Maintaining"
            },
            "recruit": {
              "inf": "Recruit",
              "present": "Recruiting"
            },
            "repair": {
              "inf": "Repair",
              "present": "Repairing"
            },
            "research": {
              "inf": "Research",
              "present": "Researching"
            },
            "trade": {
              "inf": "Trade",
              "present": "Trading"
            }
          },
          "Progress": "Progress",
          "Properties": "Properties",
          "Sizes": {
            "cramped": "Cramped",
            "roomy": "Roomy",
            "vast": "Vast"
          },
          "Squares": "{squares} squares",
          "Trade": {
            "Buy": {
              "Supplement": "Buy"
            },
            "Creatures": {
              "Buy": "Drop animals that you wish to purchase into the slots above, and update the cost appropriately below."
            },
            "Price": {
              "Label": "Base Price",
              "Hint": "Select which stock to sell, and input the base price above."
            },
            "Sell": {
              "Label": "Sell Stock",
              "Supplement": "Sell"
            },
            "Stock": {
              "Buy": "Buying",
              "Sell": "Selling"
            },
            "Stocked": {
              "Label": "Fully Stock",
              "Hint": "Input the required cost to fully stock this facility below."
            }
          },
          "Types": {
            "Basic": {
              "Label": {
                "one": "Basic Facility",
                "other": "Basic Facilities"
              },
              "Bedroom": "Bedroom",
              "DiningRoom": "Dining Room",
              "Parlor": "Parlor",
              "Courtyard": "Courtyard",
              "Kitchen": "Kitchen",
              "Storage": "Storage"
            },
            "Special": {
              "Label": {
                "one": "Special Facility",
                "other": "Special Facilities"
              },
              "ArcaneStudy": "Arcane Study",
              "Armory": "Armory",
              "Barrack": "Barrack",
              "Garden": "Garden",
              "Library": "Library",
              "Sanctuary": "Sanctuary",
              "Smithy": "Smithy",
              "Storehouse": "Storehouse",
              "Workshop": "Workshop",
              "GamingHall": "Gaming Hall",
              "Greenhouse": "Greenhouse",
              "Laboratory": "Laboratory",
              "Sacristy": "Sacristy",
              "Scriptorium": "Scriptorium",
              "Stable": "Stable",
              "TeleportationCircle": "Teleportation Circle",
              "Theater": "Theater",
              "TrainingArea": "Training Area",
              "TrophyRoom": "Trophy Room",
              "Archive": "Archive",
              "MeditationChamber": "Meditation Chamber",
              "Menagerie": "Menagerie",
              "Observatory": "Observatory",
              "Pub": "Pub",
              "Reliquary": "Reliquary",
              "Demiplane": "Demiplane",
              "Guildhall": "Guildhall",
              "Sanctum": "Sanctum",
              "WarRoom": "War Room"
            }
          },
          "Use": {
            "Description": "Issued the <strong>{order}</strong> order to their {link} {facilityType}."
          }
        },
        "DND5E.Favorite": "Favorite",
        "DND5E.FavoriteDrop": "Drop Favorite",
        "DND5E.FavoriteRemove": "Remove Favorite",
        "DND5E.Favorites": "Favorites",
        "DND5E.FeatureActionRecharge": "Action Recharge",
        "DND5E.FEATURE": {
          "FIELDS": {
            "cover": {
              "label": "Cover",
              "hint": "Cover provided to crew by this vehicle feature."
            },
            "properties": {
              "label": "Feature Properties"
            },
            "requirements": {
              "label": "Requirements"
            },
            "type": {
              "label": "Feature Type"
            }
          }
        },
        "DND5E.Feature": {
          "Background": "Background Feature",
          "Class": {
            "Label": "Class Feature",
            "ArcaneShot": "Arcane Shot",
            "ArtificerInfusion": "Artificer Infusion",
            "ChannelDivinity": "Channel Divinity",
            "DefensiveTactic": "Defensive Tactic",
            "EldritchInvocation": "Eldritch Invocation",
            "ElementalDiscipline": "Elemental Discipline",
            "FightingStyle": "Fighting Style",
            "HuntersPrey": "Hunter's Prey",
            "Ki": "Ki Ability",
            "Maneuver": "Maneuver",
            "Metamagic": "Metamagic Option",
            "Multiattack": "Multiattack",
            "PactBoon": "Pact Boon",
            "PsionicPower": "Psionic Power",
            "Rune": "Rune",
            "SuperiorHuntersDefense": "Superior Hunter's Defense"
          },
          "Feat": {
            "Label": "Feat",
            "EpicBoon": "Epic Boon Feat",
            "FightingStyle": "Fighting Style Feat",
            "General": "General Feat",
            "Origin": "Origin Feat"
          },
          "Monster": "Monster Feature",
          "Species": "Species Feature",
          "SpeciesLegacy": "Race Feature",
          "SupernaturalGift": {
            "Label": "Supernatural Gift",
            "Blessing": "Blessing",
            "Charm": "Charm",
            "EpicBoon": "Epic Boon"
          },
          "Vehicle": {
            "Label": "Vehicle Feature"
          }
        },
        "DND5E.Focus": {
          "Label": "Spellcasting Focus",
          "Arcane": "Arcane Focus",
          "Druidic": "Druidic Focus",
          "Holy": "Holy Focus"
        },
        "DND5E.Loot.Art": "Art Object",
        "DND5E.Loot.Gear": "Adventuring Gear",
        "DND5E.Loot.Gem": "Gemstone",
        "DND5E.Loot.Junk": "Junk",
        "DND5E.Loot.Material": "Material",
        "DND5E.Loot.Resource": "Resource",
        "DND5E.Loot.Treasure": "Treasure",
        "DND5E.Flaws": "Flaws",
        "DND5E.FormulaCannotContainDiceError": "{name} formula cannot contain dice expressions.",
        "DND5E.FORWARD": {
          "Title": "Forward",
          "FIELDS": {
            "activity": {
              "label": "Triggered Activity"
            }
          },
          "Warning": {
            "NoActivity": "Linked activity must be configured before Forward activity can be used."
          }
        },
        "DND5E.EffectCreate": "Create Effect",
        "DND5E.EffectToggle": "Toggle Effect",
        "DND5E.EffectEdit": "Edit Effect",
        "DND5E.EffectEnable": "Enable Effect",
        "DND5E.EffectDelete": "Delete Effect",
        "DND5E.EffectDisable": "Disable Effect",
        "DND5E.EffectTemporary": "Temporary Effects",
        "DND5E.EffectPassive": "Passive Effects",
        "DND5E.EffectInactive": "Inactive Effects",
        "DND5E.EffectNew": "New Effect",
        "DND5E.EffectType": {
          "Inactive": "Inactive",
          "Passive": "Passive",
          "Temporary": "Temporary",
          "Unavailable": "Unavailable"
        },
        "DND5E.EffectUnavailable": "Unavailable Effects",
        "DND5E.EffectUnavailableInfo": "Source item must be equipped or attuned to activate these",
        "DND5E.Encumbrance": "Encumbrance",
        "DND5E.Eyes": "Eyes",
        "DND5E.Faith": "Faith",
        "DND5E.FeatureActive": "Active Abilities",
        "DND5E.FeatureAdd": "Create Feature",
        "DND5E.FeatureAttack": "Feature Attack",
        "DND5E.FeaturePassive": "Passive Abilities",
        "DND5E.FeatureRechargeOn": "Recharge On",
        "DND5E.FeatureRechargeResult": "1d6 Result",
        "DND5E.FeatureSearch": "Search features",
        "DND5E.FeatureUsage": "Feature Usage",
        "DND5E.Features": "Features",
        "DND5E.FeaturesBackground": "Background Features",
        "DND5E.FeaturesClass": "{class} Features",
        "DND5E.FeaturesOther": "Other Features",
        "DND5E.Feats": "Feats",
        "DND5E.FeetAbbr": "ft.",
        "DND5E.Filter": "Filter",
        "DND5E.FilterClear": "Clear Filters",
        "DND5E.FilterGroupCategory": "Group by Category",
        "DND5E.FilterGroupOrigin": "Group by Origin",
        "DND5E.FilterGroupAction": "Group by Action",
        "DND5E.FilterNoSpells": "No spells found for this set of filters.",
        "DND5E.NoSpellLevels": "This character has no spellcaster levels, but you may add spells manually.",
        "DND5E.FLAGS": {
          "EnhancedDualWielding": {
            "Name": "Enhanced Dual Wielding",
            "Hint": "Allow bonus action extra attacks using any melee weapon without the Two-Handed property."
          }
        },
        "DND5E.FlagsInstructions": "Configure character features and traits which fine-tune behaviors of the D&D Fifth Edition system.",
        "DND5E.FlagsSave": "Update Special Traits",
        "DND5E.FlagsTitle": "Configure Special Traits",
        "DND5E.FlagsDiamondSoul": "Diamond Soul",
        "DND5E.FlagsDiamondSoulHint": "Gain proficiency to all saving throws.",
        "DND5E.FlagsPowerfulBuild": "Powerful Build",
        "DND5E.FlagsPowerfulBuildHint": "Provides increased carrying capacity.",
        "DND5E.FlagsElvenAccuracy": "Elven Accuracy",
        "DND5E.FlagsElvenAccuracyHint": "Roll an extra d20 with advantage to Dex, Int, Wis, or Cha.",
        "DND5E.FlagsHalflingLucky": "Halfling Lucky",
        "DND5E.FlagsHalflingLuckyHint": "Reroll ones when rolling d20 checks.",
        "DND5E.FlagsHalflingNimbleness": "Halfling Nimbleness",
        "DND5E.FlagsHalflingNimblenessHint": "Movement through larger creatures is not blocked.",
        "DND5E.FlagsAlert": "Alert Feat",
        "DND5E.FlagsAlertHint": "Proficient in Initiative rolls.",
        "DND5E.FlagsAlertHintLegacy": "Provides +5 to Initiative.",
        "DND5E.FlagsJOAT": "Jack of All Trades",
        "DND5E.FlagsJOATHint": "Half-Proficiency to Ability Checks in which you are not already Proficient.",
        "DND5E.FlagsObservant": "Observant Feat",
        "DND5E.FlagsObservantHint": "Provides a +5 to passive Perception and Investigation.",
        "DND5E.FlagsTavernBrawler": "Tavern Brawler Feat",
        "DND5E.FlagsTavernBrawlerHint": "Proficient with improvised weapons.",
        "DND5E.FlagsReliableTalent": "Reliable Talent",
        "DND5E.FlagsReliableTalentHint": "Rogues Reliable Talent Feature.",
        "DND5E.FlagsRemarkableAthlete": "Remarkable Athlete",
        "DND5E.FlagsRemarkableAthleteHint": "Half-Proficiency (rounded-up) to physical Ability Checks and Initiative.",
        "DND5E.FlagsWeaponCritThreshold": "Weapon Critical Hit Threshold",
        "DND5E.FlagsWeaponCritThresholdHint": "An expanded critical hit threshold for weapon attacks.",
        "DND5E.FlagsSpellCritThreshold": "Spell Critical Hit Threshold",
        "DND5E.FlagsSpellCritThresholdHint": "An expanded critical hit threshold for spell attacks.",
        "DND5E.FlagsMeleeCriticalDice": "Melee Critical Damage Dice",
        "DND5E.FlagsMeleeCriticalDiceHint": "A number of additional damage dice added to melee weapon critical hits.",
        "DND5E.FlagsToolExpertise": "Tool Expertise",
        "DND5E.FlagsToolExpertiseHint": "Doubles your proficiency bonus for any ability check you make that uses your proficiency with a tool.",
        "DND5E.Flat": "Flat",
        "DND5E.Formula": "Formula",
        "DND5E.FormulaMalformedError": "Problem preparing the {property} formula within {name}.",
        "DND5E.FormulaMissingReferenceWarn": "The {property} formula within {name} has references to missing data: {references}",
        "DND5E.Gear": "Gear",
        "DND5E.Gender": "Gender",
        "DND5E.GlobalBonus": "Global Bonus",
        "DND5E.GrantedAbilities": "Granted Abilities",
        "DND5E.GroupInventory": "Inventory",
        "DND5E.GroupHP": "Aggregate Hit Points",
        "DND5E.GroupSummary": "A group of {members}",
        "DND5E.GroupSummaryEmpty": "Empty group",
        "DND5E.GroupControls": "Controls",
        "DND5E.Group": {
          "Action": {
            "ChangePace": "Change Pace",
            "Remove": "Remove Member",
            "View": "View Member"
          },
          "Config": {
            "Art": {
              "Label": "Member Art",
              "portraits": "Portraits",
              "tokens": "Tokens"
            },
            "Legend": "Group Sheet Options"
          },
          "Challenge": "Challenge",
          "Distribute": {
            "noxp": "Distribute pooled currency",
            "xp": "Distribute pooled XP & currency"
          },
          "Member": {
            "one": "Member",
            "other": "Members"
          },
          "PlaceMembers": "Place Members",
          "Primary": {
            "Remove": "Remove as Primary Party",
            "Set": "Set as Primary Party"
          },
          "Type": "Group Type",
          "TypeEncounter": "Encounter",
          "TypeGeneric": "Group",
          "TypeParty": "Party",
          "Vehicle": {
            "one": "Vehicle",
            "other": "Vehicles"
          },
          "Warning": {
            "PhysicalItemOnly": "Only physical items are supported."
          }
        },
        "DND5E.Habitat": {
          "Categories": {
            "Any": "Any",
            "Arctic": "Arctic",
            "Coastal": "Coastal",
            "Desert": "Desert",
            "Forest": "Forest",
            "Grassland": "Grassland",
            "Hill": "Hill",
            "Mountain": "Mountain",
            "Planar": "Planar",
            "Swamp": "Swamp",
            "Underdark": "Underdark",
            "Underwater": "Underwater",
            "Urban": "Urban"
          },
          "Configuration": {
            "Custom": "Custom",
            "Label": "Habitat",
            "Legend": "Categories",
            "Subtype": "{type} Subtype",
            "Title": "Configure Habitat"
          },
          "Subtype": "{type} ({subtype})"
        },
        "DND5E.Hair": "Hair",
        "DND5E.HalfProficient": "Half Proficient",
        "DND5E.HEAL": {
          "Title": "Heal",
          "FIELDS": {
            "healing": {
              "label": "Healing",
              "bonus": {
                "label": "Healing Bonus",
                "hint": "Bonus added to the healing roll."
              },
              "custom": {
                "label": "Custom Healing Formula",
                "enabled": {
                  "label": "Enable Custom Formula",
                  "hint": "Should the custom formula be used rather than the default dice."
                },
                "formula": {
                  "label": "Healing Formula",
                  "hint": "Custom healing formula."
                }
              },
              "denomination": {
                "label": "Die Denomination",
                "hint": "Denomination of the dice to roll."
              },
              "number": {
                "label": "Die Number",
                "hint": "Number of dice to roll."
              },
              "scaling": {
                "label": "Healing Scaling",
                "mode": {
                  "label": "Scaling Mode",
                  "hint": "Method by which the scaling increase is calculated."
                },
                "number": {
                  "label": "Dice Scaling",
                  "hint": "Number of dice to increase for each scaling step. Will be applied to the first die found in the healing formula if more than one is present."
                },
                "formula": {
                  "label": "Scaling Formula",
                  "hint": "Arbitrary scaling formula that will be multiplied for each scaling step and added to the original formula."
                }
              },
              "types": {
                "label": "Healing Types",
                "hint": "Type of healing inflicted or multiple for the user to select from."
              }
            }
          }
        },
        "DND5E.Healing": "Healing",
        "DND5E.HealingRoll": "Healing Roll",
        "DND5E.HealingTemp": "Temporary Hit Points",
        "DND5E.Height": "Height",
        "DND5E.HITPOINTS": {
          "Counted": {
            "one": "{number} hit point",
            "other": "{number} hit points"
          },
          "DT": {
            "Abbr": "DT"
          }
        },
        "DND5E.HitPoints": "Hit Points",
        "DND5E.HitPointsBonusLevel": "Per Level Bonus",
        "DND5E.HitPointsBonusOverall": "Overall Bonus",
        "DND5E.HitPointsConfig": "Configure Hit Points",
        "DND5E.HitPointsCurrent": "Current Hit Points",
        "DND5E.HitPointsMax": "Maximum Hit Points",
        "DND5E.HitPointsMin": "Minimum Hit Points",
        "DND5E.HitPointsOverride": "Maximum Override",
        "DND5E.HitPointsOverrideHint": "Override automatically calculated hit points, ignoring any HP from classes, bonuses, and ability modifier.",
        "DND5E.HitPointsTemp": "Temporary Hit Points",
        "DND5E.HitPointsTempShort": "Temporary HP",
        "DND5E.HitPointsTempMax": "Temporary Maximum",
        "DND5E.HitPointsTempMaxHint": "Temporary change to the maximum HP.",
        "DND5E.HitPointsTempMaxShort": "Temp Max HP",
        "DND5E.HP": "HP",
        "DND5E.HPFormula": "Health Formula",
        "DND5E.HPFormulaError": "The provided hit point formula could not be evaluated.",
        "DND5E.HPFormulaRollMessage": "Roll Hit Point Formula",
        "DND5E.HITDICE": {
          "Abbreviation": "HD",
          "Action": {
            "Decrease": "Decrease",
            "Increase": "Increase"
          },
          "Available": "{number} available",
          "Config": "Adjust Hit Dice",
          "Counted": {
            "one": "{number} hit die",
            "other": "{number} hit dice"
          }
        },
        "DND5E.HitDie": "Hit Die",
        "DND5E.HitDice": "Hit Dice",
        "DND5E.HitDiceConfig": "Adjust Hit Dice",
        "DND5E.HitDiceConfigHint": "Adjust remaining hit dice levels for each class.",
        "DND5E.HitDiceMax": "Maximum Hit Dice",
        "DND5E.HitDiceRemaining": "Remaining Hit Dice",
        "DND5E.HitDiceRoll": "Roll Hit Dice",
        "DND5E.HitDiceWarn": "{name} has no available {formula} Hit Dice remaining!",
        "DND5E.HitDiceNPCWarn": "{name} has no available Hit Dice remaining!",
        "DND5E.Ideals": "Ideals",
        "DND5E.Identified": "Identified",
        "DND5E.Identifier": "Identifier",
        "DND5E.IdentifierError": "An identifier can only contain letters (a-z), numbers (0-9), dashes (-), and underscores (_).",
        "DND5E.Identify": "Identify",
        "DND5E.Immunities": "Immunities",
        "DND5E.Initiative": "Initiative",
        "DND5E.InitiativeAbbr": "Init",
        "DND5E.InitiativeBonus": "Initiative Bonus",
        "DND5E.InitiativeRoll": "Initiative Roll",
        "DND5E.InitiativeConfig": "Configure Initiative",
        "DND5E.InitiativeConfigHint": "Configure initiative modifiers and bonuses which apply to this Actor.",
        "DND5E.Inspiration": "Inspiration",
        "DND5E.Inventory": "Inventory",
        "DND5E.InventorySearch": "Search inventory",
        "DND5E.Issues": "Issues",
        "DND5E.ItemActionType": "Action Type",
        "DND5E.ItemActivation": "Activation",
        "DND5E.ItemActivationCondition": "Activation Condition",
        "DND5E.ItemActivationCost": "Activation Cost",
        "DND5E.ItemActivationType": "Activation Type",
        "DND5E.ItemAmmoProperties": "Ammunition Properties",
        "DND5E.ItemAttackBonus": "Attack Roll Bonus",
        "DND5E.ItemAttackFlat": "Flat Bonus",
        "DND5E.ItemAttackFlatHint": "If checked, don't add proficiency, ability modifier, or any other bonuses to attack roll except what is included here.",
        "DND5E.ItemBackgroundDetails": "Background Details",
        "DND5E.ItemClassDetails": "Class Details",
        "DND5E.ItemConsumableActivation": "Consumable Activation",
        "DND5E.ItemConsumableUsage": "Consumable Usage",
        "DND5E.ItemConsumableDetails": "Consumable Details",
        "DND5E.ItemConsumableProperties": "Consumable Properties",
        "DND5E.ItemConsumableStatus": "Consumable Status",
        "DND5E.ItemConsumableSubtype": "{category} Type",
        "DND5E.ItemConsumableType": "Consumable Type",
        "DND5E.ItemCreate": "Create Item",
        "DND5E.ItemCritThreshold": "Critical Hit Threshold",
        "DND5E.ItemCritExtraDamage": "Extra Critical Hit Damage",
        "DND5E.ItemDelete": "Delete Item",
        "DND5E.ItemEdit": "Edit Item",
        "DND5E.ItemEquipmentAction": "Equipment Action",
        "DND5E.ItemEquipmentBase": "Base Equipment",
        "DND5E.ItemEquipmentDetails": "Equipment Details",
        "DND5E.ItemEquipmentDexMod": "Max. Dexterity Modifier",
        "DND5E.ItemEquipmentDexModAbbr": "Max Dex",
        "DND5E.ItemEquipmentProperties": "Equipment Properties",
        "DND5E.ItemEquipmentStatus": "Equipment Status",
        "DND5E.ItemEquipmentStealthDisav": "Imposes Stealth Disadvantage",
        "DND5E.ItemEquipmentType": "Equipment Type",
        "DND5E.ItemEquipmentUsage": "Equipment Usage",
        "DND5E.ItemFacilityDetails": "Facility Details",
        "DND5E.ItemFeatureDetails": "Feature Details",
        "DND5E.ItemFeatureProperties": "Feature Properties",
        "DND5E.ItemFeatureSubtype": "{category} Type",
        "DND5E.ItemFeatureType": "Feature Type",
        "DND5E.ItemLootDetails": "Loot Details",
        "DND5E.ItemLootProperties": "Loot Properties",
        "DND5E.ItemLootSubtype": "{category} Type",
        "DND5E.ItemLootType": "Loot Type",
        "DND5E.ItemName": "Item Name",
        "DND5E.ItemNew": "New {type}",
        "DND5E.ItemRarityCommon": "common",
        "DND5E.ItemRarityMundane": "mundane",
        "DND5E.ItemRarityUncommon": "uncommon",
        "DND5E.ItemRarityRare": "rare",
        "DND5E.ItemRarityVeryRare": "very rare",
        "DND5E.ItemRarityLegendary": "legendary",
        "DND5E.ItemRarityArtifact": "artifact",
        "DND5E.ItemRechargeCheck": "{name} recharge check - {result}",
        "DND5E.ItemRechargeFailure": "failure!",
        "DND5E.ItemRechargeSuccess": "success!",
        "DND5E.ItemRecoveryRoll": "{name} recovers {count} charges",
        "DND5E.ItemLossRoll": "{name} loses {count} charges",
        "DND5E.ItemRecoveryRollMax": "{name} recovers all charges",
        "DND5E.ItemRecoveryFormulaWarning": "Unable to recover uses for {name}. Invalid recovery formula '{formula}' ({uuid}).",
        "DND5E.ItemRequiredStr": "Required Strength",
        "DND5E.Items": "Items",
        "DND5E.ItemSiegeProperties": "Siege Properties",
        "DND5E.ItemSpeciesDetails": "Species Details",
        "DND5E.ItemSpeciesDetailsLegacy": "Race Details",
        "DND5E.ItemSubclassDetails": "Subclass Details",
        "DND5E.ItemToolBase": "Base Tool",
        "DND5E.ItemToolBonus": "Tool Bonus",
        "DND5E.ItemToolDetails": "Tool Details",
        "DND5E.ItemToolProficiency": "Tool Proficiency",
        "DND5E.ItemToolProperties": "Tool Properties",
        "DND5E.ItemToolStatus": "Tool Status",
        "DND5E.ItemToolType": "Tool Type",
        "DND5E.ItemToolUsage": "Tool Usage",
        "DND5E.ItemVehicleProperties": "Vehicle Properties",
        "DND5E.ItemView": "View Item",
        "DND5E.ItemWeaponAttack": "Weapon Attack",
        "DND5E.ItemWeaponBase": "Base Weapon",
        "DND5E.ItemWeaponDetails": "Weapon Details",
        "DND5E.ItemWeaponProperties": "Weapon Properties",
        "DND5E.ItemWeaponStatus": "Weapon Status",
        "DND5E.ItemWeaponType": "Weapon Type",
        "DND5E.ItemWeaponUsage": "Weapon Usage",
        "DND5E.ITEM": {
          "Category": {
            "Label": "Category",
            "Physical": "Physical"
          },
          "Property": {
            "Adamantine": "Adamantine",
            "Ammunition": "Ammunition",
            "Concentration": "Concentration",
            "Finesse": "Finesse",
            "Firearm": "Firearm",
            "Focus": "Focus",
            "Heavy": "Heavy",
            "Light": "Light",
            "Loading": "Loading",
            "Material": "Material",
            "Magical": "Magical",
            "Reach": "Reach",
            "Reload": "Reload",
            "Returning": "Returning",
            "Ritual": "Ritual",
            "Sidekick": "Sidekick",
            "Silvered": "Silvered",
            "Somatic": "Somatic",
            "Special": "Special",
            "StealthDisadvantage": "Stealth Disadvantage",
            "Thrown": "Thrown",
            "Trait": "Passive Trait",
            "TwoHanded": "Two-Handed",
            "Versatile": "Versatile",
            "Verbal": "Verbal",
            "WeightlessContents": "Weightless Contents"
          },
          "SECTIONS": {
            "Activities": "Activities",
            "Advancement": "Advancement",
            "Contents": "Contents",
            "Description": "Description",
            "Details": "Details",
            "Effects": "Effects"
          }
        },
        "DND5E.JackOfAllTrades": "Jack of all Trades",
        "DND5E.JOURNALENTRY": {
          "Navigation": {
            "Next": "Next",
            "Previous": "Previous",
            "Up": "Up"
          }
        },
        "DND5E.LAIR": {
          "Label": "Lair",
          "Action": {
            "Label": "Lair Action",
            "Initiative": "Lair Action Initiative Count",
            "Uses": "Uses Lair Action"
          },
          "HasLair": "Has Lair",
          "Inside": "Inside Lair"
        },
        "DND5E.Language": {
          "All": "All Languages",
          "Label": "Language",
          "Category": {
            "Exotic": "Exotic Languages",
            "Rare": "Rare Languages",
            "Standard": "Standard Languages"
          },
          "Communication": {
            "Label": "Ranged Communication",
            "Telepathy": "Telepathy"
          },
          "Language": {
            "Aarakocra": "Aarakocra",
            "Abyssal": "Abyssal",
            "Aquan": "Aquan",
            "Auran": "Auran",
            "Celestial": "Celestial",
            "Common": "Common",
            "CommonSign": "Common Sign Language",
            "DeepSpeech": "Deep Speech",
            "Draconic": "Draconic",
            "Druidic": "Druidic",
            "Dwarvish": "Dwarvish",
            "Elvish": "Elvish",
            "Giant": "Giant",
            "Gith": "Gith",
            "Gnoll": "Gnoll",
            "Gnomish": "Gnomish",
            "Goblin": "Goblin",
            "Halfling": "Halfling",
            "Ignan": "Ignan",
            "Infernal": "Infernal",
            "Orc": "Orc",
            "Primordial": "Primordial",
            "Sylvan": "Sylvan",
            "Terran": "Terran",
            "ThievesCant": "Thieves' Cant",
            "Undercommon": "Undercommon"
          }
        },
        "DND5E.Languages": "Languages",
        "DND5E.LegendaryAction": {
          "Description": "Legendary Action Uses: {uses}. Immediately after another creature\u2019s turn, the {name} can expend a use to take one of the following actions. The {name} regains all expended uses at the start of each of its turns.",
          "DescriptionLegacy": "The {name} can take {usesNamed}, choosing from the options below. Only one legendary action option can be used at a time and only at the end of another creature\u2019s turn. The {name} regains spent legendary actions at the start of its turn.",
          "Label": "Legendary Action",
          "LabelPl": "Legendary Actions",
          "LairUses": "{normal} ({lair} in Lair)",
          "Max": "Maximum Legendary Actions",
          "Ordinal": {
            "one": "{n}st Legendary Action",
            "two": "{n}nd Legendary Action",
            "few": "{n}rd Legendary Action",
            "other": "{n}th Legendary Action"
          },
          "Remaining": "Remaining Legendary Actions",
          "Spent": "Spent Legendary Actions"
        },
        "DND5E.LegendaryResistance": {
          "Action": {
            "Resist": "Legendary Resistance"
          },
          "Label": "Legendary Resistance",
          "LabelPl": "Legendary Resistances",
          "Max": "Maximum Legendary Resistances",
          "Ordinal": {
            "one": "{n}st Legendary Resistance",
            "two": "{n}nd Legendary Resistance",
            "few": "{n}rd Legendary Resistance",
            "other": "{n}th Legendary Resistance"
          },
          "Remaining": "Remaining Legendary Resistances",
          "Resisted": "Used Legendary Resistance",
          "Spent": "Spent Legendary Resistances"
        },
        "DND5E.Level": "Level",
        "DND5E.LevelAvg": "Avg. Level",
        "DND5E.LevelPl": "Levels",
        "DND5E.LevelActionDecrease": "Level Down",
        "DND5E.LevelActionIncrease": "Level Up",
        "DND5E.LevelCount": "{ordinal} Level",
        "DND5E.LevelLimit": {
          "Label": "Level Limit",
          "Max": "Maximum Level",
          "Min": "Minimum Level"
        },
        "DND5E.LevelNumber": "Level {level}",
        "DND5E.LevelScaling": "Level Scaling",
        "DND5E.LimitedUses": "Limited Uses",
        "DND5E.LimitedUsesAvailable": "Remaining Uses",
        "DND5E.LimitedUsesMax": "Maximum Uses",
        "DND5E.LimitedUsesPer": "Use Recovery Mode",
        "DND5E.LimitedUsesPrompt": "Uses Prompt",
        "DND5E.LimitedUsesPromptTooltip": "If unchecked, the prompt to consume an available use will be suppressed.",
        "DND5E.Long": "Long",
        "DND5E.Loyalty": "Loyalty",
        "DND5E.MagicalBonus": "Magical Bonus",
        "DND5E.Materials": "Materials",
        "DND5E.Max": "Max",
        "DND5E.MaxCharacterLevelExceededWarn": "Character cannot be advanced past level {max}.",
        "DND5E.MaxClassLevelExceededWarn": "Class cannot be advanced past level {max}.",
        "DND5E.MaxClassLevelMinimumWarn": "Class must have at least one level.",
        "DND5E.Maximum": "Maximum",
        "DND5E.Minimum": "Minimum",
        "DND5E.Method": "Method",
        "DND5E.Modifier": "Modifier",
        "DND5E.ModuleArtConfigH": "Configure which module-provided art should be used.",
        "DND5E.ModuleArtConfigL": "Configure Art",
        "DND5E.ModuleArtConfigN": "Module-provided Art",
        "DND5E.ModuleArtConfigPortraits": "Portraits",
        "DND5E.ModuleArtConfigTokens": "Tokens",
        "DND5E.ModuleArtPriorityDecrease": "Decrease Priority",
        "DND5E.ModuleArtPriorityHint": "Use the arrows to adjust the priority of the art sources. When a single Actor has art provided from multiple sources, the one with the highest priority will be used.",
        "DND5E.ModuleArtPriorityIncrease": "Increase Priority",
        "DND5E.Multiple": "Multiple",
        "DND5E.Multiplier": "Multiplier",
        "DND5E.MythicActionLabel": "Mythic Action",
        "DND5E.Name": "Character Name",
        "DND5E.NameUnidentified": "Unidentified Name",
        "DND5E.NoCharges": "No Charges",
        "DND5E.None": "None",
        "DND5E.NoneActionLabel": "None",
        "DND5E.Normal": "Normal",
        "DND5E.NotProficient": "Not Proficient",
        "DND5E.Notes": "Notes",
        "DND5E.NPC": {
          "Label": "NPC",
          "FIELDS": {
            "traits": {
              "important": {
                "hint": "Important NPCs track death saves, hit dice, and loyalty (if enabled). Any NPC with class levels is considered important regardless of this setting.",
                "label": "Important NPC"
              }
            }
          },
          "SECTIONS": {
            "Actions": "Actions",
            "BonusActions": "Bonus Actions",
            "LegendaryActions": "Legendary Actions",
            "Reactions": "Reactions",
            "Traits": "Traits"
          }
        },
        "DND5E.NUMBER": {
          "1": "one",
          "2": "two",
          "3": "three",
          "4": "four",
          "5": "five",
          "6": "six",
          "7": "seven",
          "8": "eight",
          "9": "nine"
        },
        "DND5E.Number": "Number",
        "DND5E.OtherFormula": "Other Formula",
        "DND5E.ORDINAL": {
          "one": "{number}st",
          "two": "{number}nd",
          "few": "{number}rd",
          "other": "{number}th"
        },
        "DND5E.PactMagic": "Pact Magic",
        "DND5E.Passive": "Passive",
        "DND5E.PassivePerception": "Passive Perception",
        "DND5E.Period": "Period",
        "DND5E.PersonalityTraits": "Personality Traits",
        "DND5E.Portrait": "Portrait",
        "DND5E.Prepared": "Prepared",
        "DND5E.Preparation": "Preparation",
        "DND5E.Prerequisites": {
          "Header": "Feature Prerequisites",
          "FIELDS": {
            "prerequisites": {
              "items": {
                "hint": "Identifiers for items that the character must have before selecting this item.",
                "label": "Required Items"
              },
              "label": "Prerequisites",
              "level": {
                "hint": "Character or class level required to select this feature when levelling up.",
                "label": "Required Level"
              },
              "repeatable": {
                "hint": "This feature can be chosen more than once.",
                "label": "Repeatable"
              }
            }
          },
          "Warning": {
            "InvalidLevel": "must be at least level {level}",
            "Message": "{actor} {requirements} in order to take this {type}.",
            "MissingItem": "must have previously taken {items}",
            "NotRepeatable": "must not have taken this before"
          }
        },
        "DND5E.Price": "Price",
        "DND5E.Proficiency": "Proficiency",
        "DND5E.ProficiencyBonus": "Proficiency Bonus",
        "DND5E.ProficiencyBonusAbbr": "PB",
        "DND5E.ProficiencyConfigurationHint": "Configure proficiency and bonuses.",
        "DND5E.ProficiencyConfigureTitle": "Configure {label}",
        "DND5E.ProficiencyLevel": "Proficiency Level",
        "DND5E.ProficiencyOther": "Other",
        "DND5E.Proficient": "Proficient",
        "DND5E.Properties": "Properties",
        "DND5E.PropertyBase": "Base",
        "DND5E.PropertyTotal": "Total",
        "DND5E.Public": "Public",
        "DND5E.Quantity": "Quantity",
        "DND5E.QuantityAbbr": "Qty",
        "DND5E.QuantityFormula": "Quantity Formula",
        "DND5E.QuantityRoll": "Roll Quantities",
        "DND5E.RacialTraits": "Species Traits",
        "DND5E.RacialTraitsLegacy": "Racial Traits",
        "DND5E.RANGE": {
          "FIELDS": {
            "range": {
              "label": "Range",
              "long": {
                "label": "Long Range",
                "hint": "Far attack range of the weapon, if present on the weapon."
              },
              "override": {
                "label": "Override Range",
                "hint": "Use these range values instead of the item's when using this activity."
              },
              "reach": {
                "label": "Reach"
              },
              "special": {
                "label": "Special Range",
                "hint": "Description of any special range details."
              },
              "units": {
                "label": "Range Units",
                "hint": "Units used to measure range."
              },
              "value": {
                "label": "Range Value",
                "hint": "Value of the range in the specified units, if applicable."
              }
            }
          },
          "Formatted": {
            "Range": "range {range}",
            "Reach": "reach {reach}"
          }
        },
        "DND5E.Range": "Range",
        "DND5E.RangeDistance": "Distance",
        "DND5E.RangeLong": "Long Range",
        "DND5E.RangeNormal": "Normal Range",
        "DND5E.RangeUnits": "Range Type or Units",
        "DND5E.Rarity": "Rarity",
        "DND5E.Reaction": "Reaction",
        "DND5E.ReactionAbbr": "R",
        "DND5E.ReactionPl": "Reactions",
        "DND5E.Recharge": "Recharge",
        "DND5E.RechargeLong": "Recharge after a Long Rest",
        "DND5E.RechargeShort": "Recharge after a Short or Long Rest",
        "DND5E.Recovery": "Recovery",
        "DND5E.RecoveryFormula": "Recovery Formula",
        "DND5E.REGIONBEHAVIORS": {
          "DIFFICULTTERRAIN": {
            "FIELDS": {
              "ignoredDispositions": {
                "hint": "Tokens with these dispositions will not be affected by this difficult terrain.",
                "label": "Ignored Dispositions"
              },
              "magical": {
                "hint": "This difficult terrain is created by a magical effect.",
                "label": "Magical"
              },
              "types": {
                "hint": "Types that best describe the source of this difficult terrain, if any.",
                "label": "Types"
              }
            },
            "Type": {
              "All": "All Types",
              "Ice": "Slippery Ice",
              "Magical": "Magical",
              "Nonmagical": "Nonmagical",
              "Plants": "Plants or Undergrowth",
              "Rocks": "Rubble or Rocks",
              "Liquid": "Shallow Liquid",
              "Slope": "Steep Slope",
              "Snow": "Deep Snow"
            }
          },
          "ROTATEAREA": {
            "Action": {
              "AddPosition": "Add Position",
              "DeletePosition": "Delete Position",
              "RotateToPosition": "Rotate to Position"
            },
            "DirectionMode": {
              "Clockwise": "Clockwise",
              "CounterClockwise": "Counter Clockwise",
              "Longest": "Longest",
              "Shortest": "Shortest"
            },
            "FIELDS": {
              "directionMode": {
                "label": "Direction Mode",
                "hint": "How the rotation direction is decided when moving to the next position."
              },
              "lights": {
                "ids": {
                  "label": "Lights"
                }
              },
              "positions": {
                "label": "Positions",
                "element": {
                  "angle": {
                    "label": "Angle"
                  }
                }
              },
              "regions": {
                "ids": {
                  "label": "Regions"
                }
              },
              "sounds": {
                "ids": {
                  "label": "Ambient Sounds"
                }
              },
              "tiles": {
                "ids": {
                  "label": "Tiles"
                }
              },
              "time": {
                "mode": {
                  "label": "Speed Mode",
                  "hint": "How the rotation speed is determined from the rotation time, either the same regardless of the distance moved (fixed) or dependant on the distance rotated (variable)."
                },
                "value": {
                  "label": "Rotation Time",
                  "hint": "Time in miliseconds to rotate to the next position (in fixed mode) or to rotate 90\u02da (in variable mode)."
                }
              },
              "walls": {
                "ids": {
                  "label": "Walls"
                },
                "link": {
                  "label": "Link Walls",
                  "hint": "Rotate any wall segments attached to the ones specified."
                }
              }
            },
            "SpeedMode": {
              "Fixed": "Fixed (total rotation time)",
              "Variable": "Variable (time to rotate 90\u02da)"
            },
            "Warning": {
              "RecursiveRegion": "Cannot rotate same region that contains the behavior."
            }
          }
        },
        "DND5E.Remaining": "Remaining",
        "DND5E.RequiredMaterials": "Required Materials",
        "DND5E.Requirements": "Requirements",
        "DND5E.Resistances": "Resistances",
        "DND5E.Resources": "Resources",
        "DND5E.ResourceLabel": "Label",
        "DND5E.ResourceMax": "Resource Maximum",
        "DND5E.ResourceValue": "Resource Value",
        "DND5E.ResourcePrimary": "Resource 1",
        "DND5E.ResourceSecondary": "Resource 2",
        "DND5E.ResourceTertiary": "Resource 3",
        "DND5E.REST": {
          "Configuration": "Rest Configuration",
          "HitDice": {
            "AutoSpend": {
              "Hint": "Automatically spend hit dice until they run out or health is full.",
              "Label": "Auto Spend HD"
            },
            "None": "No Hit Dice remaining to roll during this rest.",
            "Select": "Select Dice to Roll"
          },
          "Label": "Rest",
          "Long": {
            "Abbreviation": "LR",
            "Hint": {
              "Group": "On a long rest group members will recover hit points, hit dice, class resources, limited use item charges, and spell slots.",
              "GroupLegacy": "On a long rest group members will recover hit points, half of their maximum hit dice, class resources, limited use item charges, and spell slots.",
              "Normal": "On a long rest you will recover hit points, hit dice, class resources, limited use item charges, and spell slots.",
              "NormalLegacy": "On a long rest you will recover hit points, half your maximum hit dice, class resources, limited use item charges, and spell slots."
            },
            "Label": "Long Rest",
            "LabelShort": "L. Rest",
            "Recovery": "Recovers after Long Rest",
            "Result": {
              "Full": "{name} takes a long rest and recovers {health} and {dice}.",
              "HitDice": "{name} takes a long rest and recovers {dice}.",
              "HitPoints": "{name} takes a long rest and recovers {health}.",
              "Short": "{name} takes a long rest."
            }
          },
          "NewDay": {
            "Hint": "Recover limited use abilities which recharge at dusk, dawn, or on a new day.",
            "Label": "New Day"
          },
          "RecoverTempHP": {
            "Label": "Remove Temp HP"
          },
          "RecoverTempMaxHP": {
            "Hint": "Remove any adjustments to a character's maximum Hit Points.",
            "Label": "Recover Max HP"
          },
          "Request": {
            "AutoRest": {
              "Hint": "Automatically perform the rest for selected party actors, rather than sending a rest request to players.",
              "Label": "Auto Rest"
            },
            "Label": "Rest Request"
          },
          "Short": {
            "Abbreviation": "SR",
            "Hint": {
              "Group": "On a short rest group members can spend Hit Dice and will recover item uses.",
              "Normal": "On a short rest you may spend remaining Hit Dice and recover item uses."
            },
            "Label": "Short Rest",
            "LabelShort": "S. Rest",
            "Recovery": "Recovers after Short Rest",
            "Result": {
              "Full": "{name} takes a short rest spending {dice} to recover {health}.",
              "Short": "{name} takes a short rest."
            }
          },
          "Warning": {
            "OnlyByRequest": "Rests can only be performed at the request of the GM."
          }
        },
        "DND5E.Ritual": "Ritual",
        "DND5E.RitualAbbr": "R",
        "DND5E.ROLL": {
          "Range": {
            "Label": "Roll Range",
            "Maximum": "Maximum Roll",
            "Minimum": "Minimum Roll"
          },
          "Section": "{label} Rolls",
          "Status": "Status"
        },
        "DND5E.Roll": "Roll",
        "DND5E.RollConfiguration": {
          "Title": "Configure Roll",
          "Configuration": "Configuration",
          "Rolls": "Rolls"
        },
        "DND5E.RollExample": "e.g. 1d4",
        "DND5E.RollMode": "Roll Mode",
        "DND5E.RollSituationalBonus": "Situational Bonus?",
        "DND5E.Rule": {
          "Tooltip": "Tooltip",
          "Type": {
            "Label": "Rule Type",
            "Condition": "Condition",
            "Rule": "Rule"
          }
        },
        "DND5E.Movement": "Movement",
        "DND5E.MovementConfig": "Configure Movement Speed",
        "DND5E.MovementConfigHint": "Configure movement speed and special movement attributes.",
        "DND5E.MovementWalk": "Walk",
        "DND5E.MovementBurrow": "Burrow",
        "DND5E.MovementClimb": "Climb",
        "DND5E.MovementHover": "Hover",
        "DND5E.MovementFly": "Fly",
        "DND5E.MovementSwim": "Swim",
        "DND5E.MovementLand": "Land",
        "DND5E.MovementWater": "Water",
        "DND5E.MovementAir": "Air",
        "DND5E.MovementSpeeds": "Movement Speeds",
        "DND5E.MovementUnits": "Units",
        "DND5E.MovementIgnoredDifficultTerrain": "Ignored Difficult Terrain",
        "DND5E.SAVE": {
          "Title": {
            "one": "Save",
            "other": "Saves"
          },
          "FIELDS": {
            "damage": {
              "label": "Save Damage",
              "onSave": {
                "label": "Damage on Save",
                "hint": "How much damage should be applied on a successful save?",
                "Full": "Full Damage",
                "Half": "Half Damage",
                "None": "No Damage"
              },
              "parts": {
                "label": "Damage Parts",
                "hint": "Individual damage parts to include with the roll."
              }
            },
            "effects": {
              "onSave": {
                "label": "Always Apply",
                "hint": "This effect will always be applied, even if the target succeeds on its saving throw."
              }
            },
            "save": {
              "label": "Save Details",
              "ability": {
                "label": "Challenge Abilities",
                "hint": "Abilities that may be rolled to attempt to save."
              },
              "dc": {
                "label": "Difficulty Class",
                "calculation": {
                  "label": "DC Calculation",
                  "hint": "Method or ability used to calculate the difficulty class."
                },
                "formula": {
                  "label": "DC Formula",
                  "hint": "Custom formula or flat value for defining the save DC."
                },
                "CustomFormula": "Custom Formula",
                "DefaultFormula": "8 + @mod + @prof"
              }
            }
          },
          "OnSave": "On Save"
        },
        "DND5E.SaveBonus": "Saving Throw Bonus",
        "DND5E.SaveGlobalBonusHint": "This bonus applies to all saving throws made by this actor.",
        "DND5E.Scroll": {
          "CreateFrom": "Create Scroll from {spell}",
          "CreateScroll": "Create Scroll",
          "Details": "Scroll Details",
          "Explanation": {
            "Label": "Explanation",
            "Hint": "Amount of the rules on using spell scrolls to include in the created scroll.",
            "Complete": "Complete",
            "Reference": "Reference"
          },
          "RequiresConcentration": "Requires Concentration",
          "SaveDC": "Save DC",
          "Values": "Spell Values"
        },
        "DND5E.Senses": "Senses",
        "DND5E.SensesConfig": "Configure Senses",
        "DND5E.SensesConfigHint": "Configure any special sensory perception abilities that this actor possesses.",
        "DND5E.SenseDarkvision": "Darkvision",
        "DND5E.SenseBlindsight": "Blindsight",
        "DND5E.SenseTremorsense": "Tremorsense",
        "DND5E.SenseTruesight": "Truesight",
        "DND5E.SenseUnits": "Units",
        "DND5E.SenseSpecial": "Special Senses",
        "DND5E.Shape": "Shape",
        "DND5E.SheetClass": {
          "Character": "Default 5e Character Sheet",
          "ClassSummary": "Default 5e Class Summary Sheet",
          "Container": "Default 5e Container Sheet",
          "DifficultTerrain": "Default 5e Difficult Terrain Sheet",
          "Encounter": "Default 5e Encounter Sheet",
          "Group": "Default 5e Group Sheet",
          "Item": "Default 5e Item Sheet",
          "JournalEntry": "Default 5e Journal Entry Sheet",
          "JournalEntryLegacy": "Legacy 5e Journal Entry Sheet",
          "MapLocation": "Default 5e Map Location Sheet",
          "NPC": "Default 5e NPC Sheet",
          "RotateArea": "Default 5e Rotate Area Sheet",
          "Rule": "Default 5e Rule Sheet",
          "SpellList": "Default 5e Spell List Sheet",
          "Token": "Default 5e Token Sheet",
          "Vehicle": "Default 5e Vehicle Sheet"
        },
        "DND5E.SheetModeEdit": "Edit",
        "DND5E.SheetModePlay": "Play",
        "DND5E.SavingThrow": "Saving Throw",
        "DND5E.SavingThrowDC": "DC {dc} {ability} Saving Throw",
        "DND5E.SavingThrowRoll": "Roll {ability} Saving Throw",
        "DND5E.SavingThrowShort": "Save",
        "DND5E.SaveDC": "DC {dc} {ability}",
        "DND5E.SavePromptTitle": "{ability} Saving Throw",
        "DND5E.ScalingFormula": "Scaling Formula",
        "DND5E.ScalingMode": "Scaling Mode",
        "DND5E.ScalingValue": "Scaling Value",
        "DND5E.School": "School",
        "DND5E.SchoolAbj": "Abjuration",
        "DND5E.SchoolCon": "Conjuration",
        "DND5E.SchoolDiv": "Divination",
        "DND5E.SchoolEnc": "Enchantment",
        "DND5E.SchoolEvo": "Evocation",
        "DND5E.SchoolIll": "Illusion",
        "DND5E.SchoolNec": "Necromancy",
        "DND5E.SchoolTrs": "Transmutation",
        "DND5E.Size": "Size",
        "DND5E.SizeGargantuan": "Gargantuan",
        "DND5E.SizeGargantuanAbbr": "Gt",
        "DND5E.SizeHuge": "Huge",
        "DND5E.SizeHugeAbbr": "Hg",
        "DND5E.SizeLarge": "Large",
        "DND5E.SizeLargeAbbr": "Lg",
        "DND5E.SizeMedium": "Medium",
        "DND5E.SizeMediumAbbr": "Md",
        "DND5E.SizeSmall": "Small",
        "DND5E.SizeSmallAbbr": "Sm",
        "DND5E.SizeTiny": "Tiny",
        "DND5E.SizeTinyAbbr": "Tn",
        "DND5E.SKILL": {
          "SECTIONS": {
            "Details": "{label} Details",
            "Bonuses": {
              "Label": "{label} Bonuses",
              "Hint": "These bonuses apply to passive scores & checks made with {label}."
            },
            "Global": {
              "Label": "Global Bonuses",
              "Hint": "These bonuses apply to checks made with any skill."
            }
          }
        },
        "DND5E.Skill": "Skill",
        "DND5E.Skills": "Skills",
        "DND5E.SkillAcr": "Acrobatics",
        "DND5E.SkillAni": "Animal Handling",
        "DND5E.SkillArc": "Arcana",
        "DND5E.SkillAth": "Athletics",
        "DND5E.SkillDec": "Deception",
        "DND5E.SkillHis": "History",
        "DND5E.SkillIns": "Insight",
        "DND5E.SkillInv": "Investigation",
        "DND5E.SkillItm": "Intimidation",
        "DND5E.SkillMed": "Medicine",
        "DND5E.SkillNat": "Nature",
        "DND5E.SkillPer": "Persuasion",
        "DND5E.SkillPrc": "Perception",
        "DND5E.SkillPrf": "Performance",
        "DND5E.SkillRel": "Religion",
        "DND5E.SkillSlt": "Sleight of Hand",
        "DND5E.SkillSte": "Stealth",
        "DND5E.SkillSur": "Survival",
        "DND5E.SkillRoll": "Roll {ability} ({skill}) Check",
        "DND5E.SkillPromptTitle": "{ability} ({skill}) Check",
        "DND5E.SkillConfigureTitle": "Configure {skill}",
        "DND5E.SkillConfigure": "Configure Skill",
        "DND5E.SkillsConfig": "Configure Skills",
        "DND5E.SkillBonuses": "Skill Bonuses",
        "DND5E.SkillBonusCheck": "Check Bonus",
        "DND5E.SkillBonusPassive": "Passive Bonus",
        "DND5E.SkillConfigurationHint": "Configure skill proficiency and bonuses.",
        "DND5E.SkillGlobalBonusCheckHint": "This bonus applies to all skill checks made by this actor.",
        "DND5E.SkillModifierHint": "{skill} Modifier",
        "DND5E.SkillPassiveHint": "Passive {skill}",
        "DND5E.SkillPassiveSpecificHint": "Passive {ability} ({skill})",
        "DND5E.SkillPassiveScore": "Passive {skill} Score",
        "DND5E.SkillPassives": "Skill Passives",
        "DND5E.Skin": "Skin",
        "DND5E.Skip": "Skip",
        "DND5E.SOURCE": {
          "FIELDS": {
            "source": {
              "label": "Source",
              "book": {
                "label": "Book"
              },
              "custom": {
                "label": "Custom Label"
              },
              "license": {
                "label": "License"
              },
              "page": {
                "label": "Page/Section"
              },
              "revision": {
                "label": "Revision"
              },
              "rules": {
                "label": "Rules Version"
              },
              "uuid": {
                "label": "Original Source"
              }
            }
          },
          "Action": {
            "Configure": "Configure Source"
          },
          "Display": {
            "Full": "{book} {page}",
            "Page": "pg. {page}"
          }
        },
        "DND5E.Special": "Special",
        "DND5E.SpecialHint": "Special values separated by semi-colons.",
        "DND5E.SpecialTraits": "Special Traits",
        "DND5E.Species": {
          "Label": "Species",
          "Add": "Add Species",
          "AddLegacy": "Add Race",
          "Features": "Species Features",
          "FeaturesLegacy": "Race Features",
          "Name": "Species Name"
        },
        "DND5E.Speed": "Speed",
        "DND5E.SpeedSpecial": "Special Movement",
        "DND5E.SpellAbility": "Spellcasting Ability",
        "DND5E.SpellAbilitySet": "Set as Primary Spellcasting Ability",
        "DND5E.SpellAdd": "Add Spell",
        "DND5E.SpellCantrip": "Cantrip",
        "DND5E.SpellCastConsume": "Consume Spell Slot?",
        "DND5E.SpellCastNoSlots": "You have no available {level} spell slots with which to cast {name}",
        "DND5E.SpellCastNoSlotsLeft": "You have no available spell slots with which to cast {name}!",
        "DND5E.SpellCastTime": "Casting Time",
        "DND5E.SpellCastUpcast": "Cast at Level",
        "DND5E.SpellcasterLevel": "Spellcaster Level",
        "DND5E.SpellCastingHeader": "Spell Casting",
        "DND5E.Spellcasting": "Spellcasting",
        "DND5E.SPELLCASTING": {
          "METHODS": {
            "AtWill": {
              "label": "At-Will"
            },
            "Innate": {
              "label": "Innate Spellcasting"
            },
            "Ritual": {
              "label": "Ritual Only"
            },
            "Spell": {
              "label": "Spellcasting",
              "Full": {
                "label": "Full Caster"
              },
              "Half": {
                "label": "Half Caster"
              },
              "Third": {
                "label": "Third Caster"
              },
              "Artificer": {
                "label": "Artificer"
              }
            },
            "Pact": {
              "abbr": "Pact",
              "label": "Pact Magic",
              "Full": {
                "label": "Pact Magic"
              }
            }
          },
          "SLOTS": {
            "spell0": "Cantrips",
            "spell1": "1st Level",
            "spell2": "2nd Level",
            "spell3": "3rd Level",
            "spell4": "4th Level",
            "spell5": "5th Level",
            "spell6": "6th Level",
            "spell7": "7th Level",
            "spell8": "8th Level",
            "spell9": "9th Level"
          },
          "STATES": {
            "Unprepared": "Not Prepared",
            "Prepared": "Prepared",
            "AlwaysPrepared": "Always Prepared"
          },
          "Unlabeled": "Unlabeled Spellcasting"
        },
        "DND5E.SpellcastingClass": "{class} Spellcasting",
        "DND5E.SpellComponent": "Spell Component",
        "DND5E.SpellComponents": "Spell Components",
        "DND5E.SpellCreate": "Create Spell",
        "DND5E.SpellDC": "Spell DC",
        "DND5E.SpellDetails": "Spell Details",
        "DND5E.SpellEffects": "Spell Effects",
        "DND5E.SpellHeader": {
          "Formula": "Formula",
          "Range": "Range",
          "Roll": "Roll",
          "School": "School",
          "Target": "Target",
          "Time": "Time"
        },
        "DND5E.SpellLevel": "Spell Level",
        "DND5E.SpellLevels": "Spell Levels",
        "DND5E.SpellLevel0": "Cantrip",
        "DND5E.SpellLevel1": "1st Level",
        "DND5E.SpellLevel2": "2nd Level",
        "DND5E.SpellLevel3": "3rd Level",
        "DND5E.SpellLevel4": "4th Level",
        "DND5E.SpellLevel5": "5th Level",
        "DND5E.SpellLevel6": "6th Level",
        "DND5E.SpellLevel7": "7th Level",
        "DND5E.SpellLevel8": "8th Level",
        "DND5E.SpellLevel9": "9th Level",
        "DND5E.SpellLevelSpell": "{level} ({n} Slots)",
        "DND5E.SpellLevelPact": "Pact Slot [Level {level}] ({n} Slots)",
        "DND5E.SpellMaterials": "Spellcasting Materials",
        "DND5E.SpellMaterialsConsumed": "Consume Materials",
        "DND5E.SpellMaterialsCost": "Material Cost",
        "DND5E.SpellMaterialsDescription": "Material Description",
        "DND5E.SpellMaterialsSupply": "Material Supply",
        "DND5E.SpellName": "Spell Name",
        "DND5E.SpellNone": "None",
        "DND5E.SpellPrepAtWill": "At-Will",
        "DND5E.SpellPrepInnate": "Innate Spellcasting",
        "DND5E.SpellPrepRitual": "Ritual Only",
        "DND5E.SpellPrepPrepared": "Prepared",
        "DND5E.SpellPrepAlways": "Always Prepared",
        "DND5E.SpellPreparation": {
          "Label": "Spell Preparation",
          "Formula": "Preparation Formula",
          "Method": "Spellcasting Method"
        },
        "DND5E.SpellSourceClass": "Source Class",
        "DND5E.SpellPrepared": "Prepared",
        "DND5E.SpellProgArt": "Artificer",
        "DND5E.SpellProgAvailable": "Available slots",
        "DND5E.SpellProgFull": "Full Caster",
        "DND5E.SpellProgHalf": "Half Caster",
        "DND5E.SpellProgLeveled": "Leveled Magic",
        "DND5E.SpellProgOverride": "Override slots",
        "DND5E.SpellProgPact": "Pact Magic",
        "DND5E.SpellProgThird": "Third Caster",
        "DND5E.SpellProgression": "Spell Progression",
        "DND5E.SpellsSearch": "Search spells",
        "DND5E.SpellSchool": "Spell School",
        "DND5E.SpellScroll": "Spell Scroll",
        "DND5E.SpellSlotExpended": "Expended Spell Slot",
        "DND5E.SpellSlotN.one": "{n}st spell slot",
        "DND5E.SpellSlotN.two": "{n}nd spell slot",
        "DND5E.SpellSlotN.few": "{n}rd spell slot",
        "DND5E.SpellSlotN.other": "{n}th spell slot",
        "DND5E.SpellSlotTemporary": "Temporary Spell Slot",
        "DND5E.SpellSlotsN.one": "{n}st Level Slots",
        "DND5E.SpellSlotsN.two": "{n}nd Level Slots",
        "DND5E.SpellSlotsN.few": "{n}rd Level Slots",
        "DND5E.SpellSlotsN.other": "{n}th Level Slots",
        "DND5E.SpellSlotsPact": "Pact Slots",
        "DND5E.SpellSlotsConfig": "Configure Spell Slots",
        "DND5E.SpellTag": "Spell Tag",
        "DND5E.SpellTarget": "Spell Target",
        "DND5E.SpellUnprepared": "Unprepared",
        "DND5E.SpellUsage": "Spell Usage",
        "DND5E.Spellbook": "Spellbook",
        "DND5E.Spent": "Spent",
        "DND5E.StartingEquipment": {
          "Title": "Starting Equipment",
          "Action": {
            "AddEntry": "Add Entry",
            "Configure": "Configure Starting Equipment",
            "RemoveEntry": "Remove Entry"
          },
          "Choice": {
            "Armor": "Choose Armor",
            "Focus": "Choose Spellcasting Focus",
            "Tool": "Choose Tool",
            "Weapon": "Choose Weapon"
          },
          "DropHint": "Drop item here to link",
          "IfProficient": "If Proficient",
          "Operator": {
            "AND": "All of\u2026",
            "OR": "One of\u2026"
          },
          "RequireProficiency": "Require Proficiency",
          "SpecificItem": "Specific Item",
          "Warning": {
            "Depth": "Only three levels of depth allowed in starting equipment.",
            "ItemTypeInvalid": "{type} items cannot be added to starting equipment."
          },
          "Wealth": {
            "Label": "Starting Wealth",
            "Hint": "Formula in GP that can be used in place of starting equipment."
          }
        },
        "DND5E.SubclassAdd": "Add Subclass",
        "DND5E.SubclassIdentifierHint": "This identifier should match the identifier on the parent class to ensure they are properly linked.",
        "DND5E.SubclassAssignmentError": "{class} already has a subclass. Remove the existing '{subclass}' subclass before adding a new one.",
        "DND5E.SubclassDuplicateError": "A subclass with the identifier {identifier} already exists on this actor.",
        "DND5E.SubclassMismatchWarn": "{name} subclass has no matching class with identifier '{class}'.",
        "DND5E.SubclassName": "Subclass Name",
        "DND5E.Subtype": "Subtype",
        "DND5E.Summary": "Summary",
        "DND5E.SUMMON": {
          "Title": "Summon",
          "FIELDS": {
            "bonuses": {
              "ac": {
                "label": "Bonus Armor Class",
                "hint": "Bonus to the Armor Class set on the summoned creature added to what is specified in their statblock."
              },
              "attackDamage": {
                "label": "Bonus Attack Damage",
                "hint": "Additional damage done by the creature's attacks."
              },
              "hd": {
                "label": "Bonus Hit Dice",
                "hint": "Additional hit dice added to the creature on top of what is derived from the HP formula in their statblock. Can only be used when summoning NPC actors."
              },
              "healing": {
                "label": "Bonus Healing",
                "hint": "Additional healing provided by healing abilities."
              },
              "hp": {
                "label": "Bonus Hit Points",
                "hint": "Additional hit points added to the creature on top of what is specified in their statblock."
              },
              "saveDamage": {
                "label": "Bonus Save Damage",
                "hint": "Additional damage done by the creature's abilities that require saving throws."
              }
            },
            "creatureSizes": {
              "label": "Creature Sizes",
              "hint": "Summoned creature and token will be changed to this size. If more than one size is selected, then the player will be able to choose from these sizes when summoning."
            },
            "creatureTypes": {
              "label": "Creature Types",
              "hint": "Summoned creature will be changed to this type. If more than one type is selected, then the player will be able to choose from these types when summoning."
            },
            "match": {
              "ability": {
                "label": "Match Ability",
                "hint": "Specific ability to use when when matching attacks and save DCs."
              },
              "attacks": {
                "label": "Match Attacks",
                "hint": "Modify to hit values on the summoned creature's attacks to match that of the summoner."
              },
              "proficiency": {
                "label": "Match Proficiency",
                "hint": "Modify the summoned creature's proficiency to match that of the summoner."
              },
              "saves": {
                "label": "Match Saves",
                "hint": "Modify saving throw DCs on the summoned creature's abilities to match that of the summoner."
              }
            },
            "profiles": {
              "element": {
                "count": {
                  "label": "Count"
                },
                "cr": {
                  "label": "Challenge Rating",
                  "abbr": "CR",
                  "hint": "Maximum CR of the summoned creature."
                },
                "level": {
                  "label": "Level Limit",
                  "hint": "Range of levels required to use this profile.",
                  "max": {
                    "label": "Maximum Level"
                  },
                  "min": {
                    "label": "Minimum Level"
                  }
                },
                "name": {
                  "label": "Display Name",
                  "hint": "Name of the profile displayed in the usage dialog."
                },
                "types": {
                  "label": "Creature Types",
                  "hint": "List of creature types from which the summoned creature can be selected."
                },
                "uuid": {
                  "label": "Linked Creature"
                }
              },
              "label": "Summons Profiles"
            },
            "summon": {
              "label": "Summoning Details",
              "identifier": {
                "label": "Class Identifier",
                "hint": "Identifier used to determine whether the character level or a specific class level should be used for profile level limits."
              },
              "mode": {
                "label": "Mode",
                "hint": "Sets how the creatures that are to be summoned are specified.",
                "CR": "By Challenge Rating & Type",
                "Direct": "By Direct Link"
              },
              "prompt": {
                "label": "Summon Prompt",
                "hint": "Should the player be prompted to place the summons? Players will still be able to summon from the chat card if prompt is disabled."
              }
            }
          },
          "SECTIONS": {
            "Changes": "Changes",
            "Profiles": "Profiles",
            "Summoning": "Summoning"
          },
          "Action": {
            "Place": "Place Summons",
            "Summon": "Summon",
            "View": "View Summon"
          },
          "CreatureChanges": {
            "Label": "Creature Changes",
            "Hint": "Changes that will be made to the creature being summoned. Any @ references used in the following formulas will be based on the summoner's stats. Summoned creatures' stats can be referenced using @summon (e.g. @summon.attributes.hd.max to reference the creature's hit dice count)."
          },
          "ItemChanges": {
            "Label": "Item Changes",
            "Hint": "Changes made to items on the summoned creature."
          },
          "Profile": {
            "Label": "Summons Profile",
            "Action": {
              "Create": "Create Profile",
              "Delete": "Delete Profile"
            },
            "ChallengeRatingLabel": "Challenge Rating of {cr} or lower",
            "DropHint": "Drop creature here",
            "Empty": "Click the <i class=\"fas fa-plus\"></i> button above to create a profile.",
            "EmptyDrop": "Click the <i class=\"fas fa-plus\"></i> button above to create a profile or drop a creature to summon here."
          },
          "Warning": {
            "NoOwnership": "You must have ownership of '{actor}' in order to summon it.",
            "NoProfile": "Cannot find summoning profile {profileId} on '{item}'.",
            "Wildcard": "You must have 'Use File Browser' permissions to summon creatures with wildcard artwork."
          }
        },
        "DND5E.Summoning": {
          "Label": "Summoning"
        },
        "DND5E.Supply": "Supply",
        "DND5E.Suppressed": "Suppressed",
        "DND5E.TARGET": {
          "Action": {
            "PlaceTemplate": "Place Measured Template"
          },
          "Count": {
            "Any": "Any",
            "Every": "Every"
          },
          "FIELDS": {
            "target": {
              "label": "Targeting",
              "affects": {
                "label": "Affected Targets",
                "choice": {
                  "label": "Choose Targets",
                  "hint": "When targeting an area, can the user choose who it affects?"
                },
                "count": {
                  "label": "Target Count",
                  "hint": "Number of individual targets that can be affected."
                },
                "special": {
                  "label": "Special Targeting",
                  "hint": "Description of any special targeting details."
                },
                "type": {
                  "label": "Target Type",
                  "hint": "Type of targets that can be affected (e.g. creatures, objects, spaces)."
                }
              },
              "override": {
                "label": "Override Target",
                "hint": "Use these target values instead of the item's when using this activity."
              },
              "prompt": {
                "label": "Measured Template Prompt",
                "hint": "Should the player be prompted to place a measured template? Players will still be able to place templates from the chat card if prompt is disabled."
              },
              "template": {
                "label": "Area of Effect",
                "contiguous": {
                  "label": "Contiguous Areas",
                  "hint": "Must all created areas be connected to one another?"
                },
                "count": {
                  "label": "Area Count",
                  "hint": "Number of distinct areas that can be targeted."
                },
                "height": {
                  "label": "Area Height",
                  "hint": "Height of a cylinder affected if applicable."
                },
                "size": {
                  "label": "Area Size",
                  "hint": "Size of the area of effect on its primary axis."
                },
                "type": {
                  "label": "Area Type",
                  "hint": "Type of area of effect targeted."
                },
                "units": {
                  "label": "Area Units",
                  "hint": "Units used to measure the area of effect sizes."
                },
                "width": {
                  "label": "Area Width",
                  "hint": "Width of a line affected if applicable."
                }
              }
            }
          },
          "Formatted": "{count} {type}",
          "Type": {
            "Ally": {
              "Label": "Ally",
              "Counted": {
                "any": "any allies",
                "every": "every ally",
                "one": "{number} ally",
                "other": "{number} allies"
              }
            },
            "Any": {
              "Label": "Any"
            },
            "Circle": {
              "Label": "Circle",
              "Counted": {
                "one": "{number} circle",
                "other": "{number} circles"
              }
            },
            "Cone": {
              "Label": "Cone",
              "Counted": {
                "one": "{number} cone",
                "other": "{number} cones"
              }
            },
            "Creature": {
              "Label": "Creature",
              "Counted": {
                "any": "any creatures",
                "every": "every creature",
                "one": "{number} creature",
                "other": "{number} creatures"
              }
            },
            "CreatureOrObject": {
              "Label": "Creature or Object",
              "Counted": {
                "any": "any creatures or objects",
                "every": "every creature or object",
                "one": "{number} creature or object",
                "other": "{number} creatures or objects"
              }
            },
            "Cube": {
              "Label": "Cube",
              "Counted": {
                "one": "{number} cube",
                "other": "{number} cubes"
              }
            },
            "Cylinder": {
              "Label": "Cylinder",
              "Counted": {
                "one": "{number} cylinder",
                "other": "{number} cylinders"
              }
            },
            "Emanation": {
              "Label": "Emanation",
              "Counted": {
                "one": "{number} emanation",
                "other": "{number} emanations"
              }
            },
            "Enemy": {
              "Label": "Enemy",
              "Counted": {
                "any": "any enemies",
                "every": "every enemy",
                "one": "{number} enemy",
                "other": "{number} enemies"
              }
            },
            "Line": {
              "Label": "Line",
              "Counted": {
                "one": "{number} line",
                "other": "{number} lines"
              }
            },
            "Object": {
              "Label": "Object",
              "Counted": {
                "any": "any objects",
                "every": "every object",
                "one": "{number} object",
                "other": "{number} objects"
              }
            },
            "Radius": {
              "Label": "Radius",
              "Counted": {
                "one": "{number} radius",
                "other": "{number} radii"
              }
            },
            "Self": {
              "Label": "Self"
            },
            "Sphere": {
              "Label": "Sphere",
              "Counted": {
                "one": "{number} sphere",
                "other": "{number} spheres"
              }
            },
            "Space": {
              "Label": "Space",
              "Counted": {
                "any": "any spaces",
                "every": "every space",
                "one": "{number} space",
                "other": "{number} spaces"
              }
            },
            "Square": {
              "Label": "Square",
              "Counted": {
                "one": "{number} square",
                "other": "{number} squares"
              }
            },
            "Target": {
              "Label": "Target",
              "Counted": {
                "any": "any targets",
                "every": "every target",
                "one": "{number} target",
                "other": "{number} targets"
              }
            },
            "Wall": {
              "Label": "Wall",
              "Counted": {
                "one": "{number} wall",
                "other": "{number} walls"
              }
            },
            "WillingCreature": {
              "Label": "Willing Creature",
              "Counted": {
                "any": "any willing creatures",
                "every": "every willing creature",
                "one": "{number} willing creature",
                "other": "{number} willing creatures"
              }
            }
          },
          "Warning": {
            "PlaceTemplate": "Failed to place measured template."
          }
        },
        "DND5E.Target": "Target",
        "DND5E.TargetPl": "Targets",
        "DND5E.TargetType": "Target Type",
        "DND5E.TargetTypeArea": "Area",
        "DND5E.TargetTypeIndividual": "Individual",
        "DND5E.TargetUnits": "Area of Effect Units",
        "DND5E.TargetValue": "Target Length or Count",
        "DND5E.TargetWidth": "Line Width",
        "DND5E.TemplatePrompt": "Template Prompt",
        "DND5E.TemplatePromptTooltip": "If unchecked, the prompt for placing a Measured Template will be suppressed.",
        "DND5E.Temp": "Temp",
        "DND5E.Threshold": "Threshold",
        "DND5E.TimeDay": "Days",
        "DND5E.TimeDayAbbr": "d",
        "DND5E.TimeDisp": "Until Dispelled",
        "DND5E.TimeDispTrig": "Until Dispelled or Triggered",
        "DND5E.TimeHour": "Hours",
        "DND5E.TimeHourAbbr": "h",
        "DND5E.TimeInst": "Instantaneous",
        "DND5E.TimeMinute": "Minutes",
        "DND5E.TimeMinuteAbbr": "m",
        "DND5E.TimeMonth": "Months",
        "DND5E.TimePerm": "Permanent",
        "DND5E.TimeRound": "Rounds",
        "DND5E.TimeTurn": "Turns",
        "DND5E.TimeYear": "Years",
        "DND5E.TMP": "TMP",
        "DND5E.ToHit": "To Hit",
        "DND5E.Tokens": {
          "NoneSelected": "No Tokens Selected",
          "NoneTargeted": "No Tokens Targeted",
          "Selected": "Selected",
          "Targeted": "Targeted"
        },
        "DND5E.TokenRings": {
          "BackgroundColor": "Background Color",
          "Effects": {
            "Label": "Effects",
            "BackgroundWave": "Background Wave",
            "RingGradient": "Ring Gradient",
            "RingPulse": "Ring Pulse"
          },
          "Enabled": "Use Dynamic Ring",
          "RingColor": "Ring Color",
          "ScaleCorrection": "Scale Correction",
          "Subject": {
            "Label": "Subject Path",
            "Hint": "Explicitly specify a path for the artwork placed over the dynamic token ring. If not provided, the subject image will be set to the normal token artwork."
          },
          "Title": "Dynamic Ring"
        },
        "DND5E.ToggleDescription": "Toggle Description",
        "DND5E.TOOL": {
          "SECTIONS": {
            "Details": "{label} Details",
            "Bonuses": {
              "Label": "{label} Bonuses",
              "Hint": "These bonuses apply to checks made with {label}."
            },
            "Global": {
              "Label": "Global Bonuses",
              "Hint": "These bonuses apply to checks made with any tool."
            }
          }
        },
        "DND5E.ToolArtisans": "Artisan's Tools",
        "DND5E.ToolBonuses": "Tool Bonuses",
        "DND5E.ToolCheck": "Tool Check",
        "DND5E.ToolConfigure": "Configure Tool Proficiency",
        "DND5E.ToolDisguiseKit": "Disguise Kit",
        "DND5E.ToolForgeryKit": "Forgery Kit",
        "DND5E.ToolGamingSet": "Gaming Set",
        "DND5E.ToolHerbalismKit": "Herbalism Kit",
        "DND5E.ToolMusicalInstrument": "Musical Instrument",
        "DND5E.ToolNavigators": "Navigator's Tools",
        "DND5E.ToolPoisonersKit": "Poisoner's Kit",
        "DND5E.ToolPromptTitle": "{tool} Check",
        "DND5E.ToolThieves": "Thieves' Tools",
        "DND5E.ToolVehicle": "Vehicles",
        "DND5E.TraitAll": "All {category}",
        "DND5E.TraitArmorPlural.one": "Armor Training",
        "DND5E.TraitArmorPlural.other": "Armor Training",
        "DND5E.TraitArmorProf": "Armor Training",
        "DND5E.TraitArmorLegacyPlural.one": "Armor Proficiency",
        "DND5E.TraitArmorLegacyPlural.other": "Armor Proficiencies",
        "DND5E.TraitArmorLegacyProf": "Armor Proficiencies",
        "DND5E.TraitCIPlural.one": "Condition Immunity",
        "DND5E.TraitCIPlural.other": "Condition Immunities",
        "DND5E.TraitConfig": "Configure {trait}",
        "DND5E.TraitConfigChooseAnyCounted": "any {count} {type}",
        "DND5E.TraitConfigChooseAnyUncounted": "any {type}",
        "DND5E.TraitConfigChooseList": "{count} from {list}",
        "DND5E.TraitConfigChooseOther": "{count} other {type}",
        "DND5E.TraitConfigChooseWrapper": "Choose {choices}",
        "DND5E.TraitDIPlural.one": "Damage Immunity",
        "DND5E.TraitDIPlural.other": "Damage Immunities",
        "DND5E.TraitDMPlural.one": "Damage Modification",
        "DND5E.TraitDMPlural.other": "Damage Modifications",
        "DND5E.TraitDRPlural.one": "Damage Resistance",
        "DND5E.TraitDRPlural.other": "Damage Resistances",
        "DND5E.TraitDVPlural.one": "Damage Vulnerability",
        "DND5E.TraitDVPlural.other": "Damage Vulnerabilities",
        "DND5E.TraitGenericPlural.one": "Trait",
        "DND5E.TraitGenericPlural.other": "Traits",
        "DND5E.TraitLanguagesPlural.one": "Language",
        "DND5E.TraitLanguagesPlural.other": "Languages",
        "DND5E.TraitSave": "Update",
        "DND5E.TraitSavesPlural.one": "Saving Throw Proficiency",
        "DND5E.TraitSavesPlural.other": "Saving Throw Proficiencies",
        "DND5E.TraitSelectorSpecial": "Special (Split with Semi-Colon)",
        "DND5E.TraitSkillsPlural.one": "Skill Proficiency",
        "DND5E.TraitSkillsPlural.other": "Skill Proficiencies",
        "DND5E.TraitToolPlural.one": "Tool Proficiency",
        "DND5E.TraitToolPlural.other": "Tool Proficiencies",
        "DND5E.TraitToolProf": "Tool Proficiencies",
        "DND5E.TraitWeaponPlural.one": "Weapon Proficiency",
        "DND5E.TraitWeaponPlural.other": "Weapon Proficiencies",
        "DND5E.TraitWeaponProf": "Weapon Proficiencies",
        "DND5E.Traits": "Traits",
        "DND5E.TraitsChosen": "Chosen Traits",
        "DND5E.TRANSFORM": {
          "Action": {
            "Restore": "Restore Transformation",
            "Transform": "Transform"
          },
          "Dialog": {
            "Title": "Configure Transformation"
          },
          "FIELDS": {
            "profiles": {
              "element": {
                "cr": {
                  "label": "Challenge Rating",
                  "abbr": "CR",
                  "hint": "Maximum CR of the source creature."
                },
                "level": {
                  "label": "Level Limit",
                  "hint": "Range of levels required to use this profile.",
                  "max": {
                    "label": "Maximum Level"
                  },
                  "min": {
                    "label": "Minimum Level"
                  }
                },
                "movement": {
                  "hint": "Movement types that are not allowed on source creatures.",
                  "label": "Restricted Movement Types"
                },
                "name": {
                  "hint": "Name of the profile displayed in the usage dialog.",
                  "label": "Display Name"
                },
                "sizes": {
                  "hint": "List of creature sizes from which the source creature can be selected.",
                  "label": "Creature Sizes"
                },
                "types": {
                  "hint": "List of creature types from which the source creature can be selected.",
                  "label": "Creature Types"
                },
                "uuid": {
                  "label": "Linked Actor"
                }
              },
              "label": "Transform Profiles"
            },
            "transform": {
              "label": "Transformation Details",
              "customize": {
                "label": "Customize",
                "hint": "Use custom transformation settings rather than the defaults provided by the selected preset."
              },
              "identifier": {
                "label": "Class Identifier",
                "hint": "Identifier used to determine whether the character level or a specific class level should be used for profile level limits."
              },
              "mode": {
                "label": "Mode",
                "hint": "Sets how the transformation source creatures are selected.",
                "CR": "By Challenge Rating",
                "Direct": "By Direct Link"
              },
              "preset": {
                "label": "Preset"
              }
            }
          },
          "Preset": {
            "Appearance": {
              "Label": "Appearance Only"
            },
            "Default": "Default",
            "Label": "Presets",
            "Polymorph": {
              "Label": "Polymorph"
            },
            "WildShape": {
              "Label": "Wild Shape"
            }
          },
          "Profile": {
            "Action": {
              "Create": "Create Profile",
              "Delete": "Delete Profile"
            },
            "ChallengeRatingLabel": "Challenge Rating of {cr} or lower",
            "DropHint": "Drop creature here",
            "Empty": "Click the <i class=\"fas fa-plus\"></i> button above to create a profile.",
            "Label": "Transform Profile"
          },
          "SECTIONS": {
            "Profiles": "Profiles",
            "Settings": "Settings",
            "Transformation": "Transformation"
          },
          "Setting": {
            "Effects": {
              "All": {
                "Hint": "Keep all effects, ignoring any other effects settings.",
                "Label": "All Effects"
              },
              "Background": {
                "Label": "Background Effects"
              },
              "Class": {
                "Label": "Class Effects"
              },
              "Equipment": {
                "Label": "Equipment Effects"
              },
              "Feature": {
                "Label": "Feature Effects"
              },
              "Origin": {
                "Hint": "Keep any effects created directly on this source actor.",
                "Label": "This Actor"
              },
              "OtherOrigin": {
                "Hint": "Keep any effects imposed by an outside actor.",
                "Label": "Other Actors"
              },
              "Spell": {
                "Label": "Spell Effects"
              }
            },
            "FIELDS": {
              "effects": {
                "label": "Active Effects"
              },
              "keep": {
                "hint": "These details will be retained from the source actor.",
                "label": "Keep"
              },
              "merge": {
                "hint": "Merge these proficiencies, keeping whichever has the higher modifier.",
                "label": "Merge"
              },
              "minimumAC": {
                "hint": "Formula defining the armor class for the transformed creature, if the target actor's AC is not already higher.",
                "label": "Minimum Armor Class"
              },
              "other": {
                "label": "Other Options"
              },
              "spellLists": {
                "hint": "The spells on these spell lists will be kept if the actor has a matching item.",
                "label": "Retained Spell Lists"
              },
              "tempFormula": {
                "hint": "Formula for temp HP that will be added upon transformation.",
                "label": "Temp Formula"
              },
              "transformTokens": {
                "label": "Transform Tokens"
              }
            },
            "Keep": {
              "Biography": {
                "Label": "Biography"
              },
              "CreatureType": {
                "Label": "Creature Type"
              },
              "Equipment": {
                "Label": "Equipment"
              },
              "Features": {
                "Label": "Features"
              },
              "GearProficiency": {
                "Label": "Gear Proficiency"
              },
              "Health": {
                "Label": "Hit Points & Hit Dice"
              },
              "Languages": {
                "Label": "Languages"
              },
              "Mental": {
                "Hint": "Keep intelligence, wisdom, and charisma scores.",
                "Label": "Mental Abilities"
              },
              "Physical": {
                "Hint": "Keep strength, dexterity, and constitution scores.",
                "Label": "Physical Abilities"
              },
              "Proficiency": {
                "Label": "Proficiency Bonus"
              },
              "Resistances": {
                "Label": "Damage Resistances"
              },
              "Saves": {
                "Label": "Save Proficiencies"
              },
              "Self": {
                "Hint": "Only change portrait and token artwork, other settings will be ignored.",
                "Label": "Self"
              },
              "Skills": {
                "Label": "Skill Proficiencies"
              },
              "Spells": {
                "Label": "Spells"
              },
              "Vision": {
                "Label": "Vision"
              }
            },
            "Merge": {
              "Saves": {
                "Label": "Save Proficiencies"
              },
              "Skills": {
                "Label": "Skill Proficiencies"
              }
            }
          },
          "TemporaryClass": "Temporary Class",
          "Title": "Transform",
          "Warning": {
            "NoOwnership": "You do not have permission to transform this actor.",
            "NoPermission": "Transformation permission haven't been granted to players.",
            "OriginalActor": "No original actor was found with ID '{reference}'.",
            "SourceActor": "No actor found to transform into."
          }
        },
        "DND5E.Travel": {
          "Label": "Travel Pace",
          "Pace": {
            "Fast": "Fast",
            "Normal": "Normal",
            "Slow": "Slow"
          }
        },
        "DND5E.Treasure": {
          "Categories": {
            "Any": "Any",
            "Arcana": "Arcana",
            "Armaments": "Armaments",
            "Implements": "Implements",
            "Individual": "Individual",
            "None": "None",
            "Relics": "Relics"
          },
          "Configuration": {
            "Label": "Treasure",
            "Title": "Configure Treasure"
          }
        },
        "DND5E.Trigger": "Trigger",
        "DND5E.Type": "Type",
        "DND5E.Uncrewed": "Uncrewed",
        "DND5E.Unequipped": "Not Equipped",
        "DND5E.Unidentified.DefaultName": "Unidentified {name}",
        "DND5E.Unidentified.Notice": "You must identify this item to learn its details.",
        "DND5E.Unidentified.Title": "Unidentified",
        "DND5E.Unidentified.Value": "???",
        "DND5E.Unit": "Unit",
        "DND5E.UNITS": {
          "DISTANCE": {
            "Label": "Distance Units",
            "Foot": {
              "Label": "Feet",
              "Abbreviation": "ft"
            },
            "Kilometer": {
              "Label": "Kilometers",
              "Abbreviation": "km"
            },
            "Meter": {
              "Label": "Meters",
              "Abbreviation": "m"
            },
            "Mile": {
              "Label": "Miles",
              "Abbreviation": "mi"
            }
          },
          "TIME": {
            "Day": {
              "Label": "Day"
            },
            "Hour": {
              "Label": "Hour"
            },
            "Minute": {
              "Label": "Minute"
            },
            "Month": {
              "Label": "Month"
            },
            "Round": {
              "Label": "Round",
              "Counted": {
                "narrow": "{number}r",
                "one": "{number} round",
                "other": "{number} rounds"
              }
            },
            "Second": {
              "Label": "Second"
            },
            "Turn": {
              "Label": "Turn",
              "Abbreviation": "t",
              "Counted": {
                "narrow": "{number}t",
                "one": "{number} turn",
                "other": "{number} turns"
              }
            },
            "Week": {
              "Label": "Week"
            },
            "Year": {
              "Label": "Year"
            }
          },
          "VOLUME": {
            "Label": "Volume Units",
            "CubicFoot": {
              "Label": "Cubic Feet",
              "Abbreviation": "ft\u00b3",
              "Counted": {
                "narrow": {
                  "one": "{number}ft\u00b3",
                  "other": "{number}ft\u00b3"
                },
                "short": {
                  "one": "{number} cu ft",
                  "other": "{number} cu ft"
                },
                "long": {
                  "one": "{number} cubic foot",
                  "other": "{number} cubic feet"
                }
              }
            },
            "Liter": {
              "Label": "Liters",
              "Abbreviation": "L"
            }
          },
          "WEIGHT": {
            "Label": "Weight Units",
            "Kilogram": {
              "Label": "Kilogram",
              "Abbreviation": "kg"
            },
            "Megagram": {
              "Label": "Tonnes",
              "Abbreviation": "t",
              "Counted": {
                "narrow": {
                  "one": "{number}t",
                  "other": "{number}t"
                },
                "short": {
                  "one": "{number} t",
                  "other": "{number} t"
                },
                "long": {
                  "one": "{number} tonne",
                  "other": "{number} tonnes"
                }
              }
            },
            "Pound": {
              "Label": "Pounds",
              "Abbreviation": "lb"
            },
            "Ton": {
              "Label": "Tons",
              "Abbreviation": "tn",
              "Counted": {
                "narrow": {
                  "one": "{number}tn",
                  "other": "{number}tn"
                },
                "short": {
                  "one": "{number} tn",
                  "other": "{number} tn"
                },
                "long": {
                  "one": "{number} ton",
                  "other": "{number} tons"
                }
              }
            }
          }
        },
        "DND5E.Unknown": "Unknown",
        "DND5E.Unlimited": "Unlimited",
        "DND5E.USAGE": {
          "SECTION": {
            "Consumption": "Consumption",
            "Creation": "Creation",
            "Scaling": "Scaling"
          }
        },
        "DND5E.Usage": "Usage",
        "DND5E.Use": "Use",
        "DND5E.UseItem": "Use {item}",
        "DND5E.Uses": "Uses",
        "DND5E.UsesAvailable": "Available Uses",
        "DND5E.UsesMax": "Maximum Uses",
        "DND5E.UsesPeriod": "Recovery Period",
        "DND5E.UsesPeriods": {
          "Charges": "Charges",
          "ChargesAbbreviation": "Charges"
        },
        "DND5E.USES": {
          "FIELDS": {
            "uses": {
              "label": "Uses",
              "max": {
                "label": "Maximum Uses",
                "hint": "Formula for the maximum number of uses."
              },
              "recovery": {
                "label": "Use Recovery",
                "hint": "Recovery profiles for this activity's uses.",
                "FIELDS": {
                  "period": {
                    "label": "Recovery Period",
                    "hint": "Time when this recovery will occur."
                  },
                  "type": {
                    "label": "Recovery Type",
                    "hint": "How uses are recovered."
                  },
                  "formula": {
                    "label": "Recovery Formula",
                    "hint": "Formula used to determine how many uses are recovered."
                  }
                }
              },
              "spent": {
                "label": "Spent Uses",
                "hint": "Number of uses that have been spent."
              }
            }
          },
          "Recovery": {
            "Action": {
              "Create": "Create Recovery Profile",
              "Delete": "Delete Recovery Profile"
            },
            "Combat": "Combat",
            "Never": "Never",
            "Period": {
              "Dawn": {
                "Label": "Dawn"
              },
              "Day": {
                "Label": "Day"
              },
              "Dusk": {
                "Label": "Dusk"
              },
              "Initiative": {
                "Label": "Initiative"
              },
              "LongRest": {
                "Label": "Long Rest",
                "Abbreviation": "LR"
              },
              "ShortRest": {
                "Label": "Short Rest",
                "Abbreviation": "SR"
              },
              "Turn": {
                "Label": "Each Turn"
              },
              "TurnEnd": {
                "Label": "End of Turn",
                "Abbreviation": "Turn End"
              },
              "TurnStart": {
                "Label": "Start of Turn",
                "Abbreviation": "Turn Start"
              }
            },
            "Recharge": {
              "Label": "Recharge",
              "Range": "Recharge {range}"
            },
            "Special": "Special",
            "Time": "Time",
            "Type": {
              "Formula": "Custom Formula",
              "LoseAll": "Lose All Uses",
              "RecoverAll": "Recover All Uses"
            }
          }
        },
        "DND5E.UTILITY": {
          "Title": "Use",
          "FIELDS": {
            "roll": {
              "label": "Roll",
              "formula": {
                "label": "Roll Formula",
                "hint": "Formula for an arbitrary roll."
              },
              "name": {
                "label": "Roll Label",
                "hint": "Display name for the rolling button."
              },
              "prompt": {
                "label": "Roll Prompt",
                "hint": "Display the roll configuration dialog when rolling."
              },
              "visible": {
                "label": "Visible to All",
                "hint": "Display the rolling button in chat for all players."
              }
            }
          }
        },
        "DND5E.Value": "Value",
        "DND5E.VEHICLE": {
          "MOUNTABLE": {
            "FIELDS": {
              "cover": {
                "label": "Cover",
                "hint": "Cover provided to crew operating this equipment."
              },
              "crewed": {
                "label": "Crewed"
              },
              "hp": {
                "label": "Hit Points",
                "conditions": {
                  "label": "Health Conditions"
                },
                "dt": {
                  "label": "Damage Threshold"
                },
                "max": {
                  "label": "Max HP"
                },
                "value": {
                  "label": "Current HP"
                }
              },
              "speed": {
                "conditions": {
                  "label": "Speed Conditions"
                },
                "value": {
                  "label": "Speed"
                }
              }
            }
          }
        },
        "DND5E.Vehicle": "Vehicle",
        "DND5E.VehicleActions": "Actions",
        "DND5E.VehicleActionsHint": "Actions taken with full crew complement",
        "DND5E.VehicleActionMax": "Maximum Actions",
        "DND5E.VehicleActionStations": "Action Stations",
        "DND5E.VehicleActionThresholds": "Action Thresholds",
        "DND5E.VehicleActionThresholdsFull": "Full Crew Complement",
        "DND5E.VehicleActionThresholdsMid": "Partial Crew Complement",
        "DND5E.VehicleActionThresholdsMin": "Minimum Crew Complement",
        "DND5E.VehicleCargo": "Cargo",
        "DND5E.VehicleCargoCapacity": "Cargo Capacity",
        "DND5E.VehicleCargoCrew": "Cargo & Crew",
        "DND5E.VehicleCreatureCapacity": "Creature Capacity",
        "DND5E.VehicleCrew": "Crew",
        "DND5E.VehicleCrewPassengers": "Crew & Passengers",
        "DND5E.VehicleCrewed": "Crewed",
        "DND5E.VehicleCrewAction": "Crew Action",
        "DND5E.VehicleEquipment": "Vehicle Equipment",
        "DND5E.VehicleMishap": "Mishap",
        "DND5E.VehicleMishapThreshold": "Mishap Threshold",
        "DND5E.VehiclePassengers": "Passengers",
        "DND5E.VehiclePassengerName": "Passenger Name or Type",
        "DND5E.VehiclePassengerQuantity": "Passenger Quantity",
        "DND5E.VehicleType": "Vehicle Type",
        "DND5E.VehicleTypeAir": "Air Vehicle",
        "DND5E.VehicleTypeLand": "Land Vehicle",
        "DND5E.VehicleTypeSpace": "Space Vehicle",
        "DND5E.VehicleTypeWater": "Water Vehicle",
        "DND5E.VehicleUncrewed": "Uncrewed",
        "DND5E.Versatile": "Versatile",
        "DND5E.VersatileDamage": "Versatile Damage",
        "DND5E.VsDC": "vs DC.",
        "DND5E.Vulnerabilities": "Vulnerabilities",
        "DND5E.WarnBadACFormula": "The provided AC formula \"{formula}\" could not be evaluated.",
        "DND5E.WarnCantAddMultipleAdvancements": "It is not currently possible to add multiple items with advancements to an actor at the same time. Please add them individually.",
        "DND5E.WarnMultipleArmor": "More than one suit of armor equipped, AC calculation may be incorrect.",
        "DND5E.WarnMultipleShields": "More than one shield equipped, AC calculation may be incorrect.",
        "DND5E.WEAPON": {
          "FIELDS": {
            "ammunition": {
              "type": {
                "label": "Ammunition Type"
              }
            },
            "armor": {
              "value": {
                "label": "Armor Class"
              }
            },
            "damage": {
              "hint": "Intrinsic damage dice from the weapon. Ability modifier and additional damage parts will be provided automatically when attacking."
            },
            "mastery": {
              "label": "Mastery",
              "hint": "Special weapon ability unlocked for characters who have Weapon Mastery or a related feature."
            }
          },
          "Mastery": {
            "Label": "Weapon Mastery",
            "Flavor": "Mastery",
            "Cleave": "Cleave",
            "Graze": "Graze",
            "Nick": "Nick",
            "Push": "Push",
            "Sap": "Sap",
            "Slow": "Slow",
            "Topple": "Topple",
            "Vex": "Vex"
          }
        },
        "DND5E.WeaponCategory": "{category} Weapon",
        "DND5E.WeaponImprov": "Improvised",
        "DND5E.WeaponMartialM": "Martial Melee",
        "DND5E.WeaponMartialProficiency": "Martial",
        "DND5E.WeaponMartialR": "Martial Ranged",
        "DND5E.WeaponNatural": "Natural",
        "DND5E.WeaponSiege": "Siege Weapon",
        "DND5E.WeaponSimpleM": "Simple Melee",
        "DND5E.WeaponSimpleProficiency": "Simple",
        "DND5E.WeaponSimpleR": "Simple Ranged",
        "DND5E.Weight": "Weight",
        "DND5E.WhisperedTo": "Whispered to",
        "DND5E.Wiki": "Wiki",
        "DND5E.available": "available",
        "DND5E.description": "A system for playing the fifth edition of the worlds most popular roleplaying game in the Foundry Virtual Tabletop environment.",
        "DND5E.of": "of",
        "DND5E.per": "per",
        "DND5E.spell": "spell",
        "EDITOR.DND5E.Inline": {
          "ApplyStatus": "Apply Status to Selected Tokens",
          "AttackExtended": "<em>{type}</em>: {parts}",
          "AttackLong": "{formula} to hit",
          "AttackShort": "{formula}",
          "AwardEach": "{award} each",
          "CheckShort": "{check}",
          "CheckLong": "{check} check",
          "CheckUsing": "{check} using {tool}",
          "DamageExtended": "<em>Hit:</em> {damage} damage",
          "DamageDouble": "{first} plus {second}",
          "DamageShort": "{formula} {type}",
          "DamageLong": "{average} ({formula}) {type}",
          "DC": "DC {dc} {check}",
          "DCPassiveShort": "DC {dc} passive {check}",
          "DCPassiveLong": "passive {check} score of {dc} or higher",
          "NoActorWarning": "No selected or assigned actor could be found to execute this roll.",
          "PassiveShort": "passive {check}",
          "PassiveLong": "passive {check} score",
          "RequestRoll": "Request Roll",
          "RollRequest": "Roll Request",
          "SaveShort": "{save}",
          "SaveLong": "{save} saving throw",
          "SpecificCheck": "{ability} ({type})",
          "Warning": {
            "NoActivityOnItem": "{item} on {actor} does not have an Activity with name {activity}.",
            "NoActor": "No selected or assigned actor could be found to execute this roll.",
            "NoItemOnActor": "{actor} does not have an Item with name {item}."
          }
        },
        "EFFECT.DND5E": {
          "StatusBleeding": "Bleeding",
          "StatusBloodied": "Bloodied",
          "StatusBurning": "Burning",
          "StatusBurrowing": "Burrowing",
          "StatusConcentrating": "Concentrating",
          "StatusCursed": "Cursed",
          "StatusDead": "Dead",
          "StatusDehydration": "Dehydration",
          "StatusDodging": "Dodging",
          "StatusEncumbered": "Encumbered",
          "StatusEthereal": "Ethereal",
          "StatusExceedingCarryingCapacity": "Exceeding Carrying Capacity",
          "StatusFalling": "Falling",
          "StatusFlying": "Flying",
          "StatusHalfCover": "Half Cover",
          "StatusHeavilyEncumbered": "Heavily Encumbered",
          "StatusHiding": "Hiding",
          "StatusHovering": "Hovering",
          "StatusMalnutrition": "Malnutrition",
          "StatusMarked": "Marked",
          "StatusSilenced": "Silenced",
          "StatusSleeping": "Sleeping",
          "StatusStable": "Stable",
          "StatusSuffocation": "Suffocation",
          "StatusSurprised": "Surprised",
          "StatusThreeQuartersCover": "Three-Quarters Cover",
          "StatusTotalCover": "Total Cover",
          "StatusTransformed": "Transformed"
        },
        "TYPES.JournalEntryPage.class": "Class Summary",
        "TYPES.JournalEntryPage.map": "Map Location",
        "TYPES.JournalEntryPage.rule": "Rule",
        "TYPES.JournalEntryPage.spells": "Spell List",
        "TYPES.JournalEntryPage.subclass": "Subclass Summary",
        "JOURNALENTRYPAGE.DND5E": {
          "Class": {
            "FIELDS": {
              "description": {
                "additionalEquipment": {
                  "label": "Additional Equipment Description",
                  "hint": "Additional descriptive text displayed beneath the starting equipment section."
                },
                "additionalHitPoints": {
                  "label": "Additional Hit Points Description",
                  "hint": "Additional descriptive text displayed beneath the auto-generated hit points section."
                },
                "additionalTraits": {
                  "label": "Additional Proficiencies Description",
                  "hint": "Additional descriptive text displayed beneath list of proficiencies granted by this class."
                },
                "subclass": {
                  "label": "Subclass Introduction",
                  "hint": "Introduction that will be displayed before this class's subclasses."
                },
                "value": {
                  "label": "Introduction",
                  "hint": "Primary description of the class that will appear first."
                }
              },
              "item": {
                "label": "Selected Class"
              },
              "style": {
                "label": "Style",
                "hint": "Force the page style to use modern or legacy formatting, rather than what is specified by the class."
              },
              "subclassHeader": {
                "label": "Subclass Header"
              },
              "subclassItems": {
                "label": "Subclasses"
              }
            },
            "EquipmentHeader": "Equipment",
            "EquipmentDescription": "You start with the following equipment, in addition to the equipment granted by your background:",
            "Features": {
              "DescriptionLegacy": "As a {lowercaseName}, you gain the following class features, which are summarized in the {name} table.",
              "DescriptionModern": "As a {name}, you gain the following class features when you reach the specified {name} levels. These features are listed in the {name} Features table.",
              "Header": "Class Features",
              "Name": "Level {level}: {name}"
            },
            "HitPoints": {
              "Header": "Hit Points",
              "HitDiceLegacy": "<strong>Hit Dice:</strong> {dice} per {class} level",
              "HitDiceModern": "{dice} per {class} level",
              "Level1": "<strong>Hit Points at 1st Level:</strong> {max} + your Constitution modifier",
              "LevelX": "<strong>Hit Points at Higher Levels:</strong> {dice} (or {average}) + your Constitution modifier per {class} level after 1st"
            },
            "ItemHint": "Drop a class here",
            "NoValidClass": "No valid class selected, press the edit button to add a class.",
            "OptionalFeaturesCaption": "Optional Class Features",
            "OptionalFeaturesDescription": "The following section contains options {class} features. These features are not granted automatically, and you can choose one, some, or all of them at your DM's discretion.",
            "SpellSlotLevel": "Slot Level",
            "SpellSlots": "Spell Slots",
            "SpellSlotsPerSpellLevel": "\u2014Spell Slots per Spell Level\u2014",
            "Style": {
              "Inferred": "Inferred from Source",
              "Legacy": "Legacy",
              "Modern": "Modern"
            },
            "SubclassHint": "Drop subclasses here",
            "TableCaption": "The {class}",
            "TableOptionalCaption": "Optional {class} Features",
            "Traits": {
              "Caption": "Core {class} Traits",
              "Header": "Proficiencies"
            }
          },
          "EditDescription": "Edit",
          "TableTOC": "Table: {caption}",
          "SpellList": {
            "DropHint": "Drop spells or folders of spells here to add to the list",
            "Grouping": {
              "Label": "Grouping Mode",
              "Hint": "Controls how the spells will be grouped by default in the spell list.",
              "Alphabetical": "By First Letter",
              "Level": "By Level",
              "None": "No Grouping",
              "School": "By School"
            },
            "IdentifierHint": "Identifier should match that defined on the associated document, if applicable. For example, when creating a spell list for the Wizard class, the identifier should be 'wizard'.",
            "Type": {
              "Label": "Spell List Type",
              "Other": "Uncategorized"
            },
            "UnlinkedSpells": {
              "Label": "Unlinked Spells",
              "Add": "Add Unlinked Spell",
              "Configuration": "Spell Configuration",
              "Edit": "Edit Unlinked Spell"
            }
          },
          "Subclass": {
            "FIELDS": {
              "description": {
                "value": {
                  "label": "Introduction",
                  "hint": "Description of the subclass that will appear before any listed features."
                }
              },
              "item": {
                "label": "Selected Subclass"
              },
              "style": {
                "label": "Style",
                "hint": "Force the page style to use modern or legacy formatting, rather than what is specified by the subclass."
              }
            },
            "ItemHint": "Drop a subclass here",
            "NoValidSubclass": "No valid subclass selected, press the edit button to add a subclass."
          }
        },
        "KEYBINDINGS.DND5E.DragCopy": "Force Copy when Dragging Document",
        "KEYBINDINGS.DND5E.DragMove": "Force Move when Dragging Document",
        "KEYBINDINGS.DND5E.SkipDialogNormal": "Skip Dialog",
        "KEYBINDINGS.DND5E.SkipDialogAdvantage": "Skip Dialog (roll with Advantage/Critical)",
        "KEYBINDINGS.DND5E.SkipDialogDisadvantage": "Skip Dialog (roll with Disadvantage/Non-Critical)",
        "MACRO.5eMissingTargetWarn": "Your controlled actor '{actor}' does not have an {type} with name '{name}'.",
        "MACRO.5eMultipleTargetsWarn": "Your controlled actor '{actor}' has more than one {type} with name '{name}'. The first match will be chosen.",
        "MACRO.5eNoActorSelected": "No selected or assigned actor could be found to target with macro.",
        "MACRO.5eUnownedWarn": "You can only create macro buttons for owned Items",
        "MIGRATION.5eBegin": "Applying D&D 5e System Migration for version {version}. Please be patient and do not close your game or shut down your server.",
        "MIGRATION.5eComplete": "D&D 5e System Migration to version {version} completed!",
        "MIGRATION.5eVersionTooOldWarning": "Your D&D 5e system data is from too old a Foundry version and cannot be reliably migrated to the latest version. The process will be attempted, but errors may occur.",
        "SETTINGS.5eAutoCollapseCardL": "Automatically collapse Item Card descriptions in the Chat Log",
        "SETTINGS.5eAutoCollapseCardN": "Collapse Item Cards in Chat",
        "SETTINGS.5eAutoSpellTemplateL": "When a spell is cast, defaults to begin the process to create the corresponding Measured Template if any (requires TRUSTED or higher player role)",
        "SETTINGS.5eAutoSpellTemplateN": "Always place Spell Template",
        "SETTINGS.5eNoAdvancementsN": "Disable level-up automation",
        "SETTINGS.5eNoAdvancementsL": "Do not prompt for level-up or character creation choices.",
        "SETTINGS.5eNoConcentrationN": "Disable concentration tracking",
        "SETTINGS.5eNoConcentrationL": "Disable the system's automated tracking of concentration.",
        "SETTINGS.5eGridAlignedSquareTemplatesL": "When square templates are created as the result of casting a spell or using an item, they will be locked to the grid alignment and unable to be rotated.",
        "SETTINGS.5eGridAlignedSquareTemplatesN": "Grid-Aligned Square Templates",
        "SETTINGS.DND5E": {
          "AUTOMATION": {
            "Movement": {
              "Name": "Disable Movement Automation",
              "Hint": "Do not apply difficult terrain movement penalties, or prevent creatures from moving through each other according to the rules version."
            }
          },
          "BLOODIED": {
            "Name": "Bloodied Status",
            "Hint": "Configure whether the bloodied status is tracked automatically and its visibility.",
            "All": "Display for Allies & Enemies",
            "Player": "Only Display for Allies",
            "None": "Never Display"
          },
          "COLLAPSETRAYS": {
            "Name": "Collapse Trays in Chat",
            "Hint": "Automatically collapse damage, hit, and effect trays that appear in chat cards.",
            "Always": "Collapse All",
            "Older": "Collapse Older Trays",
            "Never": "Collapse After Use",
            "Manual": "Never Collapse"
          },
          "COMBAT": {
            "Hint": "Various configuration options that affect combat.",
            "Label": "Configure Combat",
            "Name": "Combat",
            "DexTiebreaker": {
              "Name": "Dexterity Tiebreaker",
              "Hint": "Append the raw Dexterity ability score to break ties in Initiative."
            },
            "InitiativeScore": {
              "Name": "Initiative Score",
              "Hint": "Use a creature's initiative score (10 + bonus) rather than rolling for initiative.",
              "All": "Use Score for Everyone",
              "None": "Always Roll for Initiative",
              "NPCs": "Use Score for GM NPCs"
            }
          },
          "CRITICAL": {
            "Name": "Critical Damage",
            "MaxDice": {
              "Name": "Maximize Dice",
              "Hint": "Make critical hits more deadly by maximizing the values of base damage dice."
            },
            "MultiplyModifiers": {
              "Name": "Multiply Modifiers",
              "Hint": "Make critical hits more deadly by multiplying non-dice modifiers in addition to rolled dice."
            }
          },
          "DEFAULTSKILLS": {
            "Name": "Default Skills",
            "Hint": "The default skills that appear on NPC sheets regardless of level of proficiency."
          },
          "General": "General",
          "LOYALTY": {
            "Hint": "Enable optional Loyalty tracking.",
            "Name": "Loyalty Score"
          },
          "METRIC": {
            "LengthUnits": {
              "Name": "Use Metric Length Units",
              "Hint": "Defaults to using meters instead of feet for movement and senses."
            },
            "VolumeUnits": {
              "Name": "Use Metric Volume Units",
              "Hint": "Defaults to using liters instead of cubic feet for container capacity."
            },
            "WeightUnits": {
              "Name": "Use Metric Weight Units",
              "Hint": "Replaces all reference to lbs with kgs and updates the encumbrance calculations to use metric weight units."
            }
          },
          "NPCS": {
            "Name": "NPCs",
            "AutoRecharge": {
              "Name": "Recharge Abilities",
              "Hint": "Roll to recharge NPC abilities automatically at the start of the NPC's turn.",
              "No": "Do not recharge automatically",
              "Silent": "Recharge without creating chat card",
              "Yes": "Recharge and display chat card"
            },
            "AutoRollNPCHP": {
              "Name": "Hit Points",
              "Hint": "Configure whether to roll for NPC max HP whenever a new token is created.",
              "No": "Do not roll",
              "Silent": "Roll without creating chat card",
              "Yes": "Roll and create chat card"
            }
          },
          "THEME": {
            "Name": "Theme",
            "Hint": "Theme that will apply to the UI and all sheets by default. Automatic will be determined by your browser or operating system settings."
          },
          "PERMISSIONS": {
            "AllowRests": {
              "Hint": "Allow players to rest directly from their characters' sheets. When disabled, players will only be able to rest when the GM makes a request from the party.",
              "Name": "Allow Individual Rests"
            },
            "AllowSummoning": {
              "Hint": "Allow players to use summoning abilities to summon actors. Players must also have the Create Tokens core permission.",
              "Name": "Allow Summoning"
            },
            "AllowTransformation": {
              "Hint": "Allow players to transform their own actors. Players must also have the Create Actors & Create Tokens core permissions.",
              "Name": "Allow Transformation"
            }
          },
          "RULESVERSION": {
            "Name": "Rules Version",
            "Hint": "Change handling of various rules between the 2024 and 2014 rule sets.",
            "Legacy": "Legacy Rules (2014)",
            "Modern": "Modern Rules (2024)"
          },
          "VARIANT": {
            "Hint": "Enable and configure rules variations offered by the system.",
            "Label": "Configure Variant Rules",
            "Name": "Variant Rules",
            "AllowFeats": {
              "Hint": "Allow players to choose a feat rather than taking an ability score improvement during class advancement when using the Legacy rules.",
              "Name": "Allow Feats"
            },
            "CurrencyWeight": {
              "Hint": "Carried currency affects character encumbrance.",
              "Name": "Track Currency Weight"
            },
            "Encumbrance": {
              "Hint": "Enable automatic tracking of encumbrance and the application of status effects for characters carrying too much.",
              "Name": "Encumbrance Tracking",
              "None": "None",
              "Normal": "Normal (max carrying capacity)",
              "Variant": "Variant (encumbered & heavily encumbered)"
            },
            "HonorScore": {
              "Hint": "Enable the use of the optional Honor ability score.",
              "Name": "Honor Ability Score"
            },
            "LevelingMode": {
              "Hint": "Determine how the players gain new levels.",
              "Name": "Leveling Mode",
              "NoXP": "Level Advancement without XP",
              "XP": "Experience Points",
              "XPBoons": "Experience Points with Epic Boons"
            },
            "ProficiencyModifier": {
              "Bonus": "PHB: Bonus (+2, +3, +4, +5, +6)",
              "Dice": "DMG: Dice (1d4, 1d6, 1d8, 1d10, 1d12)",
              "Hint": "Configure proficiency modifier to use a fixed bonus or a dice roll.",
              "Name": "Proficiency Variant"
            },
            "Rest": {
              "Epic": "Epic Heroism (LR: 1 hour, SR: 1 min)",
              "Gritty": "Gritty Realism (LR: 7 days, SR: 8 hours)",
              "Hint": "Configure which rest variant should be used for games within this system.",
              "Name": "Rest Variant",
              "Normal": "Player's Handbook (LR: 8 hours, SR: 1 hour)"
            },
            "SanityScore": {
              "Hint": "Enable the use of the optional Sanity ability score.",
              "Name": "Sanity Ability Score"
            }
          },
          "VISIBILITY": {
            "Hint": "Various configuration options that affect player visibility of certain information that the DM may wish to keep secret.",
            "Label": "Configure Visibility",
            "Name": "Visibility",
            "Attack": {
              "Name": "Attack Result Visibility",
              "Hint": "Control visibility of attack roll results in chat cards for players.",
              "All": "Show results & target ACs",
              "HideAC": "Show only results",
              "None": "Hide all"
            },
            "Challenge": {
              "All": "Show all",
              "Hint": "Control what roll DCs are visible to the players and whether successes/failures are highlighted.",
              "Name": "Challenge Visibility",
              "None": "Hide all",
              "Player": "Show only from other players"
            },
            "ItemDescriptions": {
              "Hint": "Hide the descriptions of NPC items from players when posted to chat by the DM. Will only hide the descriptions for items without a Chat Description set.",
              "Name": "Conceal NPC Descriptions"
            }
          }
        },
        "SHEETS.DND5E": {
          "THEME": {
            "Label": "Theme",
            "Automatic": "Automatic",
            "Dark": "Dark Mode",
            "Light": "Light Mode"
          }
        },
        "SOURCE.BOOK.FreeRules": "Free Rules",
        "SOURCE.BOOK.SRD51": "System Reference Document 5.1",
        "SOURCE.BOOK.SRD52": "System Reference Document 5.2",
        "SIDEBAR.SortModePriority": "Sort by priority"
      }
    },
    "spell_slot_tables": {},
    "progression_types": [],
    "spell_source_code": {
      "module/data/item/spell.mjs": "import { filteredKeys } from \"../../utils.mjs\";\nimport ItemDataModel from \"../abstract/item-data-model.mjs\";\nimport ActivationField from \"../shared/activation-field.mjs\";\nimport DurationField from \"../shared/duration-field.mjs\";\nimport RangeField from \"../shared/range-field.mjs\";\nimport TargetField from \"../shared/target-field.mjs\";\nimport ActivitiesTemplate from \"./templates/activities.mjs\";\nimport ItemDescriptionTemplate from \"./templates/item-description.mjs\";\n\nconst { BooleanField, NumberField, SchemaField, SetField, StringField } = foundry.data.fields;\n\n/**\n * Data definition for Spell items.\n * @mixes ActivitiesTemplate\n * @mixes ItemDescriptionTemplate\n *\n * @property {string} ability                    Override of default spellcasting ability.\n * @property {ActivationData} activation         Casting time & conditions.\n * @property {DurationData} duration             Duration of the spell effect.\n * @property {number} level                      Base level of the spell.\n * @property {object} materials                  Details on material components required for this spell.\n * @property {string} materials.value            Description of the material components required for casting.\n * @property {boolean} materials.consumed        Are these material components consumed during casting?\n * @property {number} materials.cost             GP cost for the required components.\n * @property {number} materials.supply           Quantity of this component available.\n * @property {string} method                     The spellcasting method this spell was gained via.\n * @property {number} prepared                   The spell availability.\n * @property {Set<string>} properties            General components and tags for this spell.\n * @property {RangeData} range                   Range of the spell\n * @property {string} school                     Magical school to which this spell belongs.\n * @property {string} sourceClass                Associated spellcasting class when this spell is on an actor.\n * @property {TargetData} target                 Information on area and individual targets.\n */\nexport default class SpellData extends ItemDataModel.mixin(ActivitiesTemplate, ItemDescriptionTemplate) {\n\n  /* -------------------------------------------- */\n  /*  Model Configuration                         */\n  /* -------------------------------------------- */\n\n  /** @override */\n  static LOCALIZATION_PREFIXES = [\n    \"DND5E.ACTIVATION\", \"DND5E.DURATION\", \"DND5E.RANGE\", \"DND5E.SOURCE\", \"DND5E.TARGET\"\n  ];\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static defineSchema() {\n    return this.mergeSchema(super.defineSchema(), {\n      ability: new StringField({ label: \"DND5E.SpellAbility\" }),\n      activation: new ActivationField(),\n      duration: new DurationField(),\n      level: new NumberField({ required: true, integer: true, initial: 1, min: 0, label: \"DND5E.SpellLevel\" }),\n      materials: new SchemaField({\n        value: new StringField({ required: true, label: \"DND5E.SpellMaterialsDescription\" }),\n        consumed: new BooleanField({ required: true, label: \"DND5E.SpellMaterialsConsumed\" }),\n        cost: new NumberField({ required: true, initial: 0, min: 0, label: \"DND5E.SpellMaterialsCost\" }),\n        supply: new NumberField({ required: true, initial: 0, min: 0, label: \"DND5E.SpellMaterialsSupply\" })\n      }, { label: \"DND5E.SpellMaterials\" }),\n      method: new StringField({ required: true, initial: \"\", label: \"DND5E.SpellPreparation.Method\" }),\n      prepared: new NumberField({ required: true, nullable: false, integer: true, min: 0, initial: 0 }),\n      properties: new SetField(new StringField(), { label: \"DND5E.SpellComponents\" }),\n      range: new RangeField(),\n      school: new StringField({ required: true, label: \"DND5E.SpellSchool\" }),\n      sourceClass: new StringField({ label: \"DND5E.SpellSourceClass\" }),\n      target: new TargetField()\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static metadata = Object.freeze(foundry.utils.mergeObject(super.metadata, {\n    enchantable: true,\n    hasEffects: true\n  }, { inplace: false }));\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  static get compendiumBrowserFilters() {\n    return new Map([\n      [\"level\", {\n        label: \"DND5E.Level\",\n        type: \"range\",\n        config: {\n          keyPath: \"system.level\",\n          min: 0,\n          max: Object.keys(CONFIG.DND5E.spellLevels).length - 1\n        }\n      }],\n      [\"school\", {\n        label: \"DND5E.School\",\n        type: \"set\",\n        config: {\n          choices: CONFIG.DND5E.spellSchools,\n          keyPath: \"system.school\"\n        }\n      }],\n      [\"spelllist\", {\n        label: \"TYPES.JournalEntryPage.spells\",\n        type: \"set\",\n        createFilter: (filters, value, def) => {\n          let include = new Set();\n          let exclude = new Set();\n          for ( const [k, v] of Object.entries(value ?? {}) ) {\n            const list = dnd5e.registry.spellLists.forType(...k.split(\":\"));\n            if ( !list || (v === 0) ) continue;\n            if ( v === 1 ) include = include.union(list.identifiers);\n            else if ( v === -1 ) exclude = exclude.union(list.identifiers);\n          }\n          if ( include.size ) filters.push({ k: \"system.identifier\", o: \"in\", v: include });\n          if ( exclude.size ) filters.push({ o: \"NOT\", v: { k: \"system.identifier\", o: \"in\", v: exclude } });\n        },\n        config: {\n          choices: dnd5e.registry.spellLists.options.reduce((obj, entry) => {\n            const [type, identifier] = entry.value.split(\":\");\n            const list = dnd5e.registry.spellLists.forType(type, identifier);\n            if ( list?.identifiers.size ) obj[entry.value] = {\n              label: entry.label, group: CONFIG.DND5E.spellListTypes[type]\n            };\n            return obj;\n          }, {}),\n          collapseGroup: group => group !== CONFIG.DND5E.spellListTypes.class\n        }\n      }],\n      [\"properties\", this.compendiumBrowserPropertiesFilter(\"spell\")]\n    ]);\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Migrations                             */\n  /* -------------------------------------------- */\n\n  /**\n   * @deprecated since 5.1\n   * @ignore\n   */\n  get preparation() {\n    foundry.utils.logCompatibilityWarning(\"SpellData#preparation is deprecated. Please use SpellData#method in \"\n      + \"place of preparation.mode and SpellData#prepared in place of preparation.prepared.\",\n    { since: \"DnD5e 5.1\", until: \"DnD5e 5.4\" });\n    if ( this.prepared === 2 ) return { mode: \"always\", prepared: 1 };\n    if ( this.method === \"spell\" ) return { mode: \"prepared\", prepared: Boolean(this.prepared) };\n    return { mode: this.method, prepared: Boolean(this.prepared) };\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static _migrateData(source) {\n    super._migrateData(source);\n    ActivitiesTemplate.migrateActivities(source);\n    SpellData.#migrateActivation(source);\n    SpellData.#migrateTarget(source);\n    SpellData.#migratePreparation(source);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Migrate the component object to be 'properties' instead.\n   * @param {object} source  The candidate source data from which the model will be constructed.\n   */\n  static _migrateComponentData(source) {\n    const components = filteredKeys(source.system?.components ?? {});\n    if ( components.length ) {\n      foundry.utils.setProperty(source, \"flags.dnd5e.migratedProperties\", components);\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Migrate activation data.\n   * Added in DnD5e 4.0.0.\n   * @param {object} source  The candidate source data from which the model will be constructed.\n   */\n  static #migrateActivation(source) {\n    if ( source.activation?.cost ) source.activation.value = source.activation.cost;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Migrate target data.\n   * Added in DnD5e 4.0.0.\n   * @param {object} source  The candidate source data from which the model will be constructed.\n   */\n  static #migrateTarget(source) {\n    if ( !(\"target\" in source) ) return;\n    source.target.affects ??= {};\n    source.target.template ??= {};\n\n    if ( \"units\" in source.target ) source.target.template.units = source.target.units;\n    if ( \"width\" in source.target ) source.target.template.width = source.target.width;\n\n    const type = source.target.type ?? source.target.template.type ?? source.target.affects.type;\n    if ( type in CONFIG.DND5E.areaTargetTypes ) {\n      if ( \"type\" in source.target ) source.target.template.type = type;\n      if ( \"value\" in source.target ) source.target.template.size = source.target.value;\n    } else if ( type in CONFIG.DND5E.individualTargetTypes ) {\n      if ( \"type\" in source.target ) source.target.affects.type = type;\n      if ( \"value\" in source.target ) source.target.affects.count = source.target.value;\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Migrate preparation data.\n   * @since 5.1.0\n   * @param {object} source  The candidate source data from which the model will be constructed.\n   */\n  static #migratePreparation(source) {\n    if ( source.preparation === undefined ) return;\n    if ( source.preparation.mode === \"always\" ) {\n      if ( !(\"method\" in source) ) source.method = \"spell\";\n      if ( !(\"prepared\" in source) ) source.prepared = 2;\n    } else {\n      if ( !(\"method\" in source) ) {\n        if ( source.preparation.mode === \"prepared\" ) source.method = \"spell\";\n        else if ( source.preparation.mode ) source.method = source.preparation.mode;\n      }\n      if ( (typeof source.preparation.prepared === \"boolean\") && !(\"prepared\" in source) ) {\n        source.prepared = Number(source.preparation.prepared);\n      }\n    }\n    delete source.preparation;\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Preparation                            */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareDerivedData() {\n    super.prepareDerivedData();\n    this.prepareDescriptionData();\n    this.properties.add(\"mgc\");\n    this.duration.concentration = this.properties.has(\"concentration\");\n\n    const labels = this.parent.labels ??= {};\n    labels.level = CONFIG.DND5E.spellLevels[this.level];\n    labels.school = CONFIG.DND5E.spellSchools[this.school]?.label;\n    if ( this.properties.has(\"material\") ) labels.materials = this.materials.value;\n\n    labels.components = this.properties.reduce((obj, c) => {\n      const config = this.validProperties.has(c) ? CONFIG.DND5E.itemProperties[c] : null;\n      if ( !config ) return obj;\n      const { abbreviation: abbr, label, icon } = config;\n      obj.all.push({ abbr, icon, tag: config.isTag });\n      if ( config.isTag ) obj.tags.push(label);\n      else obj.vsm.push(abbr);\n      return obj;\n    }, { all: [], vsm: [], tags: [] });\n    labels.components.vsm = game.i18n.getListFormatter({ style: \"narrow\" }).format(labels.components.vsm);\n\n    const uuid = this.parent._stats.compendiumSource ?? this.parent.uuid;\n    Object.defineProperty(labels, \"classes\", {\n      get() {\n        return Array.from(dnd5e.registry.spellLists.forSpell(uuid))\n          .filter(list => list.metadata.type === \"class\")\n          .map(list => list.name)\n          .sort((lhs, rhs) => lhs.localeCompare(rhs, game.i18n.lang));\n      },\n      configurable: true\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareFinalData() {\n    const rollData = this.parent.getRollData({ deterministic: true });\n    const labels = this.parent.labels ??= {};\n    this.prepareFinalActivityData(rollData);\n    ActivationField.prepareData.call(this, rollData, labels);\n    DurationField.prepareData.call(this, rollData, labels);\n    RangeField.prepareData.call(this, rollData, labels);\n    TargetField.prepareData.call(this, rollData, labels);\n\n    // Count preparations.\n    if ( this.parent.isOwned && this.sourceClass && this.countsPrepared ) {\n      const sourceClass = this.parent.actor.spellcastingClasses[this.sourceClass];\n      const sourceSubclass = sourceClass?.subclass;\n      if ( sourceClass ) sourceClass.system.spellcasting.preparation.value++;\n      if ( sourceSubclass ) sourceSubclass.system.spellcasting.preparation.value++;\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async getCardData(enrichmentOptions={}) {\n    const context = await super.getCardData(enrichmentOptions);\n    context.isSpell = true;\n    context.subtitle = [this.parent.labels.level, CONFIG.DND5E.spellSchools[this.school]?.label].filterJoin(\" &bull; \");\n    const { activation, components, duration, range, target } = this.parent.labels;\n    context.properties = [components?.vsm, activation, duration, range, target].filter(_ => _);\n    if ( !this.properties.has(\"material\") ) delete context.materials;\n    return context;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async getFavoriteData() {\n    return foundry.utils.mergeObject(await super.getFavoriteData(), {\n      subtitle: [this.parent.labels.components.vsm, this.parent.labels.activation],\n      modifier: this.parent.labels.modifier,\n      range: this.range,\n      save: this.activities.getByType(\"save\")[0]?.save\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async getSheetData(context) {\n    context.properties.active = [...(this.parent.labels?.components?.tags ?? []), ...(context.labels.classes ?? [])];\n    context.subtitles = [\n      { label: context.labels.level },\n      { label: context.labels.school },\n      { label: CONFIG.DND5E.spellcasting[this.method]?.label }\n    ];\n\n    context.parts = [\"dnd5e.details-spell\", \"dnd5e.field-uses\"];\n\n    // Default Ability & Spellcasting Classes\n    if ( this.parent.actor ) {\n      const ability = CONFIG.DND5E.abilities[\n        this.parent.actor.spellcastingClasses[this.sourceClass]?.spellcasting.ability\n          ?? this.parent.actor.system.attributes?.spellcasting\n      ]?.label?.toLowerCase();\n      if ( ability ) context.defaultAbility = game.i18n.format(\"DND5E.DefaultSpecific\", { default: ability });\n      else context.defaultAbility = game.i18n.localize(\"DND5E.Default\");\n      context.spellcastingClasses = Object.entries(this.parent.actor.spellcastingClasses ?? {})\n        .map(([value, cls]) => ({ value, label: cls.name }));\n    }\n\n    // Activation\n    context.activationTypes = [\n      ...Object.entries(CONFIG.DND5E.activityActivationTypes).map(([value, { label, group }]) => {\n        return { value, label, group };\n      }),\n      { value: \"\", label: \"DND5E.NoneActionLabel\" }\n    ];\n\n    // Duration\n    context.durationUnits = [\n      ...Object.entries(CONFIG.DND5E.specialTimePeriods).map(([value, label]) => ({ value, label })),\n      ...Object.entries(CONFIG.DND5E.scalarTimePeriods).map(([value, label]) => {\n        return { value, label, group: \"DND5E.DurationTime\" };\n      }),\n      ...Object.entries(CONFIG.DND5E.permanentTimePeriods).map(([value, label]) => {\n        return { value, label, group: \"DND5E.DurationPermanent\" };\n      })\n    ];\n\n    // Targets\n    context.targetTypes = [\n      ...Object.entries(CONFIG.DND5E.individualTargetTypes).map(([value, { label }]) => {\n        return { value, label, group: \"DND5E.TargetTypeIndividual\" };\n      }),\n      ...Object.entries(CONFIG.DND5E.areaTargetTypes).map(([value, { label }]) => {\n        return { value, label, group: \"DND5E.TargetTypeArea\" };\n      })\n    ];\n    context.scalarTarget = this.target.affects.type\n      && (CONFIG.DND5E.individualTargetTypes[this.target.affects.type]?.scalar !== false);\n    context.affectsPlaceholder = game.i18n.localize(`DND5E.TARGET.Count.${\n      this.target?.template?.type ? \"Every\" : \"Any\"}`);\n    context.dimensions = this.target.template.dimensions;\n    // TODO: Ensure this behaves properly with enchantments, will probably need source target data\n\n    // Range\n    context.rangeTypes = [\n      ...Object.entries(CONFIG.DND5E.rangeTypes).map(([value, label]) => ({ value, label })),\n      ...Object.entries(CONFIG.DND5E.movementUnits).map(([value, { label }]) => {\n        return { value, label, group: \"DND5E.RangeDistance\" };\n      })\n    ];\n\n    // Spellcasting\n    context.canPrepare = this.canPrepare;\n    context.spellcastingMethods = Object.values(CONFIG.DND5E.spellcasting).map(({ key, label }) => {\n      return { label, value: key };\n    });\n    if ( this.method && !(this.method in CONFIG.DND5E.spellcasting) ) {\n      context.spellcastingMethods.push({ label: this.method, value: this.method });\n    }\n  }\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * Attack classification of this spell.\n   * @type {\"spell\"}\n   */\n  get attackClassification() {\n    return \"spell\";\n  }\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  get availableAbilities() {\n    if ( this.ability ) return new Set([this.ability]);\n    const spellcasting = this.parent?.actor?.spellcastingClasses[this.sourceClass]?.spellcasting.ability\n      ?? this.parent?.actor?.system.attributes?.spellcasting;\n    return new Set(spellcasting ? [spellcasting] : []);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  get canConfigureScaling() {\n    return this.level > 0;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Whether the spell can be prepared.\n   * @type {boolean}\n   */\n  get canPrepare() {\n    return !!CONFIG.DND5E.spellcasting[this.method]?.prepares;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  get canScale() {\n    return (this.level > 0) && !!CONFIG.DND5E.spellcasting[this.method]?.slots;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  get canScaleDamage() {\n    return true;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Properties displayed in chat.\n   * @type {string[]}\n   */\n  get chatProperties() {\n    return [\n      this.parent.labels.level,\n      this.parent.labels.components.vsm + (this.parent.labels.materials ? ` (${this.parent.labels.materials})` : \"\"),\n      ...this.parent.labels.components.tags,\n      this.parent.labels.duration\n    ];\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Whether this spell counts towards a class' number of prepared spells.\n   * @type {boolean}\n   */\n  get countsPrepared() {\n    return !!CONFIG.DND5E.spellcasting[this.method]?.prepares\n      && (this.level > 0)\n      && (this.prepared === CONFIG.DND5E.spellPreparationStates.prepared.value);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  get _typeAbilityMod() {\n    return this.availableAbilities.first() ?? \"int\";\n  }\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  get criticalThreshold() {\n    return this.parent?.actor?.flags.dnd5e?.spellCriticalThreshold ?? Infinity;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Retrieve a linked activity that granted this spell using the stored `cachedFor` value.\n   * @returns {Activity|null}\n   */\n  get linkedActivity() {\n    const relative = this.parent.actor;\n    const uuid = this.parent.getFlag(\"dnd5e\", \"cachedFor\");\n    if ( !relative || !uuid ) return null;\n    const data = foundry.utils.parseUuid(uuid, { relative });\n    const [itemId, , activityId] = (data?.embedded ?? []).slice(-3);\n    return relative.items.get(itemId)?.system.activities?.get(activityId) ?? null;\n    // TODO: Swap back to fromUuidSync once https://github.com/foundryvtt/foundryvtt/issues/11214 is resolved\n    // return fromUuidSync(this.parent.getFlag(\"dnd5e\", \"cachedFor\"), { relative, strict: false }) ?? null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * The proficiency multiplier for this item.\n   * @returns {number}\n   */\n  get proficiencyMultiplier() {\n    return 1;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  get scalingIncrease() {\n    if ( this.level !== 0 ) return null;\n    return Math.floor(((this.parent.actor?.system.cantripLevel?.(this.parent) ?? 0) + 1) / 6);\n  }\n\n  /* -------------------------------------------- */\n  /*  Drag & Drop                                 */\n  /* -------------------------------------------- */\n\n  /** @override */\n  static onDropCreate(event, actor, itemData) {\n    if ( ![\"npc\", \"character\"].includes(actor.type) ) return;\n\n    // Determine the section it is dropped on, if any.\n    let header = event.target.closest(\".items-header\"); // Dropped directly on the header.\n    if ( !header ) {\n      const list = event.target.closest(\".item-list\"); // Dropped inside an existing list.\n      header = list?.previousElementSibling;\n    }\n    const { method } = header?.closest(\"[data-level]\")?.dataset ?? {};\n\n    // Determine the actor's spell slot progressions, if any.\n    const spellcastKeys = Object.keys(CONFIG.DND5E.spellcasting);\n    const progs = Object.values(actor.classes).reduce((acc, cls) => {\n      const type = cls.spellcasting?.type;\n      if ( spellcastKeys.includes(type) ) acc.add(type);\n      return acc;\n    }, new Set());\n\n    const { system } = itemData;\n    const methods = CONFIG.DND5E.spellcasting;\n    if ( methods[method] ) system.method = method;\n    else if ( progs.size ) system.method = progs.first();\n    else if ( actor.system.attributes.spell?.level ) system.method = \"spell\";\n  }\n\n  /* -------------------------------------------- */\n  /*  Helpers                                     */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  getRollData(...options) {\n    const data = super.getRollData(...options);\n    data.item.level = data.item.level + (this.parent.getFlag(\"dnd5e\", \"scaling\") ?? 0);\n    return data;\n  }\n\n  /* -------------------------------------------- */\n  /*  Socket Event Handlers                       */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _preCreate(data, options, user) {\n    if ( (await super._preCreate(data, options, user)) === false ) return false;\n    if ( !this.parent.isEmbedded ) return;\n    const system = data.system ?? {};\n\n    // Set as prepared for NPCs, and not prepared for PCs\n    if ( [\"character\", \"npc\"].includes(this.parent.actor.type) && !(\"prepared\" in system) ) {\n      this.updateSource({ prepared: Number(this.parent.actor.type === \"npc\" || (this.level < 1)) });\n    }\n\n    if ( [\"atwill\", \"innate\"].includes(system.method) || this.sourceClass ) return;\n    const classes = new Set(Object.keys(this.parent.actor.spellcastingClasses));\n    if ( !classes.size ) return;\n\n    // Set the source class, and ensure the preparation mode matches if adding a prepared spell to an alt class\n    const setClass = cls => {\n      this.updateSource({ sourceClass: cls, method: this.parent.actor.classes[cls].spellcasting.type });\n    };\n\n    // If preparation mode matches an alt spellcasting type and matching class exists, set as that class\n    if ( (system.method !== \"spell\") && (system.method in CONFIG.DND5E.spellcasting) ) {\n      const altClasses = classes.filter(i => this.parent.actor.classes[i].spellcasting.type === system.method);\n      if ( altClasses.size === 1 ) setClass(altClasses.first());\n      return;\n    }\n\n    // If only a single spellcasting class is present, use that\n    if ( classes.size === 1 ) {\n      setClass(classes.first());\n      return;\n    }\n\n    // Create intersection of spellcasting classes and classes that offer the spell\n    const spellClasses = new Set(\n      dnd5e.registry.spellLists.forSpell(this.parent._stats.compendiumSource).map(l => l.metadata.identifier)\n    );\n    const intersection = classes.intersection(spellClasses);\n    if ( intersection.size === 1 ) setClass(intersection.first());\n  }\n}\n",
      "module/documents/item.mjs": "import ActivityChoiceDialog from \"../applications/activity/activity-choice-dialog.mjs\";\nimport AdvancementManager from \"../applications/advancement/advancement-manager.mjs\";\nimport AdvancementConfirmationDialog from \"../applications/advancement/advancement-confirmation-dialog.mjs\";\nimport ContextMenu5e from \"../applications/context-menu.mjs\";\nimport CreateScrollDialog from \"../applications/item/create-scroll-dialog.mjs\";\nimport ClassData from \"../data/item/class.mjs\";\nimport ContainerData from \"../data/item/container.mjs\";\nimport EquipmentData from \"../data/item/equipment.mjs\";\nimport SpellData from \"../data/item/spell.mjs\";\nimport ActivitiesTemplate from \"../data/item/templates/activities.mjs\";\nimport PhysicalItemTemplate from \"../data/item/templates/physical-item.mjs\";\nimport { staticID } from \"../utils.mjs\";\nimport Scaling from \"./scaling.mjs\";\nimport Proficiency from \"./actor/proficiency.mjs\";\nimport SelectChoices from \"./actor/select-choices.mjs\";\nimport Advancement from \"./advancement/advancement.mjs\";\nimport SystemDocumentMixin from \"./mixins/document.mjs\";\n\nconst TextEditor = foundry.applications.ux.TextEditor.implementation;\n\n/**\n * Override and extend the basic Item implementation.\n */\nexport default class Item5e extends SystemDocumentMixin(Item) {\n\n  /**\n   * Caches an item linked to this one, such as a subclass associated with a class.\n   * @type {Item5e}\n   * @private\n   */\n  _classLink;\n\n  /* -------------------------------------------- */\n\n  /**\n   * An object that tracks which tracks the changes to the data model which were applied by active effects\n   * @type {object}\n   */\n  overrides = this.overrides ?? {};\n\n  /* -------------------------------------------- */\n\n  /**\n   * Types that can be selected within the compendium browser.\n   * @param {object} [options={}]\n   * @param {Set<string>} [options.chosen]  Types that have been selected.\n   * @returns {SelectChoices}\n   */\n  static compendiumBrowserTypes({ chosen=new Set() }={}) {\n    const [generalTypes, physicalTypes] = Item.TYPES.reduce(([g, p], t) => {\n      if ( ![CONST.BASE_DOCUMENT_TYPE, \"backpack\"].includes(t) ) {\n        if ( \"inventorySection\" in (CONFIG.Item.dataModels[t] ?? {}) ) p.push(t);\n        else g.push(t);\n      }\n      return [g, p];\n    }, [[], []]);\n\n    const makeChoices = (types, categoryChosen) => types.reduce((obj, type) => {\n      obj[type] = {\n        label: CONFIG.Item.typeLabels[type],\n        chosen: chosen.has(type) || categoryChosen\n      };\n      return obj;\n    }, {});\n    const choices = makeChoices(generalTypes);\n    choices.physical = {\n      label: game.i18n.localize(\"DND5E.ITEM.Category.Physical\"),\n      children: makeChoices(physicalTypes, chosen.has(\"physical\"))\n    };\n    return new SelectChoices(choices);\n  }\n\n  /* -------------------------------------------- */\n  /*  Migrations                                  */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  _initializeSource(data, options={}) {\n    if ( data instanceof foundry.abstract.DataModel ) data = data.toObject();\n\n    // Migrate backpack -> container.\n    if ( data.type === \"backpack\" ) {\n      data.type = \"container\";\n      foundry.utils.setProperty(data, \"flags.dnd5e.persistSourceMigration\", true);\n    }\n\n    /**\n     * A hook event that fires before source data is initialized for an Item in a compendium.\n     * @function dnd5e.initializeItemSource\n     * @memberof hookEvents\n     * @param {Item5e} item     Item for which the data is being initialized.\n     * @param {object} data     Source data being initialized.\n     * @param {object} options  Additional data initialization options.\n     */\n    if ( options.pack || options.parent?.pack ) Hooks.callAll(\"dnd5e.initializeItemSource\", this, data, options);\n\n    if ( data.type === \"spell\" ) {\n      return super._initializeSource(new Proxy(data, {\n        set(target, prop, value, receiver) {\n          if ( prop === \"preparation\" ) console.trace(value);\n          return Reflect.set(target, prop, value, receiver);\n        },\n\n        defineProperty(target, prop, attributes) {\n          if ( prop === \"preparation\" ) console.trace(attributes);\n          return Reflect.defineProperty(target, prop, attributes);\n        }\n      }), options);\n    }\n\n    return super._initializeSource(data, options);\n  }\n\n  /* -------------------------------------------- */\n  /*  Item Properties                             */\n  /* -------------------------------------------- */\n\n  /**\n   * Which ability score modifier is used by this item?\n   * @type {string|null}\n   * @see {@link ActionTemplate#abilityMod}\n   */\n  get abilityMod() {\n    return this.system.abilityMod ?? null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should deletion of this item be allowed? Doesn't prevent programatic deletion, but affects UI controls.\n   * @type {boolean}\n   */\n  get canDelete() {\n    return !this.flags.dnd5e?.cachedFor;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should duplication of this item be allowed? Doesn't prevent programatic duplication, but affects UI controls.\n   * @type {boolean}\n   */\n  get canDuplicate() {\n    return !this.system.metadata?.singleton && ![\"class\", \"subclass\"].includes(this.type)\n      && !this.flags.dnd5e?.cachedFor;\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * The item that contains this item, if it is in a container. Returns a promise if the item is located\n   * in a compendium pack.\n   * @type {Item5e|Promise<Item5e>|void}\n   */\n  get container() {\n    if ( !this.system.container ) return;\n    if ( this.isEmbedded ) return this.actor.items.get(this.system.container);\n    if ( this.pack ) return game.packs.get(this.pack).getDocument(this.system.container);\n    return game.items.get(this.system.container);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * What is the critical hit threshold for this item, if applicable?\n   * @type {number|null}\n   * @see {@link ActionTemplate#criticalThreshold}\n   */\n  get criticalThreshold() {\n    return this.system.criticalThreshold ?? null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does this item support advancement and have advancements defined?\n   * @type {boolean}\n   */\n  get hasAdvancement() {\n    return !!this.system.advancement?.length;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement an attack roll as part of its usage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#hasAttack}\n   */\n  get hasAttack() {\n    return this.system.hasAttack ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this Item limited in its ability to be used by charges or by recharge?\n   * @type {boolean}\n   * @see {@link ActivatedEffectTemplate#hasLimitedUses}\n   * @see {@link FeatData#hasLimitedUses}\n   */\n  get hasLimitedUses() {\n    return this.system.hasLimitedUses ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement a saving throw as part of its usage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#hasSave}\n   */\n  get hasSave() {\n    return this.system.hasSave ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Return an item's identifier.\n   * @type {string}\n   */\n  get identifier() {\n    if ( this.system.identifier ) return this.system.identifier;\n    const identifier = this.name.replaceAll(/(\\w+)([\\\\|/])(\\w+)/g, \"$1-$3\");\n    return identifier.slugify({ strict: true });\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * Is this Item an activatable item?\n   * @type {boolean}\n   */\n  get isActive() {\n    return this.system.isActive ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this item any of the armor subtypes?\n   * @type {boolean}\n   * @see {@link EquipmentTemplate#isArmor}\n   */\n  get isArmor() {\n    return this.system.isArmor ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the item provide an amount of healing instead of conventional damage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#isHealing}\n   */\n  get isHealing() {\n    return this.system.isHealing ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this item a separate large object like a siege engine or vehicle component that is\n   * usually mounted on fixtures rather than equipped, and has its own AC and HP?\n   * @type {boolean}\n   * @see {@link EquipmentData#isMountable}\n   * @see {@link WeaponData#isMountable}\n   */\n  get isMountable() {\n    return this.system.isMountable ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is this class item the original class for the containing actor? If the item is not a class or it is not\n   * embedded in an actor then this will return `null`.\n   * @type {boolean|null}\n   */\n  get isOriginalClass() {\n    if ( this.type !== \"class\" || !this.isEmbedded || !this.parent.system.details?.originalClass ) return null;\n    return this.id === this.parent.system.details.originalClass;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement a versatile damage roll as part of its usage?\n   * @type {boolean}\n   * @see {@link ActionTemplate#isVersatile}\n   */\n  get isVersatile() {\n    return this.system.isVersatile ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is the item rechargeable?\n   * @type {boolean}\n   */\n  get hasRecharge() {\n    return this.hasLimitedUses && (this.system.uses?.recovery[0]?.period === \"recharge\");\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * Is the item on recharge cooldown?\n   * @type {boolean}\n   */\n  get isOnCooldown() {\n    return this.hasRecharge && (this.system.uses.value < 1);\n  }\n\n  /* --------------------------------------------- */\n\n  /**\n   * Does this item require concentration?\n   * @type {boolean}\n   */\n  get requiresConcentration() {\n    if ( this.system.validProperties.has(\"concentration\") && this.system.properties.has(\"concentration\") ) return true;\n    return this.system.activities?.contents[0]?.duration.concentration ?? false;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Class associated with this subclass. Always returns null on non-subclass or non-embedded items.\n   * @type {Item5e|null}\n   */\n  get class() {\n    if ( !this.isEmbedded || (this.type !== \"subclass\") ) return null;\n    const cid = this.system.classIdentifier;\n    return this._classLink ??= this.parent.items.find(i => (i.type === \"class\") && (i.identifier === cid));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Subclass associated with this class. Always returns null on non-class or non-embedded items.\n   * @type {Item5e|null}\n   */\n  get subclass() {\n    if ( !this.isEmbedded || (this.type !== \"class\") ) return null;\n    const items = this.parent.items;\n    const cid = this.identifier;\n    return this._classLink ??= items.find(i => (i.type === \"subclass\") && (i.system.classIdentifier === cid));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Retrieve scale values for current level from advancement data.\n   * @type {Record<string, ScaleValueType>}\n   */\n  get scaleValues() {\n    if ( !this.advancement.byType.ScaleValue ) return {};\n    const item = [\"class\", \"subclass\"].includes(this.advancementRootItem?.type) ? this.advancementRootItem : this;\n    const level = item.type === \"class\" ? item.system.levels : item.type === \"subclass\" ? item.class?.system.levels\n      : this.parent?.system.details.level ?? 0;\n    return this.advancement.byType.ScaleValue.reduce((obj, advancement) => {\n      obj[advancement.identifier] = advancement.valueForLevel(level);\n      return obj;\n    }, {});\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Scaling increase for this item based on flag or item-type specific details.\n   * @type {number}\n   */\n  get scalingIncrease() {\n    return this.system?.scalingIncrease ?? this.getFlag(\"dnd5e\", \"scaling\") ?? 0;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Spellcasting details for a class or subclass.\n   *\n   * @typedef {object} SpellcastingDescription\n   * @property {string} type              Spellcasting method as defined in `CONFIG.DND5E.spellcasting`.\n   * @property {string|null} progression  Progression within the specified spellcasting type if supported.\n   * @property {string} ability           Ability used when casting spells from this class or subclass.\n   * @property {number|null} levels       Number of levels of this class or subclass's class if embedded.\n   */\n\n  /**\n   * Retrieve the spellcasting for a class or subclass. For classes, this will return the spellcasting\n   * of the subclass if it overrides the class. For subclasses, this will return the class's spellcasting\n   * if no spellcasting is defined on the subclass.\n   * @type {SpellcastingDescription|null}  Spellcasting object containing progression & ability.\n   */\n  get spellcasting() {\n    const spellcasting = this.system.spellcasting;\n    if ( !spellcasting ) return null;\n    const isSubclass = this.type === \"subclass\";\n    const classSC = isSubclass ? this.class?.system.spellcasting : spellcasting;\n    const subclassSC = isSubclass ? spellcasting : this.subclass?.system.spellcasting;\n    const finalSC = foundry.utils.deepClone(\n      ( subclassSC && (subclassSC.progression !== \"none\") ) ? subclassSC : classSC\n    );\n    return finalSC ?? null;\n  }\n\n  /* -------------------------------------------- */\n  /*  Active Effects                              */\n  /* -------------------------------------------- */\n\n  /**\n   * Get all ActiveEffects that may apply to this Item.\n   * @yields {ActiveEffect5e}\n   * @returns {Generator<ActiveEffect5e, void, void>}\n   */\n  *allApplicableEffects() {\n    for ( const effect of this.effects ) {\n      if ( effect.isAppliedEnchantment ) yield effect;\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Apply any transformation to the Item data which are caused by enchantment Effects.\n   */\n  applyActiveEffects() {\n    const overrides = {};\n\n    // Organize non-disabled effects by their application priority\n    const changes = [];\n    for ( const effect of this.allApplicableEffects() ) {\n      if ( !effect.active ) continue;\n      changes.push(...effect.changes.map(change => {\n        const c = foundry.utils.deepClone(change);\n        c.effect = effect;\n        c.priority ??= c.mode * 10;\n        return c;\n      }));\n    }\n    changes.sort((a, b) => a.priority - b.priority);\n\n    // Apply all changes\n    for ( const change of changes ) {\n      if ( !change.key ) continue;\n      const changes = change.effect.apply(this, change);\n      Object.assign(overrides, changes);\n    }\n\n    // Expand the set of final overrides\n    this.overrides = foundry.utils.expandObject(overrides);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should this item's active effects be suppressed.\n   * @type {boolean}\n   */\n  get areEffectsSuppressed() {\n    const requireEquipped = (this.type !== \"consumable\")\n      || [\"rod\", \"trinket\", \"wand\"].includes(this.system.type.value);\n    if ( requireEquipped && (this.system.equipped === false) ) return true;\n    return !this.system.attuned && (this.system.attunement === \"required\");\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Initialization                         */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  clone(data={}, options={}) {\n    if ( options.save ) return super.clone(data, options);\n    if ( this.parent ) this.parent._embeddedPreparation = true;\n    const item = super.clone(data, options);\n    if ( item.parent ) {\n      delete item.parent._embeddedPreparation;\n      item.prepareFinalAttributes();\n    }\n    return item;\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Preparation                            */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareBaseData() {\n    this.labels = {};\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareEmbeddedDocuments() {\n    super.prepareEmbeddedDocuments();\n    for ( const activity of this.system.activities ?? [] ) activity.prepareData();\n    for ( const advancement of this.system.advancement ?? [] ) {\n      if ( !(advancement instanceof Advancement) ) continue;\n      advancement.prepareData();\n    }\n    if ( !this.actor || this.actor._embeddedPreparation ) this.applyActiveEffects();\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareDerivedData() {\n    this.labels ??= {};\n    super.prepareDerivedData();\n\n    // Clear out linked item cache\n    this._classLink = undefined;\n\n    // Advancement\n    this._prepareAdvancement();\n\n    // Item Properties\n    if ( this.system.properties ) {\n      this.labels.properties = this.system.properties.reduce((acc, prop) => {\n        if ( (prop === \"concentration\") && !this.requiresConcentration ) return acc;\n        acc.push({\n          abbr: prop,\n          label: CONFIG.DND5E.itemProperties[prop]?.label,\n          icon: CONFIG.DND5E.itemProperties[prop]?.icon\n        });\n        return acc;\n      }, []);\n    }\n\n    // Un-owned items can have their final preparation done here, otherwise this needs to happen in the owning Actor\n    if ( !this.isOwned ) this.prepareFinalAttributes();\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare advancement objects from stored advancement data.\n   * @protected\n   */\n  _prepareAdvancement() {\n    const minAdvancementLevel = [\"class\", \"subclass\"].includes(this.type) ? 1 : 0;\n    this.advancement = {\n      byId: {},\n      byLevel: Object.fromEntries(\n        Array.fromRange(CONFIG.DND5E.maxLevel + 1).slice(minAdvancementLevel).map(l => [l, []])\n      ),\n      byType: {},\n      needingConfiguration: []\n    };\n    for ( const advancement of this.system.advancement ?? [] ) {\n      if ( !(advancement instanceof Advancement) ) continue;\n      this.advancement.byId[advancement.id] = advancement;\n      this.advancement.byType[advancement.type] ??= [];\n      this.advancement.byType[advancement.type].push(advancement);\n      advancement.levels.forEach(l => this.advancement.byLevel[l]?.push(advancement));\n      if ( !advancement.levels.length\n        || ((advancement.levels.length === 1) && (advancement.levels[0] < minAdvancementLevel)) ) {\n        this.advancement.needingConfiguration.push(advancement);\n      }\n    }\n    Object.entries(this.advancement.byLevel).forEach(([lvl, data]) => data.sort((a, b) => {\n      return a.sortingValueForLevel(lvl).localeCompare(b.sortingValueForLevel(lvl), game.i18n.lang);\n    }));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Determine an item's proficiency level based on its parent actor's proficiencies.\n   * @protected\n   */\n  _prepareProficiency() {\n    if ( ![\"spell\", \"weapon\", \"equipment\", \"tool\", \"feat\", \"consumable\"].includes(this.type) ) return;\n    if ( !this.actor?.system.attributes?.prof ) {\n      this.system.prof = new Proficiency(0, 0);\n      return;\n    }\n\n    this.system.prof = new Proficiency(this.actor.system.attributes.prof, this.system.proficiencyMultiplier ?? 0);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Compute item attributes which might depend on prepared actor data. If this item is embedded this method will\n   * be called after the actor's data is prepared.\n   * Otherwise, it will be called at the end of `Item5e#prepareDerivedData`.\n   */\n  prepareFinalAttributes() {\n    this._prepareProficiency();\n    this.system.prepareFinalData?.();\n    this._prepareLabels();\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare top-level summary labels based on configured activities.\n   * @protected\n   */\n  _prepareLabels() {\n    const activations = this.labels.activations = [];\n    const attacks = this.labels.attacks = [];\n    const damages = this.labels.damages = [];\n    if ( !this.system.activities?.size ) return;\n    for ( const activity of this.system.activities ) {\n      if ( !(\"activation\" in activity) ) continue;\n      const activationLabels = activity.activationLabels;\n      if ( activationLabels ) activations.push({\n        ...activationLabels,\n        concentrationDuration: activity.labels.concentrationDuration,\n        ritualActivation: activity.labels.ritualActivation\n      });\n      if ( activity.type === \"attack\" ) {\n        const { toHit, modifier } = activity.labels;\n        attacks.push({ toHit, modifier });\n      }\n      if ( activity.labels?.damage?.length ) damages.push(...activity.labels.damage);\n    }\n    if ( activations.length ) {\n      Object.assign(this.labels, activations[0]);\n      delete activations[0].concentrationDuration;\n      delete activations[0].ritualActivation;\n    }\n    if ( attacks.length ) Object.assign(this.labels, attacks[0]);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Render a rich tooltip for this item.\n   * @param {EnrichmentOptions} [enrichmentOptions={}]  Options for text enrichment.\n   * @returns {Promise<{content: string, classes: string[]}>|null}\n   */\n  richTooltip(enrichmentOptions={}) {\n    return this.system.richTooltip?.() ?? null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Configuration data for an item usage being prepared.\n   *\n   * @typedef {object} ItemUseConfiguration\n   * @property {boolean} createMeasuredTemplate     Should this item create a template?\n   * @property {boolean} createSummons              Should this item create a summoned creature?\n   * @property {boolean} consumeResource            Should this item consume a (non-ammo) resource?\n   * @property {boolean} consumeSpellSlot           Should this item (a spell) consume a spell slot?\n   * @property {boolean} consumeUsage               Should this item consume its limited uses or recharge?\n   * @property {string} enchantmentProfile          ID of the enchantment to apply.\n   * @property {boolean} promptEnchantment          Does an enchantment profile need to be selected?\n   * @property {string|number|null} slotLevel       The spell slot type or level to consume by default.\n   * @property {string|null} summonsProfile         ID of the summoning profile to use.\n   * @property {number|null} resourceAmount         The amount to consume by default when scaling with consumption.\n   * @property {boolean} beginConcentrating         Should this item initiate concentration?\n   * @property {string|null} endConcentration       The id of the active effect to end concentration on, if any.\n   */\n\n  /**\n   * Additional options used for configuring item usage.\n   *\n   * @typedef {object} ItemUseOptions\n   * @property {boolean} configureDialog  Display a configuration dialog for the item usage, if applicable?\n   * @property {string} rollMode          The roll display mode with which to display (or not) the card.\n   * @property {boolean} createMessage    Whether to automatically create a chat message (if true) or simply return\n   *                                      the prepared chat message data (if false).\n   * @property {object} flags             Additional flags added to the chat message.\n   * @property {Event} event              The browser event which triggered the item usage, if any.\n   */\n\n  /**\n   * Trigger an Item usage, optionally creating a chat message with followup actions.\n   * @param {ActivityUseConfiguration} config       Configuration info for the activation.\n   * @param {boolean} [config.chooseActivity=false] Force the activity selection prompt unless the fast-forward modifier\n   *                                                is held.\n   * @param {ActivityDialogConfiguration} dialog    Configuration info for the usage dialog.\n   * @param {ActivityMessageConfiguration} message  Configuration info for the created chat message.\n   * @returns {Promise<ActivityUsageResults|ChatMessage|object|void>}  Returns the usage results for the triggered\n   *                                                                   activity, or the chat message if the Item had no\n   *                                                                   activities and was posted directly to chat.\n   */\n  async use(config={}, dialog={}, message={}) {\n    if ( this.pack ) return;\n\n    let event = config.event;\n    const activities = this.system.activities?.filter(a => a.canUse);\n    if ( activities?.length ) {\n      const { chooseActivity, ...activityConfig } = config;\n      let usageConfig = activityConfig;\n      let dialogConfig = dialog;\n      let messageConfig = message;\n      let activity = activities[0];\n      if ( ((activities.length > 1) || chooseActivity) && !event?.shiftKey ) {\n        activity = await ActivityChoiceDialog.create(this);\n      }\n      if ( !activity ) return;\n      return activity.use(usageConfig, dialogConfig, messageConfig);\n    }\n    if ( this.actor ) return this.displayCard(message);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Display the chat card for an Item as a Chat Message\n   * @param {Partial<ActivityMessageConfiguration>} [message]  Configuration info for the created chat message.\n   * @returns {Promise<ChatMessage5e|object|void>}\n   */\n  async displayCard(message={}) {\n    const context = {\n      actor: this.actor,\n      config: CONFIG.DND5E,\n      tokenId: this.actor.token?.uuid || null,\n      item: this,\n      data: await this.system.getCardData(),\n      isSpell: this.type === \"spell\"\n    };\n\n    const messageConfig = foundry.utils.mergeObject({\n      create: message?.createMessage ?? true,\n      data: {\n        content: await foundry.applications.handlebars.renderTemplate(\n          \"systems/dnd5e/templates/chat/item-card.hbs\", context\n        ),\n        flags: {\n          \"dnd5e.item\": { id: this.id, uuid: this.uuid, type: this.type }\n        },\n        speaker: ChatMessage.getSpeaker({ actor: this.actor, token: this.actor.token }),\n        title: this.name\n      },\n      rollMode: game.settings.get(\"core\", \"rollMode\")\n    }, message);\n\n    // Merge in the flags from options\n    if ( foundry.utils.getType(message.flags) === \"Object\" ) {\n      foundry.utils.mergeObject(messageConfig.data.flags, message.flags);\n      delete messageConfig.flags;\n    }\n\n    /**\n     * A hook event that fires before an item chat card is created without using an activity.\n     * @function dnd5e.preDisplayCard\n     * @memberof hookEvents\n     * @param {Item5e} item                           Item for which the card will be created.\n     * @param {ActivityMessageConfiguration} message  Configuration for the roll message.\n     * @returns {boolean}                             Return `false` to prevent the card from being displayed.\n     */\n    if ( Hooks.call(\"dnd5e.preDisplayCard\", this, messageConfig) === false ) return;\n    if ( Hooks.call(\"dnd5e.preDisplayCardV2\", this, messageConfig) === false ) return;\n\n    ChatMessage.applyRollMode(messageConfig.data, messageConfig.rollMode);\n    const card = messageConfig.create === false ? messageConfig.data : await ChatMessage.create(messageConfig.data);\n\n    /**\n     * A hook event that fires after an item chat card is created.\n     * @function dnd5e.displayCard\n     * @memberof hookEvents\n     * @param {Item5e} item                Item for which the chat card is being displayed.\n     * @param {ChatMessage5e|object} card  The created ChatMessage instance or ChatMessageData depending on whether\n     *                                     options.createMessage was set to `true`.\n     */\n    Hooks.callAll(\"dnd5e.displayCard\", this, card);\n\n    return card;\n  }\n\n  /* -------------------------------------------- */\n  /*  Chat Cards                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare an object of chat data used to display a card for the Item in the chat log.\n   * @param {object} htmlOptions    Options used by the TextEditor.enrichHTML function.\n   * @returns {object}              An object of chat data to render.\n   */\n  async getChatData(htmlOptions={}) {\n    const context = {};\n    let { identified, unidentified, description } = this.system;\n\n    // Rich text description\n    const isIdentified = identified !== false;\n    description = game.user.isGM || isIdentified ? description.value : unidentified?.description;\n    context.description = await TextEditor.enrichHTML(description ?? \"\", {\n      relativeTo: this,\n      rollData: this.getRollData(),\n      ...htmlOptions\n    });\n\n    // Type specific properties\n    context.properties = [\n      ...this.system.chatProperties ?? [],\n      ...this.system.equippableItemCardProperties ?? [],\n      ...Object.values(this.labels.activations?.[0] ?? {})\n    ].filter(p => p);\n\n    return context;\n  }\n\n  /* -------------------------------------------- */\n  /*  Item Rolls - Attack, Damage, Saves, Checks  */\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare data needed to roll a tool check and then pass it off to `d20Roll`.\n   * @param {D20RollConfiguration} [options]  Roll configuration options provided to the d20Roll function.\n   * @returns {Promise<Roll>}                 A Promise which resolves to the created Roll instance.\n   */\n  async rollToolCheck(options={}) {\n    if ( this.type !== \"tool\" ) throw new Error(\"Wrong item type!\");\n    return this.actor?.rollToolCheck({\n      ability: this.system.ability,\n      bonus: this.system.bonus,\n      prof: this.system.prof,\n      item: this,\n      tool: this.system.type.baseItem,\n      ...options\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * @inheritdoc\n   * @param {object} [options]\n   * @param {boolean} [options.deterministic] Whether to force deterministic values for data properties that could be\n   *                                          either a die term or a flat term.\n   */\n  getRollData({ deterministic=false }={}) {\n    let data;\n    if ( this.system.getRollData ) data = this.system.getRollData({ deterministic });\n    else data = { ...(this.actor?.getRollData({ deterministic }) ?? {}), item: { ...this.system } };\n    if ( data?.item ) {\n      data.item.flags = { ...this.flags };\n      data.item.name = this.name;\n    }\n    data.scaling = new Scaling(this.scalingIncrease);\n    return data;\n  }\n\n  /* -------------------------------------------- */\n  /*  Chat Message Helpers                        */\n  /* -------------------------------------------- */\n\n  /**\n   * Apply listeners to chat messages.\n   * @param {HTMLElement} html  Rendered chat message.\n   */\n  static chatListeners(html) {\n    html.addEventListener(\"click\", event => {\n      if ( event.target.closest(\"[data-context-menu]\") ) ContextMenu5e.triggerEvent(event);\n      else if ( event.target.closest(\".collapsible\") ) this._onChatCardToggleContent(event);\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle toggling the visibility of chat card content when the name is clicked\n   * @param {Event} event   The originating click event\n   * @private\n   */\n  static _onChatCardToggleContent(event) {\n    const header = event.target.closest(\".collapsible\");\n    if ( !event.target.closest(\".collapsible-content.card-content\") ) {\n      event.preventDefault();\n      header.classList.toggle(\"collapsed\");\n\n      // Clear the height from the chat popout container so that it appropriately resizes.\n      const popout = header.closest(\".chat-popout\");\n      if ( popout ) popout.style.height = \"\";\n    }\n  }\n\n  /* -------------------------------------------- */\n  /*  Activities & Advancements                   */\n  /* -------------------------------------------- */\n\n  /**\n   * Create a new activity of the specified type.\n   * @param {string} type                          Type of activity to create.\n   * @param {object} [data]                        Data to use when creating the activity.\n   * @param {object} [options={}]\n   * @param {boolean} [options.renderSheet=true]  Should the sheet be rendered after creation?\n   * @returns {Promise<ActivitySheet|null>}\n   */\n  async createActivity(type, data={}, { renderSheet=true }={}) {\n    if ( !this.system.activities ) return;\n\n    const config = CONFIG.DND5E.activityTypes[type];\n    if ( !config ) throw new Error(`${type} not found in CONFIG.DND5E.activityTypes`);\n    const cls = config.documentClass;\n\n    const createData = foundry.utils.deepClone(data);\n    const activity = new cls({ type, ...data }, { parent: this });\n    if ( activity._preCreate(createData) === false ) return;\n\n    await this.update({ [`system.activities.${activity.id}`]: activity.toObject() });\n    const created = this.system.activities.get(activity.id);\n    if ( renderSheet ) return created.sheet?.render({ force: true });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Update an activity belonging to this item.\n   * @param {string} id          ID of the activity to update.\n   * @param {object} updates     Updates to apply to this activity.\n   * @returns {Promise<Item5e>}  This item with the changes applied.\n   */\n  updateActivity(id, updates) {\n    if ( !this.system.activities ) return this;\n    if ( !this.system.activities.has(id) ) throw new Error(`Activity of ID ${id} could not be found to update`);\n    return this.update({ [`system.activities.${id}`]: updates });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Remove an activity from this item.\n   * @param {string} id          ID of the activity to remove.\n   * @returns {Promise<Item5e>}  This item with the changes applied.\n   */\n  async deleteActivity(id) {\n    const activity = this.system.activities?.get(id);\n    if ( !activity ) return this;\n    await Promise.allSettled(activity.constructor._apps.get(activity.uuid)?.map(a => a.close()) ?? []);\n    return this.update({ [`system.activities.-=${id}`]: null });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a new advancement of the specified type.\n   * @param {string} type                          Type of advancement to create.\n   * @param {object} [data]                        Data to use when creating the advancement.\n   * @param {object} [options]\n   * @param {boolean} [options.showConfig=true]    Should the new advancement's configuration application be shown?\n   * @param {boolean} [options.source=false]       Should a source-only update be performed?\n   * @returns {Promise<AdvancementConfig>|Item5e}  Promise for advancement config for new advancement if local\n   *                                               is `false`, or item with newly added advancement.\n   */\n  createAdvancement(type, data={}, { showConfig=true, source=false }={}) {\n    if ( !this.system.advancement ) return this;\n\n    const config = CONFIG.DND5E.advancementTypes[type];\n    if ( !config ) throw new Error(`${type} not found in CONFIG.DND5E.advancementTypes`);\n    const cls = config.documentClass;\n\n    if ( !config.validItemTypes.has(this.type) || !cls.availableForItem(this) ) {\n      throw new Error(`${type} advancement cannot be added to ${this.name}`);\n    }\n\n    const createData = foundry.utils.deepClone(data);\n    const advancement = new cls(data, {parent: this});\n    if ( advancement._preCreate(createData) === false ) return;\n\n    const advancementCollection = this.toObject().system.advancement;\n    advancementCollection.push(advancement.toObject());\n    if ( source ) return this.updateSource({\"system.advancement\": advancementCollection});\n    return this.update({ \"system.advancement\": advancementCollection }).then(() => {\n      if ( showConfig ) return this.advancement.byId[advancement.id]?.sheet?.render(true);\n      return this;\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Update an advancement belonging to this item.\n   * @param {string} id                       ID of the advancement to update.\n   * @param {object} updates                  Updates to apply to this advancement.\n   * @param {object} [options={}]\n   * @param {boolean} [options.source=false]  Should a source-only update be performed?\n   * @returns {Promise<Item5e>|Item5e}        This item with the changes applied, promised if source is `false`.\n   */\n  updateAdvancement(id, updates, { source=false }={}) {\n    if ( !this.system.advancement ) return this;\n    const idx = this.system.advancement.findIndex(a => a._id === id);\n    if ( idx === -1 ) throw new Error(`Advancement of ID ${id} could not be found to update`);\n\n    const advancement = this.advancement.byId[id];\n    if ( source ) {\n      advancement.updateSource(updates);\n      advancement.render();\n      return this;\n    }\n\n    const advancementCollection = this.toObject().system.advancement;\n    const clone = new advancement.constructor(advancementCollection[idx], { parent: advancement.parent });\n    clone.updateSource(updates);\n    advancementCollection[idx] = clone.toObject();\n    return this.update({\"system.advancement\": advancementCollection}).then(r => {\n      advancement.render(false, { height: \"auto\" });\n      return r;\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Remove an advancement from this item.\n   * @param {string} id                       ID of the advancement to remove.\n   * @param {object} [options={}]\n   * @param {boolean} [options.source=false]  Should a source-only update be performed?\n   * @returns {Promise<Item5e>|Item5e}        This item with the changes applied.\n   */\n  deleteAdvancement(id, { source=false }={}) {\n    if ( !this.system.advancement ) return this;\n\n    const advancementCollection = this.toObject().system.advancement.filter(a => a._id !== id);\n    if ( source ) return this.updateSource({\"system.advancement\": advancementCollection});\n    return this.update({\"system.advancement\": advancementCollection});\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Duplicate an advancement, resetting its value to default and giving it a new ID.\n   * @param {string} id                             ID of the advancement to duplicate.\n   * @param {object} [options]\n   * @param {boolean} [options.showConfig=true]     Should the new advancement's configuration application be shown?\n   * @param {boolean} [options.source=false]        Should a source-only update be performed?\n   * @returns {Promise<AdvancementConfig>|Item5e}   Promise for advancement config for duplicate advancement if source\n   *                                                is `false`, or item with newly duplicated advancement.\n   */\n  duplicateAdvancement(id, options) {\n    const original = this.advancement.byId[id];\n    if ( !original ) return this;\n    const duplicate = original.toObject();\n    delete duplicate._id;\n    if ( original.constructor.metadata.dataModels?.value ) {\n      duplicate.value = (new original.constructor.metadata.dataModels.value()).toObject();\n    } else {\n      duplicate.value = original.constructor.metadata.defaults?.value ?? {};\n    }\n    return this.createAdvancement(original.constructor.typeName, duplicate, options);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  getEmbeddedDocument(embeddedName, id, options) {\n    let doc;\n    switch ( embeddedName ) {\n      case \"Activity\": doc = this.system.activities?.get(id); break;\n      case \"Advancement\": doc = this.advancement.byId[id]; break;\n      default: return super.getEmbeddedDocument(embeddedName, id, options);\n    }\n    if ( options?.strict && (advancement === undefined) ) {\n      throw new Error(`The key ${id} does not exist in the ${embeddedName} Collection`);\n    }\n    return doc;\n  }\n\n  /* -------------------------------------------- */\n  /*  Event Handlers                              */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _preCreate(data, options, user) {\n    if ( (await super._preCreate(data, options, user)) === false ) return false;\n\n    const isPhysical = this.system.constructor._schemaTemplates?.includes(PhysicalItemTemplate);\n    if ( this.parent?.system?.isGroup && !isPhysical ) return false;\n\n    // Create identifier based on name\n    if ( this.system.hasOwnProperty(\"identifier\") && !data.system?.identifier ) {\n      this.updateSource({ \"system.identifier\": this.identifier });\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _onCreate(data, options, userId) {\n    super._onCreate(data, options, userId);\n    await this.system.onCreateActivities?.(data, options, userId);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _preUpdate(changed, options, user) {\n    if ( (await super._preUpdate(changed, options, user)) === false ) return false;\n    await this.system.preUpdateActivities?.(changed, options, user);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _onUpdate(changed, options, userId) {\n    super._onUpdate(changed, options, userId);\n    await this.system.onUpdateActivities?.(changed, options, userId);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _onDelete(options, userId) {\n    super._onDelete(options, userId);\n    await this.system.onDeleteActivities?.(options, userId);\n    if ( game.user.isActiveGM ) this.effects.forEach(e => e.getDependents().forEach(e => e.delete()));\n    if ( userId !== game.user.id ) return;\n    this.parent?.endConcentration?.(this);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async deleteDialog(options={}) {\n    // If item has advancement, handle it separately\n    if ( this.actor?.system.metadata?.supportsAdvancement && !game.settings.get(\"dnd5e\", \"disableAdvancements\") ) {\n      const manager = AdvancementManager.forDeletedItem(this.actor, this.id);\n      if ( manager.steps.length ) {\n        try {\n          const shouldRemoveAdvancements = await AdvancementConfirmationDialog.forDelete(this);\n          if ( shouldRemoveAdvancements ) return manager.render(true);\n          return this.delete({ shouldRemoveAdvancements });\n        } catch(err) {\n          return;\n        }\n      }\n    }\n\n    // Display custom delete dialog when deleting a container with contents\n    const count = await this.system.contentsCount;\n    if ( count ) {\n      return Dialog.confirm({\n        title: `${game.i18n.format(\"DOCUMENT.Delete\", {type: game.i18n.localize(\"DND5E.Container\")})}: ${this.name}`,\n        content: `<h4>${game.i18n.localize(\"AreYouSure\")}</h4>\n          <p>${game.i18n.format(\"DND5E.ContainerDeleteMessage\", {count})}</p>\n          <label>\n            <input type=\"checkbox\" name=\"deleteContents\">\n            ${game.i18n.localize(\"DND5E.ContainerDeleteContents\")}\n          </label>`,\n        yes: html => {\n          const deleteContents = html.querySelector('[name=\"deleteContents\"]').checked;\n          this.delete({ deleteContents });\n        },\n        options: { ...options, jQuery: false }\n      });\n    }\n\n    return super.deleteDialog(options);\n  }\n\n  /* -------------------------------------------- */\n  /*  Factory Methods                             */\n  /* -------------------------------------------- */\n\n  /**\n   * Add additional system-specific sidebar directory context menu options for Item documents.\n   * @param {ItemDirectory} app      The sidebar application.\n   * @param {object[]} entryOptions  The default array of context menu options.\n   */\n  static addDirectoryContextOptions(app, entryOptions) {\n    entryOptions.push({\n      name: \"DND5E.Scroll.CreateScroll\",\n      icon: '<i class=\"fa-solid fa-scroll\"></i>',\n      callback: async li => {\n        let spell = game.items.get(li.dataset.entryId);\n        if ( app.collection instanceof foundry.documents.collections.CompendiumCollection ) {\n          spell = await app.collection.getDocument(li.dataset.entryId);\n        }\n        const scroll = await Item5e.createScrollFromSpell(spell);\n        if ( scroll ) Item5e.create(scroll);\n      },\n      condition: li => {\n        let item = game.items.get(li.dataset.documentId ?? li.dataset.entryId);\n        if ( app.collection instanceof foundry.documents.collections.CompendiumCollection ) {\n          item = app.collection.index.get(li.dataset.entryId);\n        }\n        return (item.type === \"spell\") && game.user.hasPermission(\"ITEM_CREATE\");\n      },\n      group: \"system\"\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * @callback ItemContentsTransformer\n   * @param {Item5e|object} item        Data for the item to transform.\n   * @param {object} options\n   * @param {string} options.container  ID of the container to create the items.\n   * @param {number} options.depth      Current depth of the item being created.\n   * @returns {Item5e|object|void}\n   */\n\n  /**\n   * Prepare creation data for the provided items and any items contained within them. The data created by this method\n   * can be passed to `createDocuments` with `keepId` always set to true to maintain links to container contents.\n   * @param {Item5e[]} items                     Items to create.\n   * @param {object} [context={}]                Context for the item's creation.\n   * @param {Item5e} [context.container]         Container in which to create the item.\n   * @param {boolean} [context.keepId=false]     Should IDs be maintained?\n   * @param {ItemContentsTransformer} [context.transformAll]    Method called on provided items and their contents.\n   * @param {ItemContentsTransformer} [context.transformFirst]  Method called only on provided items.\n   * @returns {Promise<object[]>}                Data for items to be created.\n   */\n  static async createWithContents(items, { container, keepId=false, transformAll, transformFirst }={}) {\n    let depth = 0;\n    if ( container ) {\n      depth = 1 + (await container.system.allContainers()).length;\n      if ( depth > PhysicalItemTemplate.MAX_DEPTH ) {\n        ui.notifications.warn(game.i18n.format(\"DND5E.ContainerMaxDepth\", { depth: PhysicalItemTemplate.MAX_DEPTH }));\n        return;\n      }\n    }\n\n    const createItemData = async (item, containerId, depth) => {\n      const o = { container: containerId, depth };\n      let newItemData = transformAll ? await transformAll(item, o) : item;\n      if ( transformFirst && (depth === 0) ) newItemData = await transformFirst(newItemData, o);\n      if ( !newItemData ) return;\n      if ( newItemData instanceof Item ) newItemData = game.items.fromCompendium(newItemData, {\n        clearSort: false, keepId: true, clearOwnership: false\n      });\n      foundry.utils.mergeObject(newItemData, {\"system.container\": containerId} );\n      if ( !keepId ) newItemData._id = foundry.utils.randomID();\n\n      created.push(newItemData);\n\n      const contents = await item.system.contents;\n      if ( contents && (depth < PhysicalItemTemplate.MAX_DEPTH) ) {\n        for ( const doc of contents ) await createItemData(doc, newItemData._id, depth + 1);\n      }\n    };\n\n    const created = [];\n    for ( const item of items ) await createItemData(item, container?.id, depth);\n    return created;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Configuration options for spell scroll creation.\n   *\n   * @typedef {object} SpellScrollConfiguration\n   * @property {boolean} [dialog=true]                           Present scroll creation dialog?\n   * @property {\"full\"|\"reference\"|\"none\"} [explanation=\"full\"]  Length of spell scroll rules text to include.\n   * @property {number} [level]                                  Level at which the spell should be cast.\n   * @property {Partial<SpellScrollValues>} [values]             Spell scroll DC and attack bonus.\n   */\n\n  /**\n   * Create a consumable spell scroll Item from a spell Item.\n   * @param {Item5e|object} spell                   The spell or item data to be made into a scroll.\n   * @param {object} [options]                      Additional options that modify the created scroll.\n   * @param {SpellScrollConfiguration} [config={}]  Configuration options for scroll creation.\n   * @returns {Promise<Item5e|void>}                The created scroll consumable item.\n   */\n  static async createScrollFromSpell(spell, options={}, config={}) {\n    if ( spell.pack ) return this.createScrollFromCompendiumSpell(spell.uuid, config);\n\n    const values = {};\n    if ( (spell instanceof Item5e) && spell.isOwned && (game.settings.get(\"dnd5e\", \"rulesVersion\") === \"modern\") ) {\n      const spellcastingClass = spell.actor.spellcastingClasses?.[spell.system.sourceClass];\n      if ( spellcastingClass ) {\n        values.bonus = spellcastingClass.spellcasting.attack;\n        values.dc = spellcastingClass.spellcasting.save;\n      } else {\n        values.bonus = spell.actor.system.attributes?.spell?.mod;\n        values.dc = spell.actor.system.attributes?.spell?.dc;\n      }\n    }\n\n    config = foundry.utils.mergeObject({\n      explanation: game.user.getFlag(\"dnd5e\", \"creation.scrollExplanation\") ?? \"reference\",\n      level: spell.system.level,\n      values\n    }, config);\n\n    if ( config.dialog !== false ) {\n      const result = await CreateScrollDialog.create(spell, config);\n      if ( !result ) return;\n      foundry.utils.mergeObject(config, result);\n      await game.user.setFlag(\"dnd5e\", \"creation.scrollExplanation\", config.explanation);\n    }\n\n    // Get spell data\n    const itemData = (spell instanceof Item5e) ? spell.toObject() : spell;\n    const flags = itemData.flags ?? {};\n    if ( Number.isNumeric(config.level) ) {\n      flags.dnd5e ??= {};\n      flags.dnd5e.scaling = Math.max(0, config.level - spell.system.level);\n      flags.dnd5e.spellLevel = {\n        value: config.level,\n        base: spell.system.level\n      };\n      itemData.system.level = config.level;\n    }\n\n    /**\n     * A hook event that fires before the item data for a scroll is created.\n     * @function dnd5e.preCreateScrollFromSpell\n     * @memberof hookEvents\n     * @param {object} itemData                  The initial item data of the spell to convert to a scroll.\n     * @param {object} options                   Additional options that modify the created scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     * @returns {boolean}                        Explicitly return false to prevent the scroll to be created.\n     */\n    if ( Hooks.call(\"dnd5e.preCreateScrollFromSpell\", itemData, options, config) === false ) return;\n\n    let { activities, level, properties, source } = itemData.system;\n\n    // Get scroll data\n    let scrollUuid;\n    const id = CONFIG.DND5E.spellScrollIds[level];\n    if ( foundry.data.validators.isValidId(id) ) {\n      scrollUuid = game.packs.get(CONFIG.DND5E.sourcePacks.ITEMS).index.get(id).uuid;\n    } else {\n      scrollUuid = id;\n    }\n    const scrollItem = await fromUuid(scrollUuid);\n    const scrollData = game.items.fromCompendium(scrollItem);\n\n    // Create a composite description from the scroll description and the spell details\n    const desc = this._createScrollDescription(scrollItem, itemData, null, config);\n\n    for ( const level of Array.fromRange(itemData.system.level + 1).reverse() ) {\n      const values = CONFIG.DND5E.spellScrollValues[level];\n      if ( values ) {\n        config.values.bonus ??= values.bonus;\n        config.values.dc ??= values.dc;\n        break;\n      }\n    }\n\n    // Apply inferred spell activation, duration, range, and target data to activities\n    for ( const activity of Object.values(activities) ) {\n      for ( const key of [\"activation\", \"duration\", \"range\", \"target\"] ) {\n        if ( activity[key]?.override !== false ) continue;\n        activity[key].override = true;\n        foundry.utils.mergeObject(activity[key], itemData.system[key]);\n      }\n      activity.consumption.targets.push({ type: \"itemUses\", target: \"\", value: \"1\" });\n      if ( activity.type === \"attack\" ) {\n        activity.attack.flat = true;\n        activity.attack.bonus = values.bonus;\n      } else if ( activity.type === \"save\" ) {\n        activity.save.dc.calculation = \"\";\n        activity.save.dc.formula = values.dc;\n      }\n    }\n\n    // Create the spell scroll data\n    const spellScrollData = foundry.utils.mergeObject(scrollData, {\n      name: `${game.i18n.localize(\"DND5E.SpellScroll\")}: ${itemData.name}`,\n      effects: itemData.effects ?? [],\n      flags,\n      system: {\n        activities, description: { value: desc.trim() }, properties, source\n      }\n    });\n    foundry.utils.mergeObject(spellScrollData, options);\n    spellScrollData.system.properties = [\n      \"mgc\",\n      ...scrollData.system.properties,\n      ...properties ?? [],\n      ...options.system?.properties ?? []\n    ];\n\n    /**\n     * A hook event that fires after the item data for a scroll is created but before the item is returned.\n     * @function dnd5e.createScrollFromSpell\n     * @memberof hookEvents\n     * @param {Item5e|object} spell              The spell or item data to be made into a scroll.\n     * @param {object} spellScrollData           The final item data used to make the scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     */\n    Hooks.callAll(\"dnd5e.createScrollFromSpell\", spell, spellScrollData, config);\n\n    return new this(spellScrollData);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a consumable spell scroll Item from a spell Item.\n   * @param {string} uuid                           UUID of the spell to add to the scroll.\n   * @param {SpellScrollConfiguration} [config={}]  Configuration options for scroll creation.\n   * @returns {Promise<Item5e|void>}                The created scroll consumable item.\n   */\n  static async createScrollFromCompendiumSpell(uuid, config={}) {\n    const spell = await fromUuid(uuid);\n    if ( !spell ) return;\n\n    const values = {};\n\n    config = foundry.utils.mergeObject({\n      explanation: game.user.getFlag(\"dnd5e\", \"creation.scrollExplanation\") ?? \"reference\",\n      level: spell.system.level,\n      values\n    }, config);\n\n    if ( config.dialog !== false ) {\n      const result = await CreateScrollDialog.create(spell, config);\n      if ( !result ) return;\n      foundry.utils.mergeObject(config, result);\n      await game.user.setFlag(\"dnd5e\", \"creation.scrollExplanation\", config.explanation);\n    }\n\n    /**\n     * A hook event that fires before the item data for a scroll is created for a compendium spell.\n     * @function dnd5e.preCreateScrollFromCompendiumSpell\n     * @memberof hookEvents\n     * @param {Item5e} spell                     Spell to add to the scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     * @returns {boolean}                        Explicitly return `false` to prevent the scroll to be created.\n     */\n    if ( Hooks.call(\"dnd5e.preCreateScrollFromCompendiumSpell\", spell, config) === false ) return;\n\n    // Get scroll data\n    let scrollUuid;\n    const id = CONFIG.DND5E.spellScrollIds[spell.system.level];\n    if ( foundry.data.validators.isValidId(id) ) {\n      scrollUuid = game.packs.get(CONFIG.DND5E.sourcePacks.ITEMS).index.get(id).uuid;\n    } else {\n      scrollUuid = id;\n    }\n    const scrollItem = await fromUuid(scrollUuid);\n    const scrollData = game.items.fromCompendium(scrollItem);\n\n    for ( const level of Array.fromRange(spell.system.level + 1).reverse() ) {\n      const values = CONFIG.DND5E.spellScrollValues[level];\n      if ( values ) {\n        config.values.bonus ??= values.bonus;\n        config.values.dc ??= values.dc;\n        break;\n      }\n    }\n\n    const activity = {\n      _id: staticID(\"dnd5escrollspell\"),\n      type: \"cast\",\n      consumption: {\n        targets: [{ type: \"itemUses\", value: \"1\" }]\n      },\n      spell: {\n        challenge: {\n          attack: config.values.bonus,\n          save: config.values.dc,\n          override: true\n        },\n        level: config.level,\n        uuid\n      }\n    };\n\n    // Create the spell scroll data\n    const spellScrollData = foundry.utils.mergeObject(scrollData, {\n      name: `${game.i18n.localize(\"DND5E.SpellScroll\")}: ${spell.name}`,\n      system: {\n        activities: { ...(scrollData.system.activities ?? {}), [activity._id]: activity },\n        description: {\n          value: this._createScrollDescription(scrollItem, spell, `<p>@Embed[${uuid} inline]</p>`, config).trim()\n        }\n      }\n    });\n\n    /**\n     * A hook event that fires after the item data for a scroll is created but before the item is returned.\n     * @function dnd5e.createScrollFromSpell\n     * @memberof hookEvents\n     * @param {Item5e} spell                     The spell or item data to be made into a scroll.\n     * @param {object} spellScrollData           The final item data used to make the scroll.\n     * @param {SpellScrollConfiguration} config  Configuration options for scroll creation.\n     */\n    Hooks.callAll(\"dnd5e.createScrollFromSpell\", spell, spellScrollData, config);\n\n    return new this(spellScrollData);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create the description for a spell scroll.\n   * @param {Item5e} scroll                         Base spell scroll.\n   * @param {Item5e|object} spell                   Spell being added to the scroll.\n   * @param {string} [spellDescription]             Description from the spell being added.\n   * @param {SpellScrollConfiguration} [config={}]  Configuration options for scroll creation.\n   * @returns {string}\n   * @protected\n   */\n  static _createScrollDescription(scroll, spell, spellDescription, config={}) {\n    spellDescription ??= spell.system.description.value;\n    const isConc = spell.system.properties[spell instanceof Item5e ? \"has\" : \"includes\"](\"concentration\");\n    const level = spell.system.level;\n    switch ( config.explanation ) {\n      case \"full\":\n        // Split the scroll description into an intro paragraph and the remaining details\n        const scrollDescription = scroll.system.description.value;\n        const pdel = \"</p>\";\n        const scrollIntroEnd = scrollDescription.indexOf(pdel);\n        const scrollIntro = scrollDescription.slice(0, scrollIntroEnd + pdel.length);\n        const scrollDetails = scrollDescription.slice(scrollIntroEnd + pdel.length);\n        return [\n          scrollIntro,\n          `<h3>${spell.name} (${game.i18n.format(\"DND5E.LevelNumber\", { level })})</h3>`,\n          isConc ? `<p><em>${game.i18n.localize(\"DND5E.Scroll.RequiresConcentration\")}</em></p>` : null,\n          spellDescription,\n          `<h3>${game.i18n.localize(\"DND5E.Scroll.Details\")}</h3>`,\n          scrollDetails\n        ].filterJoin(\"\");\n      case \"reference\":\n        return [\n          \"<p><em>\",\n          CONFIG.DND5E.spellLevels[level] ?? level,\n          \" &Reference[Spell Scroll]\",\n          isConc ? `, ${game.i18n.localize(\"DND5E.Scroll.RequiresConcentration\")}` : null,\n          \"</em></p>\",\n          spellDescription\n        ].filterJoin(\"\");\n    }\n    return spellDescription;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Spawn a dialog for creating a new Item.\n   * @param {object} [data]  Data to pre-populate the Item with.\n   * @param {object} [context]\n   * @param {Actor5e} [context.parent]       A parent for the Item.\n   * @param {string|null} [context.pack]     A compendium pack the Item should be placed in.\n   * @param {string[]|null} [context.types]  A list of types to restrict the choices to, or null for no restriction.\n   * @returns {Promise<Item5e|null>}\n   */\n  static async createDialog(data={}, { parent=null, pack=null, types=null, ...options }={}) {\n    types ??= game.documentTypes[this.documentName].filter(t => (t !== CONST.BASE_DOCUMENT_TYPE) && (t !== \"backpack\"));\n    if ( !types.length ) return null;\n    const collection = parent ? null : pack ? game.packs.get(pack) : game.collections.get(this.documentName);\n    const folders = collection?._formatFolderSelectOptions() ?? [];\n    const label = game.i18n.localize(this.metadata.label);\n    const title = game.i18n.format(\"DOCUMENT.Create\", { type: label });\n    const name = data.name || game.i18n.format(\"DOCUMENT.New\", { type: label });\n    let type = data.type || CONFIG[this.documentName]?.defaultType;\n    const content = await foundry.applications.handlebars.renderTemplate(\n      \"systems/dnd5e/templates/apps/document-create.hbs\",\n      {\n        folders, name, type,\n        folder: data.folder,\n        hasFolders: folders.length > 0,\n        types: types.map(type => {\n          const label = CONFIG[this.documentName]?.typeLabels?.[type] ?? type;\n          const data = {\n            type,\n            label: game.i18n.has(label) ? game.i18n.localize(label) : type,\n            icon: this.getDefaultArtwork({ type })?.img ?? \"icons/svg/item-bag.svg\"\n          };\n          data.svg = data.icon?.endsWith(\".svg\");\n          return data;\n        }).sort((a, b) => a.label.localeCompare(b.label, game.i18n.lang))\n      }\n    );\n    return Dialog.prompt({\n      title, content,\n      label: title,\n      render: html => {\n        const app = html.closest(\".app\");\n        const folder = app.querySelector(\"select\");\n        if ( folder ) app.querySelector(\".dialog-buttons\").insertAdjacentElement(\"afterbegin\", folder);\n        app.querySelectorAll(\".window-header .header-button\").forEach(btn => {\n          const label = btn.innerText;\n          const icon = btn.querySelector(\"i\");\n          btn.innerHTML = icon.outerHTML;\n          btn.dataset.tooltip = label;\n          btn.setAttribute(\"aria-label\", label);\n        });\n        app.querySelector(\".document-name\").select();\n      },\n      callback: html => {\n        const form = html.querySelector(\"form\");\n        const fd = new foundry.applications.ux.FormDataExtended(form);\n        const createData = foundry.utils.mergeObject(data, fd.object, { inplace: false });\n        if ( !createData.folder ) delete createData.folder;\n        if ( !createData.name?.trim() ) createData.name = this.defaultName();\n        return this.create(createData, { parent, pack, renderSheet: true });\n      },\n      rejectClose: false,\n      options: { ...options, jQuery: false, width: 350, classes: [\"dnd5e2\", \"create-document\", \"dialog\"] }\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static getDefaultArtwork(itemData={}) {\n    const { type } = itemData;\n    const { img } = super.getDefaultArtwork(itemData);\n    return { img: CONFIG.DND5E.defaultArtwork.Item[type] ?? img };\n  }\n\n  /* -------------------------------------------- */\n  /*  Migrations & Deprecations                   */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static migrateData(source) {\n    source = super.migrateData(source);\n    ActivitiesTemplate.initializeActivities(source);\n    if ( source.type === \"class\" ) ClassData._migrateTraitAdvancement(source);\n    else if ( source.type === \"container\" ) ContainerData._migrateWeightlessData(source);\n    else if ( source.type === \"equipment\" ) EquipmentData._migrateStealth(source);\n    else if ( source.type === \"spell\" ) SpellData._migrateComponentData(source);\n    return source;\n  }\n}\n"
    }
  },
  "rolltable_format": {
    "table_structures": {},
    "result_formats": [],
    "dice_formulas": [],
    "rolltable_source_code": {}
  },
  "technical_findings": [],
  "advancement_patterns": {
    "advancement_types": [],
    "level_distributions": {},
    "configuration_patterns": {},
    "itemgrant_examples": []
  }
}